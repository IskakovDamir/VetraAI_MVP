"""
–£–ü–†–û–©–ï–ù–ù–ê–Ø —Å–∏—Å—Ç–µ–º–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –±–µ–∑ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è –∫–æ–¥–æ–≤
–ò—Å–ø–æ–ª—å–∑—É–µ—Ç –≤–µ–±-—Å–µ—Ä–≤–µ—Ä –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–æ–≤
"""

import os
import json
import logging
import threading
import time
from datetime import datetime
from urllib.parse import urlparse, parse_qs
from http.server import BaseHTTPRequestHandler, HTTPServer
from google.oauth2.credentials import Credentials
from google_auth_oauthlib.flow import Flow
from google.auth.transport.requests import Request
from googleapiclient.discovery import build
from googleapiclient.errors import HttpError

logger = logging.getLogger(__name__)

SCOPES = ['https://www.googleapis.com/auth/calendar']
USERS_DIR = 'users'
# –í–µ–±-—Å–µ—Ä–≤–µ—Ä –¥–ª—è OAuth callback
REDIRECT_URI = 'http://localhost:8080/oauth2callback'

class SimplifiedAuthManager:
    def __init__(self):
        if not os.path.exists(USERS_DIR):
            os.makedirs(USERS_DIR)
            logger.info(f"‚úÖ –°–æ–∑–¥–∞–Ω–∞ –ø–∞–ø–∫–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {USERS_DIR}")
        
        # –ê–∫—Ç–∏–≤–Ω—ã–µ —Å–µ—Å—Å–∏–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
        self.active_sessions = {}
        # –í–µ–±-—Å–µ—Ä–≤–µ—Ä –¥–ª—è callback
        self.server = None
        self.server_thread = None
        
    def start_callback_server(self):
        """–ó–∞–ø—É—Å—Ç–∏—Ç—å –≤–µ–±-—Å–µ—Ä–≤–µ—Ä –¥–ª—è OAuth callback"""
        if self.server is None:
            try:
                self.server = HTTPServer(('localhost', 8080), OAuthCallbackHandler)
                self.server.auth_manager = self  # –ü–µ—Ä–µ–¥–∞–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –º–µ–Ω–µ–¥–∂–µ—Ä
                
                self.server_thread = threading.Thread(target=self.server.serve_forever, daemon=True)
                self.server_thread.start()
                
                logger.info("‚úÖ OAuth callback —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ localhost:8080")
                return True
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: {e}")
                return False
        return True
    
    def stop_callback_server(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤–µ–±-—Å–µ—Ä–≤–µ—Ä"""
        if self.server:
            self.server.shutdown()
            self.server = None
            logger.info("üõë OAuth callback —Å–µ—Ä–≤–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    
    def get_user_token_path(self, user_id):
        return os.path.join(USERS_DIR, f"user_{user_id}_token.json")
    
    def get_user_info_path(self, user_id):
        return os.path.join(USERS_DIR, f"user_{user_id}_info.json")
    
    def is_user_authorized(self, user_id):
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"""
        token_path = self.get_user_token_path(user_id)
        
        if not os.path.exists(token_path):
            return False
        
        try:
            creds = Credentials.from_authorized_user_file(token_path, SCOPES)
            
            if not creds:
                return False
            
            if creds.valid:
                return True
            
            if creds.expired and creds.refresh_token:
                try:
                    creds.refresh(Request())
                    self.save_user_credentials(user_id, creds)
                    return True
                except Exception as e:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
                    return False
            
            return False
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
            return False
    
    def get_user_credentials(self, user_id):
        """–ü–æ–ª—É—á–∏—Ç—å —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        token_path = self.get_user_token_path(user_id)
        
        if not os.path.exists(token_path):
            return None
        
        try:
            creds = Credentials.from_authorized_user_file(token_path, SCOPES)
            
            if not creds:
                return None
            
            if creds.expired and creds.refresh_token:
                try:
                    creds.refresh(Request())
                    self.save_user_credentials(user_id, creds)
                except Exception as e:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞: {e}")
                    return None
            
            return creds
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —É—á–µ—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö: {e}")
            return None
    
    def save_user_credentials(self, user_id, credentials):
        """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        token_path = self.get_user_token_path(user_id)
        
        try:
            os.makedirs(os.path.dirname(token_path), exist_ok=True)
            
            with open(token_path, 'w') as token_file:
                token_file.write(credentials.to_json())
            
            logger.info(f"‚úÖ –¢–æ–∫–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} —Å–æ—Ö—Ä–∞–Ω–µ–Ω")
            return True
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞: {e}")
            return False
    
    def save_user_info(self, user_id, user_data):
        """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ"""
        info_path = self.get_user_info_path(user_id)
        
        user_data['registered_at'] = datetime.now().isoformat()
        user_data['user_id'] = user_id
        user_data['last_updated'] = datetime.now().isoformat()
        
        try:
            os.makedirs(os.path.dirname(info_path), exist_ok=True)
            
            with open(info_path, 'w', encoding='utf-8') as info_file:
                json.dump(user_data, info_file, ensure_ascii=False, indent=2)
            
            logger.info(f"‚úÖ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞")
            return True
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏: {e}")
            return False
    
    def get_user_info(self, user_id):
        """–ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ"""
        info_path = self.get_user_info_path(user_id)
        
        if not os.path.exists(info_path):
            return None
        
        try:
            with open(info_path, 'r', encoding='utf-8') as info_file:
                return json.load(info_file)
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏: {e}")
            return None
    
    def get_google_user_profile(self, credentials):
        """–ü–æ–ª—É—á–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è Google"""
        try:
            service = build('calendar', 'v3', credentials=credentials)
            calendar_list = service.calendarList().list().execute()
            
            primary_calendar = None
            calendar_count = 0
            
            for calendar in calendar_list.get('items', []):
                calendar_count += 1
                if calendar.get('primary', False):
                    primary_calendar = {
                        'id': calendar['id'],
                        'summary': calendar.get('summary', '–û—Å–Ω–æ–≤–Ω–æ–π –∫–∞–ª–µ–Ω–¥–∞—Ä—å'),
                        'timezone': calendar.get('timeZone', 'UTC'),
                        'access_role': calendar.get('accessRole', 'unknown')
                    }
            
            return {
                'primary_calendar': primary_calendar,
                'calendar_count': calendar_count,
                'calendars': calendar_list.get('items', [])[:5],
                'profile_fetched_at': datetime.now().isoformat()
            }
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è: {e}")
            return None
    
    def create_authorization_url(self, user_id):
        """–°–æ–∑–¥–∞—Ç—å —Å—Å—ã–ª–∫—É –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º callback"""
        try:
            # –ó–∞–ø—É—Å–∫–∞–µ–º callback —Å–µ—Ä–≤–µ—Ä –µ—Å–ª–∏ –Ω–µ –∑–∞–ø—É—â–µ–Ω
            if not self.start_callback_server():
                return None
            
            if not os.path.exists('credentials.json'):
                logger.error("‚ùå –§–∞–π–ª credentials.json –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return None
            
            # –°–æ–∑–¥–∞–µ–º flow
            flow = Flow.from_client_secrets_file(
                'credentials.json',
                scopes=SCOPES,
                redirect_uri=REDIRECT_URI
            )
            
            # –°–æ–∑–¥–∞–µ–º URL –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
            auth_url, state = flow.authorization_url(
                access_type='offline',
                include_granted_scopes='true',
                prompt='consent'
            )
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–µ—Å—Å–∏—é
            self.active_sessions[state] = {
                'user_id': user_id,
                'flow': flow,
                'created_at': datetime.now()
            }
            
            logger.info(f"‚úÖ –°–æ–∑–¥–∞–Ω–∞ —Å—Å—ã–ª–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
            return auth_url
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å—Å—ã–ª–∫–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {e}")
            return None
    
    def handle_oauth_callback(self, state, code):
        """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å callback –æ—Ç Google OAuth"""
        try:
            if state not in self.active_sessions:
                logger.error(f"‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è —Å–µ—Å—Å–∏—è: {state}")
                return None
            
            session = self.active_sessions[state]
            user_id = session['user_id']
            flow = session['flow']
            
            # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω
            flow.fetch_token(code=code)
            creds = flow.credentials
            
            if not creds:
                logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç–æ–∫–µ–Ω")
                return None
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            if not self.save_user_credentials(user_id, creds):
                return None
            
            # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user_profile = self.get_google_user_profile(creds)
            if user_profile:
                self.save_user_info(user_id, user_profile)
            
            # –û—á–∏—â–∞–µ–º —Å–µ—Å—Å–∏—é
            del self.active_sessions[state]
            
            logger.info(f"‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
            return user_id
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ callback: {e}")
            return None
    
    def revoke_user_authorization(self, user_id):
        """–û—Ç–æ–∑–≤–∞—Ç—å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        token_path = self.get_user_token_path(user_id)
        info_path = self.get_user_info_path(user_id)
        
        files_removed = 0
        for file_path in [token_path, info_path]:
            if os.path.exists(file_path):
                try:
                    os.remove(file_path)
                    files_removed += 1
                except Exception as e:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ñ–∞–π–ª–∞ {file_path}: {e}")
        
        logger.info(f"‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –æ—Ç–æ–∑–≤–∞–Ω–∞")
        return files_removed > 0

class OAuthCallbackHandler(BaseHTTPRequestHandler):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ OAuth callback"""
    
    def do_GET(self):
        """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å GET –∑–∞–ø—Ä–æ—Å –æ—Ç Google OAuth"""
        try:
            # –ü–∞—Ä—Å–∏–º URL
            parsed_url = urlparse(self.path)
            query_params = parse_qs(parsed_url.query)
            
            if parsed_url.path == '/oauth2callback':
                # –ü–æ–ª—É—á–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
                state = query_params.get('state', [None])[0]
                code = query_params.get('code', [None])[0]
                error = query_params.get('error', [None])[0]
                
                if error:
                    self.send_error_response(f"–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {error}")
                    return
                
                if not state or not code:
                    self.send_error_response("–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã")
                    return
                
                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º callback
                user_id = self.server.auth_manager.handle_oauth_callback(state, code)
                
                if user_id:
                    self.send_success_response(user_id)
                else:
                    self.send_error_response("–û—à–∏–±–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏")
            else:
                self.send_404()
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ callback: {e}")
            self.send_error_response(f"–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞: {str(e)}")
    
    def send_success_response(self, user_id):
        """–û—Ç–ø—Ä–∞–≤–∏—Ç—å —É—Å–ø–µ—à–Ω—ã–π –æ—Ç–≤–µ—Ç"""
        html = f"""
        <!DOCTYPE html>
        <html>
        <head>
            <title>–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞</title>
            <meta charset="utf-8">
            <style>
                body {{ font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif; 
                       text-align: center; margin-top: 100px; background: #f5f5f5; }}
                .container {{ background: white; padding: 40px; border-radius: 10px; 
                            box-shadow: 0 2px 10px rgba(0,0,0,0.1); display: inline-block; }}
                .success {{ color: #28a745; font-size: 24px; margin-bottom: 20px; }}
                .message {{ color: #666; font-size: 16px; }}
            </style>
        </head>
        <body>
            <div class="container">
                <div class="success">‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!</div>
                <div class="message">
                    –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –∑–∞–∫—Ä—ã—Ç—å —ç—Ç—É —Å—Ç—Ä–∞–Ω–∏—Ü—É –∏<br>
                    –≤–µ—Ä–Ω—É—Ç—å—Å—è –∫ –±–æ—Ç—É –≤ Telegram.
                </div>
            </div>
            <script>
                setTimeout(function() {{
                    window.close();
                }}, 3000);
            </script>
        </body>
        </html>
        """
        
        self.send_response(200)
        self.send_header('Content-type', 'text/html; charset=utf-8')
        self.end_headers()
        self.wfile.write(html.encode('utf-8'))
    
    def send_error_response(self, error_message):
        """–û—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç–≤–µ—Ç —Å –æ—à–∏–±–∫–æ–π"""
        html = f"""
        <!DOCTYPE html>
        <html>
        <head>
            <title>–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏</title>
            <meta charset="utf-8">
            <style>
                body {{ font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif; 
                       text-align: center; margin-top: 100px; background: #f5f5f5; }}
                .container {{ background: white; padding: 40px; border-radius: 10px; 
                            box-shadow: 0 2px 10px rgba(0,0,0,0.1); display: inline-block; }}
                .error {{ color: #dc3545; font-size: 24px; margin-bottom: 20px; }}
                .message {{ color: #666; font-size: 16px; }}
            </style>
        </head>
        <body>
            <div class="container">
                <div class="error">‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏</div>
                <div class="message">
                    {error_message}<br><br>
                    –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.
                </div>
            </div>
        </body>
        </html>
        """
        
        self.send_response(400)
        self.send_header('Content-type', 'text/html; charset=utf-8')
        self.end_headers()
        self.wfile.write(html.encode('utf-8'))
    
    def send_404(self):
        """–û—Ç–ø—Ä–∞–≤–∏—Ç—å 404 –æ—Ç–≤–µ—Ç"""
        self.send_response(404)
        self.send_header('Content-type', 'text/plain')
        self.end_headers()
        self.wfile.write(b'404 Not Found')
    
    def log_message(self, format, *args):
        """–û—Ç–∫–ª—é—á–∞–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ HTTP —Å–µ—Ä–≤–µ—Ä–∞"""
        pass

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –º–µ–Ω–µ–¥–∂–µ—Ä–∞
simplified_auth_manager = SimplifiedAuthManager()

def get_user_calendar_service(user_id):
    """–ü–æ–ª—É—á–∏—Ç—å —Å–µ—Ä–≤–∏—Å Google Calendar –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        creds = simplified_auth_manager.get_user_credentials(user_id)
        if not creds:
            return None
        
        service = build('calendar', 'v3', credentials=creds)
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
        try:
            service.calendarList().list(maxResults=1).execute()
            return service
        except HttpError as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–µ—Ä–≤–∏—Å–∞: {e}")
            return None
            
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–µ—Ä–≤–∏—Å–∞: {e}")
        return None