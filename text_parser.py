"""
üß† –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô text_parser.py –¥–ª—è Vetra AI - –†–ï–®–ï–ù–ò–ï –ü–†–û–ë–õ–ï–ú–´ –ú–ù–û–ñ–ï–°–¢–í–ï–ù–ù–´–• –°–û–ë–´–¢–ò–ô
‚úÖ –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –¥–∏–∞–ø–∞–∑–æ–Ω–æ–≤ (—Å 12:00 –¥–æ 14:00)
‚úÖ –ü–û–õ–ù–û–°–¢–¨–Æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –Ω–∞–∑–≤–∞–Ω–∏–π —Å–æ–±—ã—Ç–∏–π
‚úÖ –ö–ê–†–î–ò–ù–ê–õ–¨–ù–û –ü–ï–†–ï–†–ê–ë–û–¢–ê–ù–ù–ê–Ø –ø–æ–¥–¥–µ—Ä–∂–∫–∞ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π
‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ê –ª–æ–≥–∏–∫–∞: —Å–Ω–∞—á–∞–ª–∞ —Ä–∞–∑–±–∏–≤–∫–∞ –ø–æ –∑–∞–ø—è—Ç—ã–º, –ø–æ—Ç–æ–º –ø–æ–∏—Å–∫ –¥–∏–∞–ø–∞–∑–æ–Ω–æ–≤
"""

import re
from datetime import datetime, timedelta
from datetime_utils import enhanced_datetime_parser, validate_datetime
import logging

logger = logging.getLogger(__name__)

def extract_multiple_events(text, user_timezone='Asia/Almaty'):
    """üéØ –ü–ï–†–ï–†–ê–ë–û–¢–ê–ù–ù–ê–Ø –ì–õ–ê–í–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø: –£–º–Ω–æ–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π"""
    logger.info(f"üîç –ê–Ω–∞–ª–∏–∑ –º–Ω–æ–≥–æ—Å–æ–±—ã—Ç–∏–π–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞: '{text}'")
    
    # –®–ê–ì 1: –ü–†–ò–û–†–ò–¢–ï–¢ - –°–Ω–∞—á–∞–ª–∞ –∏—â–µ–º –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—ã–µ
    comma_events = extract_comma_separated_events_completely_fixed(text, user_timezone)
    if comma_events:
        logger.info(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(comma_events)} —Å–æ–±—ã—Ç–∏–π —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—ã–µ")
        return comma_events
    
    # –®–ê–ì 2: –í—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∏–∞–ø–∞–∑–æ–Ω—ã (—Å X –¥–æ Y) - —Ç–æ–ª—å–∫–æ –¥–ª—è –æ–¥–∏–Ω–æ—á–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π
    time_range_event = extract_time_range_event(text, user_timezone)
    if time_range_event:
        logger.info("‚úÖ –ù–∞–π–¥–µ–Ω –≤—Ä–µ–º–µ–Ω–Ω–æ–π –¥–∏–∞–ø–∞–∑–æ–Ω")
        return [time_range_event]
    
    # –®–ê–ì 3: –û–¥–∏–Ω–æ—á–Ω–æ–µ —Å–æ–±—ã—Ç–∏–µ
    single_event = extract_single_event(text, user_timezone)
    if single_event:
        return [single_event]
    
    logger.warning("‚ùå –°–æ–±—ã—Ç–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
    return []

def extract_comma_separated_events_completely_fixed(text, user_timezone):
    """üî• –ü–û–õ–ù–û–°–¢–¨–Æ –ü–ï–†–ï–†–ê–ë–û–¢–ê–ù–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø: –ü—Ä–∞–≤–∏–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π
    
    –ù–û–í–ê–Ø –°–¢–†–ê–¢–ï–ì–ò–Ø:
    1. –°–ù–ê–ß–ê–õ–ê —Ä–∞–∑–±–∏–≤–∞–µ–º —Ç–µ–∫—Å—Ç –ø–æ –∑–∞–ø—è—Ç—ã–º –∏ —Å–æ—é–∑–∞–º
    2. –ü–û–¢–û–ú –∏—â–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã –≤ –∫–∞–∂–¥–æ–π —á–∞—Å—Ç–∏ –æ—Ç–¥–µ–ª—å–Ω–æ
    3. –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—É—é —á–∞—Å—Ç—å –∫–∞–∫ –æ—Ç–¥–µ–ª—å–Ω–æ–µ —Å–æ–±—ã—Ç–∏–µ
    """
    logger.info(f"üìù –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô –ø–æ–∏—Å–∫ —Å–æ–±—ã—Ç–∏–π —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—ã–µ: '{text}'")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∑–∞–ø—è—Ç—ã—Ö
    if ',' not in text and ' –∏ ' not in text:
        logger.info("‚ùå –ó–∞–ø—è—Ç—ã–µ –∏–ª–∏ —Å–æ—é–∑—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        return None
    
    # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —É–∫–∞–∑–∞—Ç–µ–ª–µ–π –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏
    time_indicators = re.findall(r'\b(?:–≤|—Å|–¥–æ)\s+\d{1,2}[:\.]?\d{2}|\d{1,2}[:\.]?\d{2}', text, re.IGNORECASE)
    logger.info(f"üìä –ù–∞–π–¥–µ–Ω–æ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —É–∫–∞–∑–∞—Ç–µ–ª–µ–π: {len(time_indicators)}")
    
    if len(time_indicators) < 2:
        logger.info("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —É–∫–∞–∑–∞—Ç–µ–ª–µ–π –¥–ª—è –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π")
        return None
    
    # –ö–õ–Æ–ß–ï–í–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –†–∞–∑–±–∏–≤–∞–µ–º —Ç–µ–∫—Å—Ç –ø–æ –∑–∞–ø—è—Ç—ã–º –∏ —Å–æ—é–∑–∞–º
    # –£–ª—É—á—à–µ–Ω–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã —Ä–∞–∑–±–∏–≤–∫–∏
    split_patterns = [
        r',\s*(?:–∏\s+)?(?:–ø–æ—Ç–æ–º\s+)?(?:—Ç–∞–∫–∂–µ\s+)?(?:–µ—â–µ\s+)?',  # –∑–∞–ø—è—Ç–∞—è + —Å–æ—é–∑—ã
        r'\s+–∏\s+–ø–æ—Ç–æ–º\s+',  # "–∏ –ø–æ—Ç–æ–º"
        r'\s+–∞\s+–ø–æ—Ç–æ–º\s+',  # "–∞ –ø–æ—Ç–æ–º"
        r';\s*',             # —Ç–æ—á–∫–∞ —Å –∑–∞–ø—è—Ç–æ–π
    ]
    
    # –û–±—ä–µ–¥–∏–Ω—è–µ–º –≤—Å–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã –≤ –æ–¥–∏–Ω
    combined_pattern = '|'.join(f'({pattern})' for pattern in split_patterns)
    
    # –†–∞–∑–±–∏–≤–∞–µ–º —Ç–µ–∫—Å—Ç
    parts = re.split(combined_pattern, text, flags=re.IGNORECASE)
    
    # –£–±–∏—Ä–∞–µ–º —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª–∏ –∏ –ø—É—Å—Ç—ã–µ —á–∞—Å—Ç–∏
    clean_parts = []
    for part in parts:
        if part and not re.match(r'^[,;\s]*(?:–∏|–ø–æ—Ç–æ–º|—Ç–∞–∫–∂–µ|–µ—â–µ)?[,;\s]*$', part, re.IGNORECASE):
            clean_parts.append(part.strip())
    
    logger.info(f"üìù –†–∞–∑–±–∏–ª–∏ –Ω–∞ —á–∞—Å—Ç–∏: {clean_parts}")
    
    if len(clean_parts) < 2:
        logger.info("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —á–∞—Å—Ç–µ–π –ø–æ—Å–ª–µ —Ä–∞–∑–±–∏–≤–∫–∏")
        return None
    
    # –ö–õ–Æ–ß–ï–í–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—É—é —á–∞—Å—Ç—å –û–¢–î–ï–õ–¨–ù–û
    events = []
    
    for i, part in enumerate(clean_parts):
        part = part.strip()
        if not part:
            continue
            
        logger.info(f"üìù –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —á–∞—Å—Ç—å {i+1}: '{part}'")
        
        # –ò–°–ü–†–ê–í–õ–ï–ù–û: –ò—â–µ–º –¥–∏–∞–ø–∞–∑–æ–Ω –í –≠–¢–û–ô –ö–û–ù–ö–†–ï–¢–ù–û–ô –ß–ê–°–¢–ò
        range_event = extract_time_range_event(part, user_timezone)
        if range_event:
            logger.info(f"‚úÖ –í —á–∞—Å—Ç–∏ {i+1} –Ω–∞–π–¥–µ–Ω –¥–∏–∞–ø–∞–∑–æ–Ω: '{range_event[1]}'")
            events.append(range_event)
            continue
        
        # –ï—Å–ª–∏ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ –Ω–µ—Ç, –ø—Ä–æ–±—É–µ–º –ø—Ä–æ—Å—Ç–æ–µ —Å–æ–±—ã—Ç–∏–µ
        simple_event = extract_single_event(part, user_timezone)
        if simple_event:
            logger.info(f"‚úÖ –í —á–∞—Å—Ç–∏ {i+1} –Ω–∞–π–¥–µ–Ω–æ –ø—Ä–æ—Å—Ç–æ–µ —Å–æ–±—ã—Ç–∏–µ: '{simple_event[1]}'")
            events.append(simple_event)
        else:
            logger.warning(f"‚ö†Ô∏è –í —á–∞—Å—Ç–∏ {i+1} —Å–æ–±—ã—Ç–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
    
    logger.info(f"üìä –ò—Ç–æ–≥–æ –Ω–∞–π–¥–µ–Ω–æ —Å–æ–±—ã—Ç–∏–π: {len(events)}")
    
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –Ω–∞—à–ª–∏ –º–∏–Ω–∏–º—É–º 2 —Å–æ–±—ã—Ç–∏—è
    if len(events) >= 2:
        return events
    
    logger.info("‚ùå –ù–∞–π–¥–µ–Ω–æ –º–µ–Ω–µ–µ 2 —Å–æ–±—ã—Ç–∏–π, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º None")
    return None

def extract_time_range_event(text, user_timezone):
    """üéØ –ö–õ–Æ–ß–ï–í–ê–Ø –§–£–ù–ö–¶–ò–Ø: –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Å–æ–±—ã—Ç–∏–π —Å –≤—Ä–µ–º–µ–Ω–Ω—ã–º–∏ –¥–∏–∞–ø–∞–∑–æ–Ω–∞–º–∏"""
    logger.info(f"‚è∞ –ü–æ–∏—Å–∫ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –¥–∏–∞–ø–∞–∑–æ–Ω–æ–≤ –≤: '{text}'")
    
    # –ü–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –¥–∏–∞–ø–∞–∑–æ–Ω–æ–≤
    time_range_patterns = [
        # "—Å 21:30 –¥–æ 22:30" - –æ—Å–Ω–æ–≤–Ω–æ–π –ø–∞—Ç—Ç–µ—Ä–Ω
        (r'—Å\s+(\d{1,2})[:\.](\d{2})\s+–¥–æ\s+(\d{1,2})[:\.](\d{2})', 'range_from_to'),
        # "–≤ 21:30 –¥–æ 22:30" 
        (r'–≤\s+(\d{1,2})[:\.](\d{2})\s+–¥–æ\s+(\d{1,2})[:\.](\d{2})', 'range_at_to'),
        # "21:30-22:30" - —á–µ—Ä–µ–∑ –¥–µ—Ñ–∏—Å
        (r'(\d{1,2})[:\.](\d{2})\s*[-‚Äì‚Äî]\s*(\d{1,2})[:\.](\d{2})', 'range_dash'),
        # "–≤ 17:00 –Ω–∞ 2 —á–∞—Å–∞" - –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤ —á–∞—Å–∞—Ö
        (r'–≤\s+(\d{1,2})[:\.](\d{2})\s+–Ω–∞\s+(\d+)\s+(?:—á–∞—Å|—á–∞—Å–∞|—á–∞—Å–æ–≤)', 'duration_hours'),
        # "–≤ 17:00 –Ω–∞ 30 –º–∏–Ω—É—Ç" - –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤ –º–∏–Ω—É—Ç–∞—Ö
        (r'–≤\s+(\d{1,2})[:\.](\d{2})\s+–Ω–∞\s+(\d+)\s+–º–∏–Ω—É—Ç', 'duration_minutes'),
        # "–≤ 17:00 –Ω–∞ –ø–æ–ª—á–∞—Å–∞" - –Ω–∞ –ø–æ–ª—á–∞—Å–∞
        (r'–≤\s+(\d{1,2})[:\.](\d{2})\s+–Ω–∞\s+–ø–æ–ª—á–∞—Å–∞', 'duration_half_hour'),
    ]
    
    for pattern, pattern_type in time_range_patterns:
        match = re.search(pattern, text, re.IGNORECASE)
        if match:
            logger.info(f"üéØ –ù–∞–π–¥–µ–Ω –ø–∞—Ç—Ç–µ—Ä–Ω {pattern_type}: {match.group(0)}")
            
            try:
                result = process_time_range_match(match, pattern_type, text, user_timezone)
                if result:
                    return result
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ {pattern_type}: {e}")
                continue
    
    return None

def process_time_range_match(match, pattern_type, text, user_timezone):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –¥–∏–∞–ø–∞–∑–æ–Ω–æ–≤"""
    groups = match.groups()
    
    if pattern_type in ['range_from_to', 'range_at_to', 'range_dash']:
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∏–∞–ø–∞–∑–æ–Ω–æ–≤ –≤—Ä–µ–º–µ–Ω–∏
        start_hour, start_min, end_hour, end_min = map(int, groups)
        
        # –í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ä–µ–º–µ–Ω–∏
        if not (0 <= start_hour <= 23 and 0 <= start_min <= 59 and 
               0 <= end_hour <= 23 and 0 <= end_min <= 59):
            return None
            
    elif pattern_type == 'duration_hours':
        # "–≤ 17:00 –Ω–∞ 2 —á–∞—Å–∞"
        start_hour, start_min, duration_hours = int(groups[0]), int(groups[1]), int(groups[2])
        
        if not (0 <= start_hour <= 23 and 0 <= start_min <= 59):
            return None
            
        # –í—ã—á–∏—Å–ª—è–µ–º –≤—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è
        end_hour = start_hour + duration_hours
        end_min = start_min
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–µ—Ä–µ–Ω–æ—Å–∞ –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π –¥–µ–Ω—å
        if end_hour >= 24:
            end_hour = end_hour % 24
            
    elif pattern_type == 'duration_minutes':
        # "–≤ 17:00 –Ω–∞ 30 –º–∏–Ω—É—Ç"
        start_hour, start_min, duration_minutes = int(groups[0]), int(groups[1]), int(groups[2])
        
        if not (0 <= start_hour <= 23 and 0 <= start_min <= 59):
            return None
            
        # –í—ã—á–∏—Å–ª—è–µ–º –≤—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è
        total_minutes = start_min + duration_minutes
        end_hour = start_hour + (total_minutes // 60)
        end_min = total_minutes % 60
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–µ—Ä–µ–Ω–æ—Å–∞ –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π –¥–µ–Ω—å
        if end_hour >= 24:
            end_hour = end_hour % 24
            
    elif pattern_type == 'duration_half_hour':
        # "–≤ 17:00 –Ω–∞ –ø–æ–ª—á–∞—Å–∞"
        start_hour, start_min = int(groups[0]), int(groups[1])
        
        if not (0 <= start_hour <= 23 and 0 <= start_min <= 59):
            return None
            
        # –î–æ–±–∞–≤–ª—è–µ–º 30 –º–∏–Ω—É—Ç
        total_minutes = start_min + 30
        end_hour = start_hour + (total_minutes // 60)
        end_min = total_minutes % 60
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–µ—Ä–µ–Ω–æ—Å–∞ –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π –¥–µ–Ω—å
        if end_hour >= 24:
            end_hour = end_hour % 24
    
    # –ü–æ–ª—É—á–∞–µ–º –±–∞–∑–æ–≤—É—é –¥–∞—Ç—É
    base_datetime = enhanced_datetime_parser(text, user_timezone)
    if not base_datetime:
        import pytz
        tz = pytz.timezone(user_timezone)
        base_datetime = datetime.now(tz)
        
        # –ï—Å–ª–∏ –≤—Ä–µ–º—è —É–∂–µ –ø—Ä–æ—à–ª–æ —Å–µ–≥–æ–¥–Ω—è, –±–µ—Ä–µ–º –∑–∞–≤—Ç—Ä–∞
        current_time = base_datetime.time()
        event_time = datetime.min.time().replace(hour=start_hour, minute=start_min)
        if event_time <= current_time:
            base_datetime += timedelta(days=1)
    
    # –°–æ–∑–¥–∞–µ–º start –∏ end datetime
    start_datetime = base_datetime.replace(hour=start_hour, minute=start_min, second=0, microsecond=0)
    end_datetime = base_datetime.replace(hour=end_hour, minute=end_min, second=0, microsecond=0)
    
    # –ï—Å–ª–∏ end_time –º–µ–Ω—å—à–µ start_time, –∑–Ω–∞—á–∏—Ç —Å–æ–±—ã—Ç–∏–µ –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π –¥–µ–Ω—å
    if end_datetime <= start_datetime:
        end_datetime += timedelta(days=1)
    
    # –ò–°–ü–†–ê–í–õ–ï–ù–û: –ò–∑–≤–ª–µ–∫–∞–µ–º —á–∏—Å—Ç–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ë–ï–ó –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Å—Å—ã–ª–æ–∫ –∏ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–æ–≤
    clean_title = extract_title_without_time_references_ultra_fixed(text, match.group(0))
    
    logger.info(f"‚úÖ –î–∏–∞–ø–∞–∑–æ–Ω: {start_datetime.strftime('%H:%M')}-{end_datetime.strftime('%H:%M')}, –Ω–∞–∑–≤–∞–Ω–∏–µ: '{clean_title}'")
    
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–æ—Ä—Ç–µ–∂ –∏–∑ 4 —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –¥–ª—è –¥–∏–∞–ø–∞–∑–æ–Ω–æ–≤
    return (start_datetime, clean_title, 'event', end_datetime)

def extract_title_without_time_references_ultra_fixed(text, time_reference):
    """üî• –£–õ–¨–¢–†–ê-–ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø: –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è –ë–ï–ó –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Å—Å—ã–ª–æ–∫ –∏ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–æ–≤"""
    logger.info(f"üîß –£–ª—å—Ç—Ä–∞-–æ—á–∏—Å—Ç–∫–∞ –Ω–∞–∑–≤–∞–Ω–∏—è –æ—Ç –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Å—Å—ã–ª–æ–∫: '{text}'")
    
    # –£–±–∏—Ä–∞–µ–º –Ω–∞–π–¥–µ–Ω–Ω—É—é –≤—Ä–µ–º–µ–Ω–Ω—É—é —Å—Å—ã–ª–∫—É
    clean_text = text.replace(time_reference, '').strip()
    
    # –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ï –ø–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Å–ª–æ–≤
    temporal_patterns = [
        r'\b(?:—Å–µ–≥–æ–¥–Ω—è|–∑–∞–≤—Ç—Ä–∞|–ø–æ—Å–ª–µ–∑–∞–≤—Ç—Ä–∞)\b',
        r'\b(?:–≤\s+)?(?:–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫|–≤—Ç–æ—Ä–Ω–∏–∫|—Å—Ä–µ–¥—É|—á–µ—Ç–≤–µ—Ä–≥|–ø—è—Ç–Ω–∏—Ü—É|—Å—É–±–±–æ—Ç—É|–≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ)\b',
        r'\b(?:—É—Ç—Ä–æ–º|–¥–Ω–µ–º|–≤–µ—á–µ—Ä–æ–º|–Ω–æ—á—å—é)\b',
        r'\b—á–µ—Ä–µ–∑\s+(?:\d+\s+)?(?:—á–∞—Å|—á–∞—Å–∞|—á–∞—Å–æ–≤|–º–∏–Ω—É—Ç|–º–∏–Ω—É—Ç—ã|–º–∏–Ω—É—Ç—É)\b',
        r'\b(?:–Ω–∞\s+)?\d{1,2}\s+(?:—è–Ω–≤–∞—Ä—è|—Ñ–µ–≤—Ä–∞–ª—è|–º–∞—Ä—Ç–∞|–∞–ø—Ä–µ–ª—è|–º–∞—è|–∏—é–Ω—è|–∏—é–ª—è|–∞–≤–≥—É—Å—Ç–∞|—Å–µ–Ω—Ç—è–±—Ä—è|–æ–∫—Ç—è–±—Ä—è|–Ω–æ—è–±—Ä—è|–¥–µ–∫–∞–±—Ä—è)\b',
        r'\b(?:–Ω–∞\s+)?\d{1,2}[\./]\d{1,2}(?:[\./]\d{2,4})?\b',
        r'\b–≤\s+\d{1,2}[:\.]?\d{2}\b',
        r'\b–¥–æ\s+\d{1,2}[:\.]?\d{2}\b',
        r'\b–Ω–∞\s+\d{1,2}[:\.]?\d{2}\b',
        r'\b–Ω–∞\s+\d+\s+(?:—á–∞—Å|—á–∞—Å–∞|—á–∞—Å–æ–≤|–º–∏–Ω—É—Ç|–º–∏–Ω—É—Ç—ã|–º–∏–Ω—É—Ç—É)\b',
        r'\b–Ω–∞\s+–ø–æ–ª—á–∞—Å–∞\b',
        r'\s+—á–µ—Ä–µ–∑\s+\d+\s+(?:—á–∞—Å|—á–∞—Å–∞|—á–∞—Å–æ–≤)\b',
        # –ö–†–ò–¢–ò–ß–ù–û: –£–±–∏—Ä–∞–µ–º –æ—Å—Ç–∞—Ç–∫–∏ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Å–ª–æ–≤ –∏ —Ü–∏—Ñ—Ä
        r'\s+—Å\s+\d{1,2}.*$',
        r'\s+–∞\s*$',
        r'\s+–Ω–∞\s*$', 
        r'\s+–≤\s*$',
        r'\s+–¥–æ\s*$',
        r'\s+—Å\s*$',
        r'\s+\d{1,2}[:\.]?\d{2}.*$',
        # –ù–û–í–´–ï –ø–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–æ–≤
        r'\s*,\s*$',  # –∑–∞–ø—è—Ç–∞—è –≤ –∫–æ–Ω—Ü–µ
        r'^\s*,\s*',  # –∑–∞–ø—è—Ç–∞—è –≤ –Ω–∞—á–∞–ª–µ
        r'\s+–∏\s*$',  # "–∏" –≤ –∫–æ–Ω—Ü–µ
        r'^\s*–∏\s+', # "–∏" –≤ –Ω–∞—á–∞–ª–µ
    ]
    
    for pattern in temporal_patterns:
        clean_text = re.sub(pattern, '', clean_text, flags=re.IGNORECASE)
    
    # –£–±–∏—Ä–∞–µ–º —É–ø—Ä–∞–≤–ª—è—é—â–∏–µ —Ñ—Ä–∞–∑—ã
    control_patterns = [
        r'^(?:—É\s+–º–µ–Ω—è\s+|—Å–æ–∑–¥–∞–π\s+|–¥–æ–±–∞–≤—å\s+|–Ω–∞–ø–æ–º–Ω–∏\s+|–ø–æ—Å—Ç–∞–≤—å\s+)',
        r'^(?:–º–Ω–µ\s+–Ω—É–∂–Ω–æ\s+|–Ω—É–∂–Ω–æ\s+|–Ω–∞–¥–æ\s+)',
        r'^(?:–∑–∞–ø–ª–∞–Ω–∏—Ä—É–π\s+|–∑–∞—Ä–µ–≥–∞–π\s+)',
        r'^(?:–ø–µ—Ä–≤–∞—è\s*-?\s*|–≤—Ç–æ—Ä–∞—è\s*-?\s*|—Ç—Ä–µ—Ç—å—è\s*-?\s*)',  # —É–±–∏—Ä–∞–µ–º –ø–æ—Ä—è–¥–∫–æ–≤—ã–µ
    ]
    
    for pattern in control_patterns:
        clean_text = re.sub(pattern, '', clean_text, flags=re.IGNORECASE)
    
    # –û—á–∏—Å—Ç–∫–∞ –ø—É–Ω–∫—Ç—É–∞—Ü–∏–∏ –∏ –ø—Ä–æ–±–µ–ª–æ–≤
    clean_text = re.sub(r'\s+', ' ', clean_text).strip()
    clean_text = clean_text.strip(' \t\n\r\f\v-‚Äì‚Äî.,;:!?0123456789')
    
    # –§–∏–Ω–∞–ª—å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –æ—Ç –æ–¥–∏–Ω–æ—á–Ω—ã—Ö –±—É–∫–≤ –≤ –∫–æ–Ω—Ü–µ
    clean_text = re.sub(r'\s+[–∞-—è—ë]\s*$', '', clean_text, flags=re.IGNORECASE)
    clean_text = clean_text.strip()
    
    # –ï—Å–ª–∏ –æ—Å—Ç–∞–ª—Å—è —Ç–µ–∫—Å—Ç –¥–ª–∏–Ω–Ω–µ–µ 2 —Å–∏–º–≤–æ–ª–æ–≤, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ
    if len(clean_text) >= 3:
        result = capitalize_smart(clean_text)
        logger.info(f"‚úÖ –£–ª—å—Ç—Ä–∞-–æ—á–∏—â–µ–Ω–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ: '{result}'")
        return result
    
    # Fallback - –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–π –ø–æ–∏—Å–∫
    return extract_contextual_title(text)

def extract_single_event(text, user_timezone):
    """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –æ–¥–∏–Ω–æ—á–Ω–æ–≥–æ —Å–æ–±—ã—Ç–∏—è"""
    logger.info("üéØ –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –æ–¥–∏–Ω–æ—á–Ω–æ–≥–æ —Å–æ–±—ã—Ç–∏—è...")
    
    parsed_datetime = enhanced_datetime_parser(text, user_timezone)
    if not parsed_datetime:
        return None
    
    title = extract_clean_title_ultra_fixed(text)
    return (parsed_datetime, title, 'event')

def extract_clean_title_ultra_fixed(text):
    """üî• –£–õ–¨–¢–†–ê-–ò–°–ü–†–ê–í–õ–ï–ù–ù–û–ï –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ —á–∏—Å—Ç–æ–≥–æ –Ω–∞–∑–≤–∞–Ω–∏—è"""
    # –£–±–∏—Ä–∞–µ–º —É–ø—Ä–∞–≤–ª—è—é—â–∏–µ —Ñ—Ä–∞–∑—ã
    clean_text = remove_control_phrases(text)
    
    # –£–±–∏—Ä–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Å—Å—ã–ª–∫–∏  
    clean_text = remove_time_references_ultra_fixed(clean_text)
    
    # –£–±–∏—Ä–∞–µ–º —Å–æ—é–∑—ã –≤ –Ω–∞—á–∞–ª–µ
    clean_text = re.sub(r'^(?:–∏\s+|–∞\s+|—Ç–∞–∫–∂–µ\s+|–µ—â–µ\s+|–µ—â—ë\s+)', '', clean_text, flags=re.IGNORECASE)
    
    # –£–±–∏—Ä–∞–µ–º –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –ø—Ä–æ–±–µ–ª—ã
    clean_text = re.sub(r'\s+', ' ', clean_text)
    
    # –£–±–∏—Ä–∞–µ–º –æ–¥–∏–Ω–æ—á–Ω—ã–µ –±—É–∫–≤—ã –≤ –∫–æ–Ω—Ü–µ
    clean_text = re.sub(r'\s+[–∞-—è—ë]\s*$', '', clean_text, flags=re.IGNORECASE)
    
    # –£–±–∏—Ä–∞–µ–º –ø—É–Ω–∫—Ç—É–∞—Ü–∏—é –≤ –Ω–∞—á–∞–ª–µ –∏ –∫–æ–Ω—Ü–µ
    clean_text = clean_text.strip(' \t\n\r\f\v-‚Äì‚Äî.,;:!?')
    
    # –§–∏–Ω–∞–ª—å–Ω–∞—è –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è
    clean_text = clean_text.strip()
    
    if len(clean_text) >= 3:
        return capitalize_smart(clean_text)
    
    return extract_contextual_title(text)

def remove_control_phrases(text):
    """–£–¥–∞–ª–µ–Ω–∏–µ —É–ø—Ä–∞–≤–ª—è—é—â–∏—Ö —Ñ—Ä–∞–∑"""
    patterns = [
        r'^(?:—É\s+–º–µ–Ω—è\s+|—Å–æ–∑–¥–∞–π\s+|–¥–æ–±–∞–≤—å\s+|–Ω–∞–ø–æ–º–Ω–∏\s+|–∑–∞–ø–ª–∞–Ω–∏—Ä—É–π\s+)',
        r'^(?:–º–Ω–µ\s+–Ω—É–∂–Ω–æ\s+|–Ω—É–∂–Ω–æ\s+|–Ω–∞–¥–æ\s+)',
        r'^(?:—Å–æ–∑–¥–∞–π\s+–º–Ω–µ\s+|–¥–æ–±–∞–≤—å\s+–º–Ω–µ\s+)',
        r'^(?:–ø–µ—Ä–≤–∞—è\s*-?\s*|–≤—Ç–æ—Ä–∞—è\s*-?\s*|—Ç—Ä–µ—Ç—å—è\s*-?\s*)',  # –ø–æ—Ä—è–¥–∫–æ–≤—ã–µ
    ]
    
    for pattern in patterns:
        text = re.sub(pattern, '', text, flags=re.IGNORECASE)
    
    return text.strip()

def remove_time_references_ultra_fixed(text):
    """üî• –£–õ–¨–¢–†–ê-–ò–°–ü–†–ê–í–õ–ï–ù–ù–û–ï —É–¥–∞–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Å—Å—ã–ª–æ–∫"""
    patterns = [
        r'\b(?:—Å–µ–≥–æ–¥–Ω—è|–∑–∞–≤—Ç—Ä–∞|–ø–æ—Å–ª–µ–∑–∞–≤—Ç—Ä–∞)\b',
        r'\b(?:–≤|–¥–æ|–Ω–∞)\s+\d{1,2}[:\.]?\d{2}\b',
        r'\b—á–µ—Ä–µ–∑\s+(?:\d+\s+)?(?:—á–∞—Å|–º–∏–Ω—É—Ç)\b',
        r'\b–≤\s+(?:–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫|–≤—Ç–æ—Ä–Ω–∏–∫|—Å—Ä–µ–¥—É|—á–µ—Ç–≤–µ—Ä–≥|–ø—è—Ç–Ω–∏—Ü—É|—Å—É–±–±–æ—Ç—É|–≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ)\b',
        r'\b—Å\s+\d{1,2}[:\.]?\d{2}\s+–¥–æ\s+\d{1,2}[:\.]?\d{2}\b',
        r'\b\d{1,2}\s+(?:—è–Ω–≤–∞—Ä—è|—Ñ–µ–≤—Ä–∞–ª—è|–º–∞—Ä—Ç–∞|–∞–ø—Ä–µ–ª—è|–º–∞—è|–∏—é–Ω—è|–∏—é–ª—è|–∞–≤–≥—É—Å—Ç–∞|—Å–µ–Ω—Ç—è–±—Ä—è|–æ–∫—Ç—è–±—Ä—è|–Ω–æ—è–±—Ä—è|–¥–µ–∫–∞–±—Ä—è)\b',
        r'\b–Ω–∞\s+\d+\s+(?:—á–∞—Å|—á–∞—Å–∞|—á–∞—Å–æ–≤|–º–∏–Ω—É—Ç|–º–∏–Ω—É—Ç—ã|–º–∏–Ω—É—Ç—É)\b',
        r'\b–Ω–∞\s+–ø–æ–ª—á–∞—Å–∞\b',
        r'\s+—á–µ—Ä–µ–∑\s+\d+\s+(?:—á–∞—Å|—á–∞—Å–∞|—á–∞—Å–æ–≤)\b',
        r'\s+–∞\s*$',
        r'\s+–Ω–∞\s*$',
        r'\s+–≤\s*$',
        r'\s+–¥–æ\s*$',
        r'\s+—Å\s*$',
        # –ù–û–í–´–ï –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        r'\s*,\s*$',  # –∑–∞–ø—è—Ç–∞—è –≤ –∫–æ–Ω—Ü–µ
        r'^\s*,\s*',  # –∑–∞–ø—è—Ç–∞—è –≤ –Ω–∞—á–∞–ª–µ
        r'\s+–∏\s*$',  # "–∏" –≤ –∫–æ–Ω—Ü–µ
        r'^\s*–∏\s+', # "–∏" –≤ –Ω–∞—á–∞–ª–µ
        r'\s+–∫–∞–∂–¥–∞—è\s+–ø–æ\s+.*$',  # "–∫–∞–∂–¥–∞—è –ø–æ —á–∞—Å—É –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"
        r'^\s*–Ω–∞\s+\d{1,2}[:\.]?\d{2}\s+–∏\s+–Ω–∞\s+\d{1,2}[:\.]?\d{2}\s*', # "–Ω–∞ 10:00 –∏ –Ω–∞ 12:00"
    ]
    
    for pattern in patterns:
        text = re.sub(pattern, '', text, flags=re.IGNORECASE)
    
    # –£–±–∏—Ä–∞–µ–º –æ–¥–∏–Ω–æ—á–Ω—ã–µ –±—É–∫–≤—ã –≤ –∫–æ–Ω—Ü–µ
    text = re.sub(r'\s+[–∞-—è—ë]\s*$', '', text, flags=re.IGNORECASE)
    
    return text.strip()

def capitalize_smart(text):
    """–£–º–Ω–∞—è –∫–∞–ø–∏—Ç–∞–ª–∏–∑–∞—Ü–∏—è —Å –∏–º–µ–Ω–∞–º–∏"""
    if not text:
        return text
    
    proper_nouns = {
        '–ª–µ—Ä–∞': '–õ–µ—Ä–∞', '–ª–µ—Ä–æ–π': '–õ–µ—Ä–æ–π', '–ª–µ—Ä—É': '–õ–µ—Ä—É',
        '—Ç–∞–º–∞—Ä–∞': '–¢–∞–º–∞—Ä–∞', '—Ç–∞–º–∞—Ä–æ–π': '–¢–∞–º–∞—Ä–æ–π', '—Ç–∞–º–∞—Ä—É': '–¢–∞–º–∞—Ä—É',
        '–∞–º–∏—Ä': '–ê–º–∏—Ä', '–∞–º–∏—Ä–æ–º': '–ê–º–∏—Ä–æ–º', '–∞–º–∏—Ä–∞': '–ê–º–∏—Ä–∞',
        '–¥–∞–º–∏—Ä': '–î–∞–º–∏—Ä', '–¥–∞–º–∏—Ä–æ–º': '–î–∞–º–∏—Ä–æ–º', '–¥–∞–º–∏—Ä–∞': '–î–∞–º–∏—Ä–∞',
        '–∞–Ω–≥–µ–ª–∏–Ω–∞': '–ê–Ω–≥–µ–ª–∏–Ω–∞', '–∞–Ω–≥–µ–ª–∏–Ω–æ–π': '–ê–Ω–≥–µ–ª–∏–Ω–æ–π', '–∞–Ω–≥–µ–ª–∏–Ω—É': '–ê–Ω–≥–µ–ª–∏–Ω—É',
        '–∞–ª–∏—à–µ—Ä': '–ê–ª–∏—à–µ—Ä', '–∞–ª–∏—à–µ—Ä–æ–º': '–ê–ª–∏—à–µ—Ä–æ–º', '–∞–ª–∏—à–µ—Ä–∞': '–ê–ª–∏—à–µ—Ä–∞',
        '–º–∞–º–∞': '–º–∞–º–∞', '–ø–∞–ø–∞': '–ø–∞–ø–∞', '–±–∞–±—É—à–∫–∞': '–±–∞–±—É—à–∫–∞'
    }
    
    words = text.split()
    result_words = []
    
    for i, word in enumerate(words):
        word_lower = word.lower()
        
        if word_lower in proper_nouns:
            result_words.append(proper_nouns[word_lower])
        elif i == 0:
            result_words.append(word.capitalize())
        else:
            result_words.append(word)
    
    return ' '.join(result_words)

def extract_contextual_title(text):
    """–ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º"""
    patterns = [
        (r'–≤—Å—Ç—Ä–µ—á–∞\s+—Å\s+([\w\s]+)', '–≤—Å—Ç—Ä–µ—á–∞ —Å {}'),
        (r'—Å–æ–∑–≤–æ–Ω\s+—Å\s+([\w\s]+)', '—Å–æ–∑–≤–æ–Ω —Å {}'),
        (r'–æ–±–µ–¥\s+—Å\s+([\w\s]+)', '–æ–±–µ–¥ —Å {}'),
        (r'—É–∂–∏–Ω\s+—Å\s+([\w\s]+)', '—É–∂–∏–Ω —Å {}'),
        (r'–∫–æ—Ñ–µ\s+—Å\s+([\w\s]+)', '–∫–æ—Ñ–µ —Å {}'),
        (r'–ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—è\s+([\w\s]+)', '–ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—è {}'),
        (r'—Å–æ–≤–µ—â–∞–Ω–∏–µ\s+(?:—Å\s+|–ø–æ\s+)?([\w\s]+)', '—Å–æ–≤–µ—â–∞–Ω–∏–µ {}'),
        (r'\b(–≤—Å—Ç—Ä–µ—á–∞)\b', '–í—Å—Ç—Ä–µ—á–∞'),
        (r'\b(—Å–æ–∑–≤–æ–Ω)\b', '–°–æ–∑–≤–æ–Ω'), 
        (r'\b(–æ–±–µ–¥)\b', '–û–±–µ–¥'),
        (r'\b(—É–∂–∏–Ω)\b', '–£–∂–∏–Ω'),
        (r'\b(–ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—è)\b', '–ü—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—è'),
        (r'\b(—Å–æ–≤–µ—â–∞–Ω–∏–µ)\b', '–°–æ–≤–µ—â–∞–Ω–∏–µ'),
        (r'\b(—Ä–∞–±–æ—Ç–∞)\b', '–†–∞–±–æ—Ç–∞'),
    ]
    
    # –°–Ω–∞—á–∞–ª–∞ –æ—á–∏—â–∞–µ–º —Ç–µ–∫—Å—Ç –æ—Ç –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è –ø–æ–∏—Å–∫–∞
    clean_text = remove_time_references_ultra_fixed(text.lower())
    
    for pattern, template in patterns:
        match = re.search(pattern, clean_text)
        if match:
            if '{}' in template and len(match.groups()) >= 1:
                context = match.group(1).strip()
                # –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ —Å–∏–º–≤–æ–ª—ã –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
                context = re.sub(r'[^\w\s]', '', context).strip()
                if context and len(context) > 1:
                    result = template.format(context).strip()
                    return capitalize_smart(result)
            else:
                return capitalize_smart(template)
    
    return "–°–æ–±—ã—Ç–∏–µ"

def get_default_base_time(user_timezone):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –±–∞–∑–æ–≤–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é"""
    import pytz
    tz = pytz.timezone(user_timezone)
    now = datetime.now(tz)
    
    if 9 <= now.hour <= 18:
        tomorrow = now + timedelta(days=1)
        return tomorrow.replace(hour=10, minute=0, second=0, microsecond=0)
    else:
        return now.replace(hour=10, minute=0, second=0, microsecond=0)

# –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–ª–æ–∂–Ω—ã—Ö —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
def handle_structured_requests(text, user_timezone):
    """üéØ –°–ü–ï–¶–ò–ê–õ–¨–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø: –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ —Ç–∏–ø–∞ '—Å–æ–∑–¥–∞–π –º–Ω–µ –¥–≤–µ –≤—Å—Ç—Ä–µ—á–∏'"""
    logger.info(f"üîç –ê–Ω–∞–ª–∏–∑ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞: '{text}'")
    
    # –ü–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
    structured_patterns = [
        r'—Å–æ–∑–¥–∞–π\s+–º–Ω–µ\s+–¥–≤–µ\s+–≤—Å—Ç—Ä–µ—á–∏.*?–ø–µ—Ä–≤–∞—è\s*-?\s*([^,]+),?\s*–≤—Ç–æ—Ä–∞—è\s*-?\s*([^,]+)',
        r'–¥–æ–±–∞–≤—å\s+–¥–≤–µ\s+—Å–æ–±—ã—Ç–∏—è.*?–ø–µ—Ä–≤–æ–µ\s*-?\s*([^,]+),?\s*–≤—Ç–æ—Ä–æ–µ\s*-?\s*([^,]+)',
        r'–∑–∞–ø–ª–∞–Ω–∏—Ä—É–π.*?–ø–µ—Ä–≤–∞—è\s*-?\s*([^,]+),?\s*–≤—Ç–æ—Ä–∞—è\s*-?\s*([^,]+)',
    ]
    
    for pattern in structured_patterns:
        match = re.search(pattern, text, re.IGNORECASE | re.DOTALL)
        if match:
            logger.info(f"‚úÖ –ù–∞–π–¥–µ–Ω —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–∞—Ç—Ç–µ—Ä–Ω")
            
            first_event_text = match.group(1).strip()
            second_event_text = match.group(2).strip()
            
            logger.info(f"üìù –ü–µ—Ä–≤–æ–µ —Å–æ–±—ã—Ç–∏–µ: '{first_event_text}'")
            logger.info(f"üìù –í—Ç–æ—Ä–æ–µ —Å–æ–±—ã—Ç–∏–µ: '{second_event_text}'")
            
            events = []
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥–æ–µ —Å–æ–±—ã—Ç–∏–µ –æ—Ç–¥–µ–ª—å–Ω–æ
            for i, event_text in enumerate([first_event_text, second_event_text], 1):
                # –ö–æ–º–±–∏–Ω–∏—Ä—É–µ–º —Å –æ–±—â–∏–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º –∏–∑ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
                time_context = extract_time_context_from_main_text(text)
                combined_text = f"{event_text} {time_context}"
                
                logger.info(f"üìù –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ–±—ã—Ç–∏–µ {i} —Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º: '{combined_text}'")
                
                # –ü—Ä–æ–±—É–µ–º –∏–∑–≤–ª–µ—á—å —Å–æ–±—ã—Ç–∏–µ
                event = extract_single_event(combined_text, user_timezone)
                if event:
                    events.append(event)
                    logger.info(f"‚úÖ –°–æ–±—ã—Ç–∏–µ {i} —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–æ: '{event[1]}'")
                else:
                    logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Å–æ–±—ã—Ç–∏–µ {i}")
            
            if len(events) >= 2:
                logger.info(f"‚úÖ –°—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∑–∞–ø—Ä–æ—Å –æ–±—Ä–∞–±–æ—Ç–∞–Ω: {len(events)} —Å–æ–±—ã—Ç–∏–π")
                return events
    
    return None

def extract_time_context_from_main_text(text):
    """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –∏–∑ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞"""
    time_contexts = []
    
    # –ò—â–µ–º –æ–±—â–∏–µ –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —É–∫–∞–∑–∞–Ω–∏—è
    general_time_patterns = [
        r'–Ω–∞\s+–∑–∞–≤—Ç—Ä–∞',
        r'–Ω–∞\s+\d{1,2}\s+(?:–º–∞—è|–∏—é–Ω—è|–∏—é–ª—è|–∞–≤–≥—É—Å—Ç–∞|—Å–µ–Ω—Ç—è–±—Ä—è|–æ–∫—Ç—è–±—Ä—è|–Ω–æ—è–±—Ä—è|–¥–µ–∫–∞–±—Ä—è)',
        r'–≤\s+(?:–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫|–≤—Ç–æ—Ä–Ω–∏–∫|—Å—Ä–µ–¥—É|—á–µ—Ç–≤–µ—Ä–≥|–ø—è—Ç–Ω–∏—Ü—É|—Å—É–±–±–æ—Ç—É|–≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ)',
        r'–Ω–∞\s+\d{1,2}[:\.](\d{2})\s+–∏\s+–Ω–∞\s+\d{1,2}[:\.](\d{2})',
    ]
    
    for pattern in general_time_patterns:
        matches = re.findall(pattern, text, re.IGNORECASE)
        if matches:
            time_contexts.extend(matches)
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–µ –≤—Ä–µ–º—è
    times = re.findall(r'–Ω–∞\s+(\d{1,2}[:\.]?\d{2})', text, re.IGNORECASE)
    if len(times) >= 2:
        return f"–∑–∞–≤—Ç—Ä–∞ –≤ {times[0]} –∏ –≤ {times[1]}"
    elif len(times) == 1:
        return f"–∑–∞–≤—Ç—Ä–∞ –≤ {times[0]}"
    
    # Fallback
    if '–∑–∞–≤—Ç—Ä–∞' in text.lower():
        return '–∑–∞–≤—Ç—Ä–∞'
    
    return ''

if __name__ == "__main__":
    # –¢–µ—Å—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π
    test_cases = [
        "–≤—Å—Ç—Ä–µ—á–∞ —Å –∫–ª–∏–µ–Ω—Ç–æ–º —Å 10:00 –¥–æ 11:00, –æ–±–µ–¥ —Å –∫–æ–ª–ª–µ–≥–∞–º–∏ —Å 13:00 –¥–æ 14:00",
        "—Ä–∞–±–æ—Ç–∞ —Å 9:00 –¥–æ 17:00 –∏ –ø–æ—Ç–æ–º —É–∂–∏–Ω –≤ 19:00",
        "–∑–≤–æ–Ω–æ–∫ –º–∞–º–µ –≤ 10:00, –≤—Å—Ç—Ä–µ—á–∞ —Å –±–æ—Å—Å–æ–º –≤ 14:00",
        "—Å–æ–∑–¥–∞–π –º–Ω–µ –¥–≤–µ –≤—Å—Ç—Ä–µ—á–∏ –Ω–∞ –∑–∞–≤—Ç—Ä–∞, –Ω–∞ 10:00 –∏ –Ω–∞ 12:00 - –∫–∞–∂–¥–∞—è –ø–æ —á–∞—Å—É –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏. –ø–µ—Ä–≤–∞—è - –≤—Å—Ç—Ä–µ—á–∞ —Å –ª–µ—Ä–æ–π, –≤—Ç–æ—Ä–∞—è - –≤—Å—Ç—Ä–µ—á–∞ —Å —Ç–∞–º–∞—Ä–æ–π",
        "–ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—è –ø—Ä–æ–µ–∫—Ç–∞ –≤ 17:00 –Ω–∞ 2 —á–∞—Å–∞",
    ]
    
    print("üß™ –¢–ï–°–¢ –ò–°–ü–†–ê–í–õ–ï–ù–ù–û–ì–û –ü–ê–†–°–ï–†–ê:")
    print("=" * 60)
    
    for i, text in enumerate(test_cases, 1):
        print(f"\n{i}. –¢–µ—Å—Ç–∏—Ä—É–µ–º: '{text}'")
        
        # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã
        structured_events = handle_structured_requests(text, 'Asia/Almaty')
        if structured_events:
            events = structured_events
        else:
            events = extract_multiple_events(text, 'Asia/Almaty')
        
        if events:
            print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(events)} —Å–æ–±—ã—Ç–∏–π:")
            for j, event in enumerate(events, 1):
                if len(event) == 4:  # —Å–æ–±—ã—Ç–∏–µ —Å –¥–∏–∞–ø–∞–∑–æ–Ω–æ–º
                    start, name, event_type, end = event
                    print(f"   {j}. '{name}' ({start.strftime('%H:%M')}-{end.strftime('%H:%M')})")
                else:  # –æ–±—ã—á–Ω–æ–µ —Å–æ–±—ã—Ç–∏–µ
                    start, name, event_type = event
                    print(f"   {j}. '{name}' ({start.strftime('%H:%M')})")
        else:
            print("‚ùå –°–æ–±—ã—Ç–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
    
    print(f"\nüéØ –ö–õ–Æ–ß–ï–í–´–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø:")
    print("‚úÖ –ü–µ—Ä–µ—Ä–∞–±–æ—Ç–∞–Ω–∞ –ª–æ–≥–∏–∫–∞ extract_comma_separated_events_completely_fixed()")
    print("‚úÖ –°–Ω–∞—á–∞–ª–∞ —Ä–∞–∑–±–∏–≤–∫–∞ –ø–æ –∑–∞–ø—è—Ç—ã–º, –ø–æ—Ç–æ–º –ø–æ–∏—Å–∫ –¥–∏–∞–ø–∞–∑–æ–Ω–æ–≤ –≤ –∫–∞–∂–¥–æ–π —á–∞—Å—Ç–∏")
    print("‚úÖ –£–ª—É—á—à–µ–Ω–∞ –æ—á–∏—Å—Ç–∫–∞ –Ω–∞–∑–≤–∞–Ω–∏–π –æ—Ç –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–æ–≤")
    print("‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤")
    print("‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ—é–∑–æ–≤ '–∏ –ø–æ—Ç–æ–º', '–∞ –ø–æ—Ç–æ–º'")
    
    print(f"\nüìã –ò–ù–°–¢–†–£–ö–¶–ò–ò –ü–û –í–ù–ï–î–†–ï–ù–ò–Æ:")
    print("1. –ó–∞–º–µ–Ω–∏—Ç–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞ text_parser.py —ç—Ç–∏–º –∫–æ–¥–æ–º")
    print("2. –ó–∞–ø—É—Å—Ç–∏—Ç–µ —Ç–µ—Å—Ç: python3 time_range_test.py")
    print("3. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç: 4/4 –∫–∞—Ç–µ–≥–æ—Ä–∏–π –ø—Ä–æ–π–¥–µ–Ω–æ")
    print("4. –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –±–æ—Ç–∞: python3 main.py")