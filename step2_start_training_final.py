#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–§–ò–ù–ê–õ–¨–ù–´–ô –®–∞–≥ 2: –ó–∞–ø—É—Å–∫ —Ñ–∞–π–Ω-—Ç—é–Ω–∏–Ω–≥–∞ Vetra AI
–≠—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç –∑–∞–≥—Ä—É–∂–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –≤ OpenAI –∏ –∑–∞–ø—É—Å–∫–∞–µ—Ç –æ–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏
–û–±–Ω–æ–≤–ª–µ–Ω–æ –¥–ª—è –Ω–æ–≤–æ–π OpenAI API
"""

import json
import os
import time
from openai import OpenAI

def get_openai_client():
    """–°–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç OpenAI —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π API –∫–ª—é—á–∞"""
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º API –∫–ª—é—á –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
    api_key = os.getenv("OPENAI_API_KEY")
    
    if not api_key:
        print("‚ùå OPENAI_API_KEY –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è!")
        print("\nüîß –†–ï–®–ï–ù–ò–ï:")
        print("1. –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–π—Ç–µ –∫–ª—é—á: export OPENAI_API_KEY='your-key-here'")
        print("2. –ò–ª–∏ –¥–æ–±–∞–≤—å—Ç–µ –≤ .env —Ñ–∞–π–ª")
        print("3. –ò–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –∫–ª—é—á –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å")
        
        api_key = input("\nüîë –í–≤–µ–¥–∏—Ç–µ –≤–∞—à OpenAI API –∫–ª—é—á: ").strip()
        if not api_key:
            print("‚ùå API –∫–ª—é—á –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω!")
            return None
    
    try:
        client = OpenAI(api_key=api_key)
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
        models = client.models.list()
        print(f"‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ OpenAI —É—Å–ø–µ—à–Ω–æ! –î–æ—Å—Ç—É–ø–Ω–æ –º–æ–¥–µ–ª–µ–π: {len(list(models))}")
        
        return client
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ OpenAI: {e}")
        print("üîß –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å API –∫–ª—é—á–∞ –∏ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ")
        return None

def upload_training_file(client):
    """–ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∞–π–ª —Å –¥–∞–Ω–Ω—ã–º–∏ –≤ OpenAI"""
    
    training_file_path = "vetra_training_data.jsonl"
    
    if not os.path.exists(training_file_path):
        print(f"‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {training_file_path}")
        print("üîß –°–Ω–∞—á–∞–ª–∞ –∑–∞–ø—É—Å—Ç–∏—Ç–µ: python step1_prepare_data_final.py")
        return None
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞
    file_size = os.path.getsize(training_file_path)
    print(f"üìä –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: {file_size / 1024:.1f} KB")
    
    if file_size > 100 * 1024 * 1024:  # 100MB –ª–∏–º–∏—Ç
        print(f"‚ö†Ô∏è  –í–ù–ò–ú–ê–ù–ò–ï: –§–∞–π–ª –æ—á–µ–Ω—å –±–æ–ª—å—à–æ–π ({file_size / 1024 / 1024:.1f} MB)")
        print(f"üìù OpenAI –º–æ–∂–µ—Ç –æ–≥—Ä–∞–Ω–∏—á–∏—Ç—å —Ä–∞–∑–º–µ—Ä. –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è < 100MB")
    
    print(f"üì§ –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: {training_file_path}")
    
    try:
        with open(training_file_path, "rb") as f:
            training_file = client.files.create(
                file=f,
                purpose="fine-tune"
            )
        
        print(f"‚úÖ –§–∞–π–ª —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω –≤ OpenAI!")
        print(f"üìÑ ID —Ñ–∞–π–ª–∞: {training_file.id}")
        print(f"üìä –†–∞–∑–º–µ—Ä: {training_file.bytes} –±–∞–π—Ç")
        print(f"üìÖ –î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è: {training_file.created_at}")
        print(f"üéØ –ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ: {training_file.purpose}")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Ñ–∞–π–ª–∞ –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
        with open("training_file_id.txt", "w") as f:
            f.write(training_file.id)
        print(f"üíæ ID —Ñ–∞–π–ª–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ training_file_id.txt")
        
        return training_file.id
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞: {e}")
        print("üîß –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:")
        print("   ‚Ä¢ –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π API –∫–ª—é—á")
        print("   ‚Ä¢ –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ –∞–∫–∫–∞—É–Ω—Ç–µ OpenAI")
        print("   ‚Ä¢ –§–∞–π–ª –ø–æ–≤—Ä–µ–∂–¥–µ–Ω –∏–ª–∏ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞")
        print("   ‚Ä¢ –ü—Ä–æ–±–ª–µ–º—ã —Å –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–æ–º")
        return None

def start_fine_tuning(client, training_file_id):
    """–ó–∞–ø—É—Å–∫–∞–µ–º —Ñ–∞–π–Ω-—Ç—é–Ω–∏–Ω–≥"""
    
    print(f"\nüöÄ –ó–ê–ü–£–°–ö –§–ê–ô–ù-–¢–Æ–ù–ò–ù–ì–ê –ú–û–î–ï–õ–ò...")
    print("-" * 40)
    
    try:
        # –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á—É —Ñ–∞–π–Ω-—Ç—é–Ω–∏–Ω–≥–∞
        fine_tuning_job = client.fine_tuning.jobs.create(
            training_file=training_file_id,
            model="gpt-3.5-turbo-1106",  # –°—Ç–∞–±–∏–ª—å–Ω–∞—è –≤–µ—Ä—Å–∏—è –¥–ª—è —Ñ–∞–π–Ω-—Ç—é–Ω–∏–Ω–≥–∞
            hyperparameters={
                "n_epochs": 3,  # 3 —ç–ø–æ—Ö–∏ –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ –¥–ª—è –≤–∞—à–∏—Ö –¥–∞–Ω–Ω—ã—Ö
                "batch_size": 1,
                "learning_rate_multiplier": 2.0
            },
            suffix="vetra-ai-v1"  # –°—É—Ñ—Ñ–∏–∫—Å –¥–ª—è –∏–º–µ–Ω–∏ –º–æ–¥–µ–ª–∏
        )
        
        print(f"‚úÖ –§–∞–π–Ω-—Ç—é–Ω–∏–Ω–≥ —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω!")
        print(f"üÜî ID –∑–∞–¥–∞—á–∏: {fine_tuning_job.id}")
        print(f"üìä –°—Ç–∞—Ç—É—Å: {fine_tuning_job.status}")
        print(f"üéØ –ë–∞–∑–æ–≤–∞—è –º–æ–¥–µ–ª—å: {fine_tuning_job.model}")
        print(f"üìÖ –í—Ä–µ–º—è —Å–æ–∑–¥–∞–Ω–∏—è: {fine_tuning_job.created_at}")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –∑–∞–¥–∞—á–∏ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è
        with open("training_job_id.txt", "w") as f:
            f.write(fine_tuning_job.id)
        print(f"üíæ ID –∑–∞–¥–∞—á–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ training_job_id.txt")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–¥–∞—á–µ
        job_info = {
            "job_id": fine_tuning_job.id,
            "status": fine_tuning_job.status,
            "model": fine_tuning_job.model,
            "created_at": fine_tuning_job.created_at,
            "training_file": training_file_id,
            "hyperparameters": {
                "n_epochs": 3,
                "batch_size": 1,
                "learning_rate_multiplier": 2.0
            }
        }
        
        with open("training_job_info.json", "w", encoding="utf-8") as f:
            json.dump(job_info, f, indent=2, ensure_ascii=False, default=str)
        print(f"üìù –î–µ—Ç–∞–ª–∏ –∑–∞–¥–∞—á–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ training_job_info.json")
        
        return fine_tuning_job.id
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Ñ–∞–π–Ω-—Ç—é–Ω–∏–Ω–≥–∞: {e}")
        print("üîß –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:")
        print("   ‚Ä¢ –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ –∞–∫–∫–∞—É–Ω—Ç–µ ($)")
        print("   ‚Ä¢ –§–∞–π–ª —Å –¥–∞–Ω–Ω—ã–º–∏ —Å–æ–¥–µ—Ä–∂–∏—Ç –æ—à–∏–±–∫–∏")
        print("   ‚Ä¢ –ü—Ä–µ–≤—ã—à–µ–Ω—ã –ª–∏–º–∏—Ç—ã API")
        print("   ‚Ä¢ –ü—Ä–æ–±–ª–µ–º—ã —Å –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–æ–º")
        return None

def get_training_status(client, job_id):
    """–ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –æ–±—É—á–µ–Ω–∏—è"""
    
    try:
        job = client.fine_tuning.jobs.retrieve(job_id)
        
        print(f"\nüìä –°–¢–ê–¢–£–° –§–ê–ô–ù-–¢–Æ–ù–ò–ù–ì–ê:")
        print("-" * 30)
        print(f"üÜî ID –∑–∞–¥–∞—á–∏: {job.id}")
        print(f"üìà –°—Ç–∞—Ç—É—Å: {job.status}")
        print(f"üéØ –ë–∞–∑–æ–≤–∞—è –º–æ–¥–µ–ª—å: {job.model}")
        print(f"üìÖ –°–æ–∑–¥–∞–Ω–æ: {job.created_at}")
        
        if hasattr(job, 'estimated_finish') and job.estimated_finish:
            print(f"‚è∞ –û–∂–∏–¥–∞–µ–º–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ: {job.estimated_finish}")
        
        if job.fine_tuned_model:
            print(f"üéâ –ì–æ—Ç–æ–≤–∞—è –º–æ–¥–µ–ª—å: {job.fine_tuned_model}")
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–º—è –≥–æ—Ç–æ–≤–æ–π –º–æ–¥–µ–ª–∏
            with open("model_name.txt", "w") as f:
                f.write(job.fine_tuned_model)
            print(f"üíæ –ò–º—è –º–æ–¥–µ–ª–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ model_name.txt")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ–±—É—á–µ–Ω–∏—è –µ—Å–ª–∏ –µ—Å—Ç—å
        if hasattr(job, 'result_files') and job.result_files:
            print(f"üìä –§–∞–π–ª—ã —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: {len(job.result_files)}")
        
        if job.status == "succeeded":
            print(f"\nüéâ –§–ê–ô–ù-–¢–Æ–ù–ò–ù–ì –ó–ê–í–ï–†–®–ï–ù –£–°–ü–ï–®–ù–û!")
            print(f"‚úÖ –ú–æ–¥–µ–ª—å –≥–æ—Ç–æ–≤–∞ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é: {job.fine_tuned_model}")
            return "succeeded"
        elif job.status == "failed":
            print(f"\n‚ùå –§–ê–ô–ù-–¢–Æ–ù–ò–ù–ì –ü–†–û–í–ê–õ–ò–õ–°–Ø!")
            if hasattr(job, 'error') and job.error:
                print(f"üî• –ü—Ä–∏—á–∏–Ω–∞ –æ—à–∏–±–∫–∏: {job.error}")
            print(f"üîß –ü–æ–ø—Ä–æ–±—É–π—Ç–µ:")
            print(f"   ‚Ä¢ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –Ω–∞ –æ—à–∏–±–∫–∏")
            print(f"   ‚Ä¢ –£–±–µ–¥–∏—Ç—å—Å—è —á—Ç–æ –Ω–∞ –∞–∫–∫–∞—É–Ω—Ç–µ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤")
            print(f"   ‚Ä¢ –ó–∞–ø—É—Å—Ç–∏—Ç—å –æ–±—É—á–µ–Ω–∏–µ –∑–∞–Ω–æ–≤–æ")
            return "failed"
        elif job.status in ["validating_files", "queued", "running"]:
            print(f"\n‚è≥ –û–ë–£–ß–ï–ù–ò–ï –í –ü–†–û–¶–ï–°–°–ï...")
            if job.status == "validating_files":
                print(f"üîç –ü—Ä–æ–≤–µ—Ä—è—é—Ç—Å—è —Ñ–∞–π–ª—ã –¥–∞–Ω–Ω—ã—Ö")
            elif job.status == "queued":
                print(f"üìã –ó–∞–¥–∞—á–∞ –≤ –æ—á–µ—Ä–µ–¥–∏ –Ω–∞ –æ–±—É—á–µ–Ω–∏–µ")
            elif job.status == "running":
                print(f"üèÉ‚Äç‚ôÇÔ∏è –ú–æ–¥–µ–ª—å –æ–±—É—á–∞–µ—Ç—Å—è –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å!")
            
            print(f"üîÑ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å—Ç–∞—Ç—É—Å —á–µ—Ä–µ–∑ 5-10 –º–∏–Ω—É—Ç")
            return "in_progress"
        else:
            print(f"\n‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Å—Ç–∞—Ç—É—Å: {job.status}")
            return "unknown"
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞: {e}")
        return "error"

def list_fine_tuned_models(client):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ —Ñ–∞–π–Ω-—Ç—é–Ω –º–æ–¥–µ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    
    print(f"\nüìã –í–ê–®–ò –§–ê–ô–ù-–¢–Æ–ù–ò–ù–ì –ó–ê–î–ê–ß–ò:")
    print("-" * 40)
    
    try:
        jobs = client.fine_tuning.jobs.list(limit=10)
        
        if not jobs.data:
            print("üìù –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–¥–∞—á —Ñ–∞–π–Ω-—Ç—é–Ω–∏–Ω–≥–∞")
            return
        
        for i, job in enumerate(jobs.data, 1):
            status_emoji = {
                "succeeded": "‚úÖ",
                "failed": "‚ùå", 
                "running": "‚è≥",
                "queued": "üïí",
                "cancelled": "üö´",
                "validating_files": "üîç"
            }.get(job.status, "‚ùì")
            
            model_name = job.fine_tuned_model or "N/A"
            print(f"{i:2d}. {status_emoji} {job.id[:15]}... | {job.status} | {model_name}")
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞: {e}")

def estimate_cost():
    """–ü—Ä–∏–º–µ—Ä–Ω–∞—è –æ—Ü–µ–Ω–∫–∞ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ —Ñ–∞–π–Ω-—Ç—é–Ω–∏–Ω–≥–∞"""
    
    training_file = "vetra_training_data.jsonl"
    if not os.path.exists(training_file):
        return
    
    # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–∏–º–µ—Ä–æ–≤
    with open(training_file, 'r', encoding='utf-8') as f:
        examples = sum(1 for line in f if line.strip())
    
    # –ü—Ä–∏–±–ª–∏–∑–∏—Ç–µ–ª—å–Ω—ã–π —Ä–∞—Å—á–µ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏
    # GPT-3.5-turbo —Ñ–∞–π–Ω-—Ç—é–Ω–∏–Ω–≥: $0.008/1K tokens –¥–ª—è –æ–±—É—á–µ–Ω–∏—è
    avg_tokens_per_example = 100  # –ø—Ä–∏–º–µ—Ä–Ω–æ
    total_tokens = examples * avg_tokens_per_example * 3  # 3 —ç–ø–æ—Ö–∏
    estimated_cost = (total_tokens / 1000) * 0.008
    
    print(f"\nüí∞ –ü–†–ò–ú–ï–†–ù–ê–Ø –°–¢–û–ò–ú–û–°–¢–¨ –û–ë–£–ß–ï–ù–ò–Ø:")
    print(f"   ‚Ä¢ –ü—Ä–∏–º–µ—Ä–æ–≤: {examples}")
    print(f"   ‚Ä¢ –ü—Ä–∏–º–µ—Ä–Ω–æ —Ç–æ–∫–µ–Ω–æ–≤: {total_tokens:,}")
    print(f"   ‚Ä¢ –û—Ä–∏–µ–Ω—Ç–∏—Ä–æ–≤–æ—á–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: ${estimated_cost:.2f}")
    print(f"   ‚Ä¢ (–¢–æ—á–Ω—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å —Å–º–æ—Ç—Ä–∏—Ç–µ –Ω–∞ platform.openai.com)")

if __name__ == "__main__":
    print("üöÄ VETRA AI - –ó–ê–ü–£–°–ö –§–ê–ô–ù-–¢–Æ–ù–ò–ù–ì–ê")
    print("=" * 50)
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç OpenAI
    client = get_openai_client()
    if not client:
        exit(1)
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–º–µ—Ä–Ω—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å
    estimate_cost()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –∑–∞–ø—É—â–µ–Ω–Ω–∞—è –∑–∞–¥–∞—á–∞
    if os.path.exists("training_job_id.txt"):
        with open("training_job_id.txt", "r") as f:
            existing_job_id = f.read().strip()
        
        print(f"\nüìã –ù–∞–π–¥–µ–Ω–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∞—è –∑–∞–¥–∞—á–∞: {existing_job_id}")
        print(f"üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å...")
        
        status = get_training_status(client, existing_job_id)
        
        if status == "succeeded":
            print(f"\nüéâ –£ –í–ê–° –£–ñ–ï –ï–°–¢–¨ –ì–û–¢–û–í–ê–Ø –ú–û–î–ï–õ–¨!")