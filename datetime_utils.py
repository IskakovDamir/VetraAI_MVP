"""
–§–ò–ù–ê–õ–¨–ù–´–ô datetime_utils.py –¥–ª—è Vetra AI —Å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è–º–∏ –±–∞–≥–æ–≤
- –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∞ –ø—Ä–æ–±–ª–µ–º–∞ —Å –≤—Ä–µ–º–µ–Ω–µ–º (11:00 ‚Üí 12:00)
- –£–ª—É—á—à–µ–Ω–∞ —Ç–æ—á–Ω–æ—Å—Ç—å –ø–∞—Ä—Å–∏–Ω–≥–∞ –≤—Ä–µ–º–µ–Ω–∏
"""

import re
import pytz
from datetime import datetime, timedelta
import logging

logger = logging.getLogger(__name__)

# –ü–æ–ø—ã—Ç–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ dateparser —Å fallback
try:
    import dateparser
    DATEPARSER_AVAILABLE = True
except ImportError:
    DATEPARSER_AVAILABLE = False
    logger.warning("dateparser –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ regex –ø–∞—Ç—Ç–µ—Ä–Ω—ã")

# –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ï –ø–∞—Ç—Ç–µ—Ä–Ω—ã - –≤—Ä–µ–º—è –ø–∞—Ä—Å–∏—Ç—Å—è —Ç–æ—á–Ω–æ
ULTIMATE_TIME_PATTERNS = [
    # –í–´–°–®–ò–ô –ü–†–ò–û–†–ò–¢–ï–¢: –¢–æ—á–Ω–æ–µ –≤—Ä–µ–º—è + –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏
    (r'–≤\s+(\d{1,2})[:\.](\d{2})\s+–≤\s+(–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫|–≤—Ç–æ—Ä–Ω–∏–∫|—Å—Ä–µ–¥—É|—á–µ—Ç–≤–µ—Ä–≥|–ø—è—Ç–Ω–∏—Ü—É|—Å—É–±–±–æ—Ç—É|–≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ)', 'time_then_weekday'),
    
    # –ö–û–ù–ö–†–ï–¢–ù–´–ï –î–ê–¢–´
    (r'(?:–Ω–∞\s+)?(\d{1,2})\s+–º–∞—è(?:\s+(?:–≤|–¥–æ)\s+(\d{1,2})[:\.](\d{2}))?', 'specific_date_may'),
    (r'(?:–Ω–∞\s+)?(\d{1,2})[\./](\d{1,2})(?:[\./](\d{2,4}))?(?:\s+(?:–≤|–¥–æ)\s+(\d{1,2})[:\.](\d{2}))?', 'specific_date_numeric'),
    (r'(?:–Ω–∞\s+)?(\d{1,2})\s+(—è–Ω–≤–∞—Ä—è|—Ñ–µ–≤—Ä–∞–ª—è|–º–∞—Ä—Ç–∞|–∞–ø—Ä–µ–ª—è|–º–∞—è|–∏—é–Ω—è|–∏—é–ª—è|–∞–≤–≥—É—Å—Ç–∞|—Å–µ–Ω—Ç—è–±—Ä—è|–æ–∫—Ç—è–±—Ä—è|–Ω–æ—è–±—Ä—è|–¥–µ–∫–∞–±—Ä—è)(?:\s+(?:–≤|–¥–æ)\s+(\d{1,2})[:\.](\d{2}))?', 'specific_date_month'),
    (r'(\d{1,2})[\./](\d{1,2})[\./](\d{4})(?:\s+(?:–≤|–¥–æ)\s+(\d{1,2})[:\.](\d{2}))?', 'specific_date_with_year'),
    
    # –û–¢–ù–û–°–ò–¢–ï–õ–¨–ù–´–ï –î–ê–¢–´
    (r'–∑–∞–≤—Ç—Ä–∞\s+(?:–≤|–¥–æ)\s+(\d{1,2})[:\.](\d{2})', 'tomorrow_at_time'),
    (r'—Å–µ–≥–æ–¥–Ω—è\s+(?:–≤|–¥–æ)\s+(\d{1,2})[:\.](\d{2})', 'today_at_time'),
    (r'–ø–æ—Å–ª–µ–∑–∞–≤—Ç—Ä–∞\s+(?:–≤|–¥–æ)\s+(\d{1,2})[:\.](\d{2})', 'day_after_tomorrow'),
    
    # –í–†–ï–ú–ï–ù–ù–´–ï –ò–ù–¢–ï–†–í–ê–õ–´
    (r'—á–µ—Ä–µ–∑\s+(\d+)\s+—á–∞—Å(?:–∞|–æ–≤)?(?:\s+(?:–∏\s+)?(\d+)\s+–º–∏–Ω—É—Ç)?', 'hours_minutes_from_now'),
    (r'—á–µ—Ä–µ–∑\s+—á–∞—Å(?:\s+(?:–∏\s+)?(\d+)\s+–º–∏–Ω—É—Ç)?', 'one_hour_from_now'),
    (r'—á–µ—Ä–µ–∑\s+(\d+)\s+–º–∏–Ω—É—Ç', 'minutes_from_now'),
    (r'—á–µ—Ä–µ–∑\s+–ø–æ–ª—á–∞—Å–∞', 'half_hour_from_now'),
    
    # –î–ù–ò –ù–ï–î–ï–õ–ò - —É–ª—É—á—à–µ–Ω–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥ –≤—Ä–µ–º–µ–Ω–∏
    (r'–≤\s+(–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫|–≤—Ç–æ—Ä–Ω–∏–∫|—Å—Ä–µ–¥—É|—á–µ—Ç–≤–µ—Ä–≥|–ø—è—Ç–Ω–∏—Ü—É|—Å—É–±–±–æ—Ç—É|–≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ)(?:\s+(?:–≤|–¥–æ)\s+(\d{1,2})[:\.](\d{2}))?', 'weekday_at_time'),
    (r'–≤\s+—Å–ª–µ–¥—É—é—â–∏–π\s+(–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫|–≤—Ç–æ—Ä–Ω–∏–∫|—Å—Ä–µ–¥—É|—á–µ—Ç–≤–µ—Ä–≥|–ø—è—Ç–Ω–∏—Ü—É|—Å—É–±–±–æ—Ç—É|–≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ)(?:\s+(?:–≤|–¥–æ)\s+(\d{1,2})[:\.](\d{2}))?', 'next_weekday'),
    
    # –ü–†–û–°–¢–û–ï –í–†–ï–ú–Ø
    (r'(?:–≤|–¥–æ)\s+(\d{1,2})[:\.](\d{2})', 'at_time'),
]

WEEKDAYS_RU = {
    '–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫': 0, '–≤—Ç–æ—Ä–Ω–∏–∫': 1, '—Å—Ä–µ–¥—É': 2, '—á–µ—Ç–≤–µ—Ä–≥': 3,
    '–ø—è—Ç–Ω–∏—Ü—É': 4, '—Å—É–±–±–æ—Ç—É': 5, '–≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ': 6
}

MONTHS_RU = {
    '—è–Ω–≤–∞—Ä—è': 1, '—Ñ–µ–≤—Ä–∞–ª—è': 2, '–º–∞—Ä—Ç–∞': 3, '–∞–ø—Ä–µ–ª—è': 4, '–º–∞—è': 5,
    '–∏—é–Ω—è': 6, '–∏—é–ª—è': 7, '–∞–≤–≥—É—Å—Ç–∞': 8, '—Å–µ–Ω—Ç—è–±—Ä—è': 9,
    '–æ–∫—Ç—è–±—Ä—è': 10, '–Ω–æ—è–±—Ä—è': 11, '–¥–µ–∫–∞–±—Ä—è': 12
}

def enhanced_datetime_parser(text, user_timezone='Asia/Almaty'):
    """–ú–ê–ö–°–ò–ú–ê–õ–¨–ù–û –£–õ–£–ß–®–ï–ù–ù–´–ô –ø–∞—Ä—Å–µ—Ä –¥–∞—Ç—ã/–≤—Ä–µ–º–µ–Ω–∏"""
    logger.info(f"üîç –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑: '{text}'")
    
    # –ü–†–ò–û–†–ò–¢–ï–¢ 1: –£–ª—É—á—à–µ–Ω–Ω—ã–µ regex –ø–∞—Ç—Ç–µ—Ä–Ω—ã
    result = try_ultimate_regex_patterns(text, user_timezone)
    if result:
        logger.info(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ —á–µ—Ä–µ–∑ regex: {result}")
        return result
    
    # –ü–†–ò–û–†–ò–¢–ï–¢ 2: dateparser (–µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω)
    if DATEPARSER_AVAILABLE:
        result = try_enhanced_dateparser(text, user_timezone)
        if result:
            logger.info(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ —á–µ—Ä–µ–∑ dateparser: {result}")
            return result
    
    # –ü–†–ò–û–†–ò–¢–ï–¢ 3: –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ç–æ–ª—å–∫–æ –≤—Ä–µ–º–µ–Ω–∏
    result = try_ultimate_time_only(text, user_timezone)
    if result:
        logger.info(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ —Ç–æ–ª—å–∫–æ –≤—Ä–µ–º—è: {result}")
        return result
    
    logger.warning(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –¥–∞—Ç—É/–≤—Ä–µ–º—è –≤ '{text}'")
    return None

def try_ultimate_regex_patterns(text, user_timezone):
    """–ú–ê–ö–°–ò–ú–ê–õ–¨–ù–û –£–õ–£–ß–®–ï–ù–ù–´–ï regex –ø–∞—Ç—Ç–µ—Ä–Ω—ã"""
    text_lower = text.lower()
    tz = pytz.timezone(user_timezone)
    now = datetime.now(tz)
    
    # –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞
    text_lower = preprocess_text_for_parsing(text_lower)
    
    for pattern, pattern_type in ULTIMATE_TIME_PATTERNS:
        match = re.search(pattern, text_lower)
        if match:
            try:
                result = process_ultimate_pattern_match_fixed(match, pattern_type, now, text_lower)
                if result:
                    logger.info(f"‚úÖ regex ({pattern_type}): {result}")
                    return result
            except Exception as e:
                logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–∞—Ç—Ç–µ—Ä–Ω–∞ {pattern_type}: {e}")
                continue
    
    return None

def preprocess_text_for_parsing(text):
    """–£–º–Ω–∞—è –ø—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞"""
    # 14.30 ‚Üí 14:30
    text = re.sub(r'(\d{1,2})\.(\d{2})', r'\1:\2', text)
    # 14—á30 ‚Üí 14:30
    text = re.sub(r'(\d{1,2})\s*—á\s*(\d{2})', r'\1:\2', text)
    
    # –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –¥–Ω–µ–π –Ω–µ–¥–µ–ª–∏
    weekday_map = {
        '–ø–Ω': '–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫', '–≤—Ç': '–≤—Ç–æ—Ä–Ω–∏–∫', '—Å—Ä': '—Å—Ä–µ–¥—É', '—á—Ç': '—á–µ—Ç–≤–µ—Ä–≥',
        '–ø—Ç': '–ø—è—Ç–Ω–∏—Ü—É', '—Å–±': '—Å—É–±–±–æ—Ç—É', '–≤—Å': '–≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ'
    }
    
    for short, full in weekday_map.items():
        text = re.sub(rf'\b{short}\b', full, text)
    
    return text

def process_ultimate_pattern_match_fixed(match, pattern_type, now, original_text):
    """–ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –æ–±—Ä–∞–±–æ—Ç–∫–∞ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤ —Å —Ç–æ—á–Ω—ã–º –≤—Ä–µ–º–µ–Ω–µ–º"""
    groups = match.groups()
    
    # –ù–û–í–´–ô –ü–†–ò–û–†–ò–¢–ï–¢–ù–´–ô –ü–ê–¢–¢–ï–†–ù: "–≤ 11:00 –≤ —á–µ—Ç–≤–µ—Ä–≥"
    if pattern_type == 'time_then_weekday':
        hour, minute, weekday_name = int(groups[0]), int(groups[1]), groups[2]
        
        target_weekday = WEEKDAYS_RU.get(weekday_name)
        if target_weekday is None:
            return None
        
        current_weekday = now.weekday()
        days_ahead = target_weekday - current_weekday
        if days_ahead <= 0:
            days_ahead += 7
        
        result = now + timedelta(days=days_ahead)
        return result.replace(hour=hour, minute=minute, second=0, microsecond=0)
    
    elif pattern_type == 'specific_date_may':
        day = int(groups[0])
        hour = int(groups[1]) if groups[1] else 12
        minute = int(groups[2]) if groups[2] else 0
        
        try:
            target_date = now.replace(month=5, day=day, hour=hour, minute=minute, second=0, microsecond=0)
            
            if target_date.date() < now.date():
                target_date = target_date.replace(year=now.year + 1)
            elif target_date.date() == now.date() and target_date <= now:
                target_date = target_date.replace(year=now.year + 1)
            
            return target_date
        except ValueError:
            return None
    
    elif pattern_type == 'specific_date_numeric':
        day = int(groups[0])
        month = int(groups[1])
        year = int(groups[2]) if groups[2] else now.year
        hour = int(groups[3]) if groups[3] else 12
        minute = int(groups[4]) if groups[4] else 0
        
        # –î–≤—É—Ö–∑–Ω–∞—á–Ω—ã–π –≥–æ–¥
        if groups[2] and len(groups[2]) == 2:
            year = 2000 + int(groups[2])
        
        try:
            target_date = now.replace(year=year, month=month, day=day, hour=hour, minute=minute, second=0, microsecond=0)
            
            if not groups[2] and target_date.date() < now.date():
                target_date = target_date.replace(year=now.year + 1)
            elif not groups[2] and target_date.date() == now.date() and target_date <= now:
                target_date = target_date.replace(year=now.year + 1)
            
            return target_date
        except ValueError:
            return None
    
    elif pattern_type == 'specific_date_month':
        day = int(groups[0])
        month_name = groups[1]
        hour = int(groups[2]) if groups[2] else 12
        minute = int(groups[3]) if groups[3] else 0
        
        month = MONTHS_RU.get(month_name)
        if not month:
            return None
        
        try:
            target_date = now.replace(month=month, day=day, hour=hour, minute=minute, second=0, microsecond=0)
            
            if target_date.date() < now.date():
                target_date = target_date.replace(year=now.year + 1)
            elif target_date.date() == now.date() and target_date <= now:
                target_date = target_date.replace(year=now.year + 1)
            
            return target_date
        except ValueError:
            return None
    
    elif pattern_type == 'specific_date_with_year':
        day = int(groups[0])
        month = int(groups[1])
        year = int(groups[2])
        hour = int(groups[3]) if groups[3] else 12
        minute = int(groups[4]) if groups[4] else 0
        
        try:
            return now.replace(year=year, month=month, day=day, hour=hour, minute=minute, second=0, microsecond=0)
        except ValueError:
            return None
    
    elif pattern_type == 'tomorrow_at_time':
        hour, minute = int(groups[0]), int(groups[1])
        return (now + timedelta(days=1)).replace(hour=hour, minute=minute, second=0, microsecond=0)
    
    elif pattern_type == 'today_at_time':
        hour, minute = int(groups[0]), int(groups[1])
        result = now.replace(hour=hour, minute=minute, second=0, microsecond=0)
        if result <= now:
            result += timedelta(days=1)
        return result
    
    elif pattern_type == 'day_after_tomorrow':
        hour, minute = int(groups[0]), int(groups[1])
        return (now + timedelta(days=2)).replace(hour=hour, minute=minute, second=0, microsecond=0)
    
    elif pattern_type == 'hours_minutes_from_now':
        hours = int(groups[0])
        minutes = int(groups[1]) if groups[1] else 0
        return now + timedelta(hours=hours, minutes=minutes)
    
    elif pattern_type == 'one_hour_from_now':
        minutes = int(groups[0]) if groups[0] else 0
        return now + timedelta(hours=1, minutes=minutes)
    
    elif pattern_type == 'minutes_from_now':
        minutes = int(groups[0])
        return now + timedelta(minutes=minutes)
    
    elif pattern_type == 'half_hour_from_now':
        return now + timedelta(minutes=30)
    
    elif pattern_type in ['weekday_at_time', 'next_weekday']:
        weekday_name = groups[0]
        hour = int(groups[1]) if groups[1] else None
        minute = int(groups[2]) if groups[2] else None
        
        # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ï—Å–ª–∏ –≤—Ä–µ–º—è –Ω–µ –≤ –≥—Ä—É–ø–ø–∞—Ö, –∏—â–µ–º –µ–≥–æ –≤ —Ç–µ–∫—Å—Ç–µ
        if hour is None:
            time_match = re.search(r'(\d{1,2})[:\.](\d{2})', original_text)
            if time_match:
                hour = int(time_match.group(1))
                minute = int(time_match.group(2))
            else:
                hour = 12
                minute = 0
        
        target_weekday = WEEKDAYS_RU.get(weekday_name)
        if target_weekday is None:
            return None
        
        current_weekday = now.weekday()
        days_ahead = target_weekday - current_weekday
        
        if pattern_type == 'next_weekday':
            days_ahead += 7
        elif days_ahead <= 0:
            days_ahead += 7
        
        result = now + timedelta(days=days_ahead)
        return result.replace(hour=hour, minute=minute, second=0, microsecond=0)
    
    elif pattern_type == 'at_time':
        hour, minute = int(groups[0]), int(groups[1])
        result = now.replace(hour=hour, minute=minute, second=0, microsecond=0)
        
        # –ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
        if '–∑–∞–≤—Ç—Ä–∞' in original_text:
            result += timedelta(days=1)
        elif '–ø–æ—Å–ª–µ–∑–∞–≤—Ç—Ä–∞' in original_text:
            result += timedelta(days=2)
        elif result <= now:
            result += timedelta(days=1)
        
        return result
    
    return None

def try_enhanced_dateparser(text, user_timezone):
    """–£–õ–£–ß–®–ï–ù–ù–´–ô dateparser (–µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω)"""
    if not DATEPARSER_AVAILABLE:
        return None
    
    try:
        result = dateparser.parse(
            text,
            languages=['ru', 'en'],
            settings={
                'PREFER_DATES_FROM': 'future',
                'RETURN_AS_TIMEZONE_AWARE': True,
                'TO_TIMEZONE': user_timezone,
                'NORMALIZE': True,
                'RELATIVE_BASE': datetime.now(pytz.timezone(user_timezone)),
                'DATE_ORDER': 'DMY',
                'PREFER_DAY_OF_MONTH': 'first',
                'STRICT_PARSING': False,
                'PREFER_FUTURE': True,
            }
        )
        
        if result:
            now = datetime.now(pytz.timezone(user_timezone))
            
            if result.date() == now.date() and result <= now:
                result += timedelta(days=1)
            
            return result
            
    except Exception as e:
        logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ dateparser: {e}")
    
    return None

def try_ultimate_time_only(text, user_timezone):
    """–ú–ê–ö–°–ò–ú–ê–õ–¨–ù–û –£–ú–ù–û–ï –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏"""
    time_patterns = [
        r'(\d{1,2})[:\.](\d{2})',
        r'(\d{1,2})\s*—á\s*(\d{2})',
        r'(\d{1,2})\s*—á–∞—Å–æ–≤\s*(\d{2})',
    ]
    
    for pattern in time_patterns:
        match = re.search(pattern, text)
        if match:
            try:
                hour, minute = int(match.group(1)), int(match.group(2))
                
                if not (0 <= hour <= 23 and 0 <= minute <= 59):
                    continue
                
                tz = pytz.timezone(user_timezone)
                now = datetime.now(tz)
                
                result = now.replace(hour=hour, minute=minute, second=0, microsecond=0)
                
                # –ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω–∞—è –ª–æ–≥–∏–∫–∞
                text_lower = text.lower()
                if '–∑–∞–≤—Ç—Ä–∞' in text_lower:
                    result += timedelta(days=1)
                elif '–ø–æ—Å–ª–µ–∑–∞–≤—Ç—Ä–∞' in text_lower:
                    result += timedelta(days=2)
                elif result <= now:
                    result += timedelta(days=1)
                
                return result
                
            except ValueError:
                continue
    
    return None

def format_datetime_for_display(dt, timezone='Asia/Almaty'):
    """–£–õ–£–ß–®–ï–ù–ù–û–ï —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    if dt.tzinfo is None:
        dt = pytz.timezone(timezone).localize(dt)
    
    now = datetime.now(pytz.timezone(timezone))
    days_diff = (dt.date() - now.date()).days
    
    if days_diff == 0:
        return f"—Å–µ–≥–æ–¥–Ω—è –≤ {dt.strftime('%H:%M')}"
    elif days_diff == 1:
        return f"–∑–∞–≤—Ç—Ä–∞ –≤ {dt.strftime('%H:%M')}"
    elif days_diff == 2:
        return f"–ø–æ—Å–ª–µ–∑–∞–≤—Ç—Ä–∞ –≤ {dt.strftime('%H:%M')}"
    elif 0 < days_diff <= 7:
        weekdays = ['–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫', '–≤—Ç–æ—Ä–Ω–∏–∫', '—Å—Ä–µ–¥–∞', '—á–µ—Ç–≤–µ—Ä–≥', '–ø—è—Ç–Ω–∏—Ü–∞', '—Å—É–±–±–æ—Ç–∞', '–≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ']
        return f"–≤ {weekdays[dt.weekday()]} –≤ {dt.strftime('%H:%M')}"
    elif dt.year == now.year:
        return dt.strftime('%d.%m –≤ %H:%M')
    else:
        return dt.strftime('%d.%m.%Y –≤ %H:%M')

def validate_datetime(dt, user_timezone='Asia/Almaty'):
    """–£–õ–£–ß–®–ï–ù–ù–ê–Ø –≤–∞–ª–∏–¥–∞—Ü–∏—è"""
    if not dt:
        return None
    
    now = datetime.now(pytz.timezone(user_timezone))
    
    # –ö–æ—Ä—Ä–µ–∫—Ü–∏—è –≥–æ–¥–∞ –¥–ª—è –¥–∞—Ç –≤ –ø—Ä–æ—à–ª–æ–º
    if (now - dt).days > 30:
        dt = dt.replace(year=now.year + 1)
        logger.info(f"üîß –°–∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω –≥–æ–¥: {dt}")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å–ª–∏—à–∫–æ–º –¥–∞–ª–µ–∫–æ–µ –±—É–¥—É—â–µ–µ
    if (dt - now).days > 5 * 365:
        logger.warning(f"‚ö†Ô∏è –ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ –¥–∞–ª–µ–∫–∞—è –¥–∞—Ç–∞: {dt}")
        return None
    
    return dt

# –¢–µ—Å—Ç–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è
def test_ultimate_datetime_parser():
    """–¢–µ—Å—Ç –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ —É–ª—É—á—à–µ–Ω–Ω–æ–≥–æ –ø–∞—Ä—Å–µ—Ä–∞"""
    test_cases = [
        # –ë–∞–∑–æ–≤—ã–µ
        "–≤—Å—Ç—Ä–µ—á–∞ –∑–∞–≤—Ç—Ä–∞ –≤ 14:00",
        "—Å–æ–∑–≤–æ–Ω —á–µ—Ä–µ–∑ 2 —á–∞—Å–∞",
        "–ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—è –≤ –ø—è—Ç–Ω–∏—Ü—É –≤ 10:00",
        
        # –ö–†–ò–¢–ò–ß–ù–´–ï –¢–ï–°–¢–´ - –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–∞–≥–æ–≤
        "–≤—Å—Ç—Ä–µ—á–∞ —Å –¥–∞–º–∏—Ä–æ–º –≤ 11:00 –≤ —á–µ—Ç–≤–µ—Ä–≥",  # –î–û–õ–ñ–ù–û –ë–´–¢–¨ 11:00
        "–≤ —Å—Ä–µ–¥—É –≤ 12:00 –≤—Å—Ç—Ä–µ—á–∞ —Å –∞–Ω–≥–µ–ª–∏–Ω–æ–π",  # –î–û–õ–ñ–ù–û –ë–´–¢–¨ 12:00
        
        # –ö–û–ù–ö–†–ï–¢–ù–´–ï –î–ê–¢–´
        "–≤—Å—Ç—Ä–µ—á–∞ 26 –º–∞—è –≤ 14:00",
        "–ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—è –Ω–∞ 26 –º–∞—è",
        "—Å–æ–∑–≤–æ–Ω 15.06 –≤ 10:00",
        "–≤—Å—Ç—Ä–µ—á–∞ 15/06 –≤ 16:30",
        "–≤—Å—Ç—Ä–µ—á–∞ 3 –∏—é–Ω—è –≤ 15:30",
        "–¥–µ–¥–ª–∞–π–Ω 25.12.2024 –≤ 23:59",
        "–≤—Å—Ç—Ä–µ—á–∞ 1 —è–Ω–≤–∞—Ä—è –≤ 12:00",
        
        # –°–ª–æ–∂–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã
        "–ø–æ—Å–ª–µ–∑–∞–≤—Ç—Ä–∞ –≤ 16.30",
        "—á–µ—Ä–µ–∑ –ø–æ–ª—á–∞—Å–∞",
        "—á–µ—Ä–µ–∑ 2 —á–∞—Å–∞ 30 –º–∏–Ω—É—Ç",
        "–≤—Å—Ç—Ä–µ—á–∞ –≤ 14.30",
        "—Å–æ–∑–≤–æ–Ω –≤ 16—á30",
    ]
    
    print("üß™ –¢–µ—Å—Ç –ò–°–ü–†–ê–í–õ–ï–ù–ù–û–ì–û –ø–∞—Ä—Å–µ—Ä–∞ –¥–∞—Ç:")
    print("=" * 60)
    
    success_count = 0
    for i, text in enumerate(test_cases, 1):
        result = enhanced_datetime_parser(text)
        if result:
            display_time = format_datetime_for_display(result)
            formatted = result.strftime('%Y-%m-%d %H:%M')
            print(f"{i:2d}. ‚úÖ '{text}' ‚Üí {display_time} ({formatted})")
            success_count += 1
            
            # –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª—è –∫—Ä–∏—Ç–∏—á–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤
            if "–≤ 11:00 –≤ —á–µ—Ç–≤–µ—Ä–≥" in text and result.hour == 11:
                print(f"    üéØ –ò–°–ü–†–ê–í–õ–ï–ù –ë–ê–ì: –≤—Ä–µ–º—è 11:00 —Ä–∞—Å–ø–æ–∑–Ω–∞–µ—Ç—Å—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!")
            elif "–≤ 12:00 –≤—Å—Ç—Ä–µ—á–∞" in text and result.hour == 12:
                print(f"    üéØ –ò–°–ü–†–ê–í–õ–ï–ù –ë–ê–ì: –≤—Ä–µ–º—è 12:00 —Ä–∞—Å–ø–æ–∑–Ω–∞–µ—Ç—Å—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!")
        else:
            print(f"{i:2d}. ‚ùå '{text}' ‚Üí –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–æ")
    
    success_rate = (success_count / len(test_cases)) * 100
    print(f"\nüìä –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: {success_count}/{len(test_cases)} ({success_rate:.1f}%)")
    
    if success_rate >= 90:
        print("üéâ –ü–†–ï–í–û–°–•–û–î–ù–û! –ë–∞–≥–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω—ã!")
    elif success_rate >= 80:
        print("‚úÖ –û–¢–õ–ò–ß–ù–û! –°–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç —Å—Ç–∞–±–∏–ª—å–Ω–æ!")
    elif success_rate >= 70:
        print("‚ö†Ô∏è –•–û–†–û–®–û!")
    else:
        print("üö® –¢–†–ï–ë–£–ï–¢ –î–û–†–ê–ë–û–¢–ö–ò!")

if __name__ == "__main__":
    test_ultimate_datetime_parser()