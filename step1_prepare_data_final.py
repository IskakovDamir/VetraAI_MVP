#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–§–ò–ù–ê–õ–¨–ù–´–ô –®–∞–≥ 1: –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ñ–∞–π–Ω-—Ç—é–Ω–∏–Ω–≥–∞ Vetra AI
–≠—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç –æ–±—ä–µ–¥–∏–Ω—è–µ—Ç –≤—Å–µ JSONL —Ñ–∞–π–ª—ã –∏ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç –∏—Ö –≤ —Ñ–æ—Ä–º–∞—Ç OpenAI
–û–±–Ω–æ–≤–ª–µ–Ω–æ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –Ω–æ–≤–æ–π OpenAI API
"""

import json
import os
from openai import OpenAI

def prepare_training_data():
    """–û–±—ä–µ–¥–∏–Ω—è–µ–º –≤—Å–µ JSONL —Ñ–∞–π–ª—ã –∏ –≥–æ—Ç–æ–≤–∏–º –¥–ª—è —Ñ–∞–π–Ω-—Ç—é–Ω–∏–Ω–≥–∞"""
    
    print("üîÑ VETRA AI - –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ñ–∞–π–Ω-—Ç—é–Ω–∏–Ω–≥–∞...")
    print("=" * 60)
    
    # –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Ñ–∞–π–ª–æ–≤ —Å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ—á–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
    training_files = [
        "#1_calendar_training_data.txt",
        "#2_recurring_calendar_training_data.txt", 
        "#3_reminder_training_data.txt",
        "#4_multi_event_training_data.txt",
        "#5_edge_case_training_data.txt",
        "#6_people_places_training_data.txt",
        "#7_event_updates_training_data.txt",
        "#8_noisy_input_training_data.txt",
        "#9_student_freelancer_related_training_data.txt",
        "#10_duration_multiday_range_training_data.txt"
    ]
    
    all_data = []
    total_processed = 0
    
    # –°–∏—Å—Ç–µ–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –º–æ–¥–µ–ª–∏
    system_message = """–¢—ã Vetra AI - —É–º–Ω—ã–π –∫–∞–ª–µ–Ω–¥–∞—Ä–Ω—ã–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç. –ê–Ω–∞–ª–∏–∑–∏—Ä—É–π –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω—ã–π —è–∑—ã–∫ (—Ä—É—Å—Å–∫–∏–π/–∞–Ω–≥–ª–∏–π—Å–∫–∏–π) –∏ –≤–æ–∑–≤—Ä–∞—â–∞–π —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∫–∞–ª–µ–Ω–¥–∞—Ä—è –≤ JSON —Ñ–æ—Ä–º–∞—Ç–µ.

–î–ª—è –∫–∞–ª–µ–Ω–¥–∞—Ä–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π –≤–æ–∑–≤—Ä–∞—â–∞–π –æ–±—ä–µ–∫—Ç —Å –ø–æ–ª—è–º–∏:
- title: –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è
- date: –¥–∞—Ç–∞ (tomorrow, Friday, 15 –º–∞—è, etc.)
- time: –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ HH:MM
- type: "event" –∏–ª–∏ "reminder" 
- recurrence: –µ—Å–ª–∏ —Å–æ–±—ã—Ç–∏–µ –ø–æ–≤—Ç–æ—Ä—è—é—â–µ–µ—Å—è
- reminder: –≤—Ä–µ–º—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
- location: –º–µ—Å—Ç–æ (–µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω–æ)
- participants: —É—á–∞—Å—Ç–Ω–∏–∫–∏ (–µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω—ã)
- duration: –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å (–µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω–∞)

–î–ª—è –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π –≤–æ–∑–≤—Ä–∞—â–∞–π –º–∞—Å—Å–∏–≤ –æ–±—ä–µ–∫—Ç–æ–≤.
–î–ª—è –ù–ï-–∫–∞–ª–µ–Ω–¥–∞—Ä–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –≤–æ–∑–≤—Ä–∞—â–∞–π –ø—É—Å—Ç–æ–π –æ–±—ä–µ–∫—Ç {}."""

    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—ã–π —Ñ–∞–π–ª
    for file_path in training_files:
        if not os.path.exists(file_path):
            print(f"‚ö†Ô∏è  –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {file_path}")
            continue
            
        print(f"üìñ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ñ–∞–π–ª: {file_path}")
        
        try:
            with open(file_path, 'r', encoding='utf-8') as f:
                file_count = 0
                for line_num, line in enumerate(f, 1):
                    line = line.strip()
                    if not line:
                        continue
                        
                    try:
                        # –ü–∞—Ä—Å–∏–º –∏—Å—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
                        data = json.loads(line)
                        
                        if "input" not in data or "output" not in data:
                            print(f"‚ö†Ô∏è  –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å—Ç—Ä–æ–∫—É {line_num} –≤ {file_path}: –Ω–µ—Ç input/output")
                            continue
                        
                        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ —Ñ–æ—Ä–º–∞—Ç OpenAI –¥–ª—è fine-tuning
                        formatted_data = {
                            "messages": [
                                {"role": "system", "content": system_message},
                                {"role": "user", "content": data["input"]},
                                {"role": "assistant", "content": json.dumps(data["output"], ensure_ascii=False)}
                            ]
                        }
                        
                        all_data.append(formatted_data)
                        file_count += 1
                        total_processed += 1
                        
                    except json.JSONDecodeError as e:
                        print(f"‚ùå JSON –æ—à–∏–±–∫–∞ –≤ {file_path} —Å—Ç—Ä–æ–∫–∞ {line_num}: {e}")
                    except Exception as e:
                        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ {file_path} —Å—Ç—Ä–æ–∫–∞ {line_num}: {e}")
                
                print(f"‚úÖ –ò–∑ {file_path} –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {file_count} –ø—Ä–∏–º–µ—Ä–æ–≤")
                
        except FileNotFoundError:
            print(f"‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {file_path}")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ {file_path}: {e}")
    
    if not all_data:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –Ω–∏ –æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞!")
        print("\nüîß –í–û–ó–ú–û–ñ–ù–´–ï –ü–†–û–ë–õ–ï–ú–´:")
        print("1. –§–∞–π–ª—ã —Å –¥–∞–Ω–Ω—ã–º–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ —Ç–µ–∫—É—â–µ–π –ø–∞–ø–∫–µ")
        print("2. –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö –≤ —Ñ–∞–π–ª–∞—Ö")
        print("3. –ü—Ä–æ–±–ª–µ–º—ã —Å –∫–æ–¥–∏—Ä–æ–≤–∫–æ–π —Ñ–∞–π–ª–æ–≤")
        return None
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    output_file = 'vetra_training_data.jsonl'
    
    print(f"\nüíæ –°–æ—Ö—Ä–∞–Ω—è–µ–º {len(all_data)} –ø—Ä–∏–º–µ—Ä–æ–≤ –≤ {output_file}...")
    
    try:
        with open(output_file, 'w', encoding='utf-8') as f:
            for item in all_data:
                f.write(json.dumps(item, ensure_ascii=False) + '\n')
        
        print(f"‚úÖ –î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω—ã!")
        print(f"üìä –ò—Ç–æ–≥–æ –ø—Ä–∏–º–µ—Ä–æ–≤: {len(all_data)}")
        print(f"üìÅ –§–∞–π–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {output_file}")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ —Ç–∏–ø–∞–º –¥–∞–Ω–Ω—ã—Ö
        print(f"\nüìà –°–¢–ê–¢–ò–°–¢–ò–ö–ê:")
        print(f"   ‚Ä¢ –í—Å–µ–≥–æ –ø—Ä–∏–º–µ—Ä–æ–≤: {len(all_data)}")
        print(f"   ‚Ä¢ –§–∞–π–ª–æ–≤ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {len([f for f in training_files if os.path.exists(f)])}")
        print(f"   ‚Ä¢ –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: {os.path.getsize(output_file) / 1024:.1f} KB")
        
        return output_file
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏: {e}")
        return None

def validate_training_data(file_path):
    """–í–∞–ª–∏–¥–∏—Ä—É–µ–º –ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ"""
    
    print(f"\nüîç –í–ê–õ–ò–î–ê–¶–ò–Ø –î–ê–ù–ù–´–•: {file_path}")
    print("-" * 40)
    
    try:
        with open(file_path, 'r', encoding='utf-8') as f:
            line_count = 0
            valid_count = 0
            system_msgs = 0
            user_msgs = 0
            assistant_msgs = 0
            
            sample_examples = []
            
            for line_num, line in enumerate(f, 1):
                line = line.strip()
                if not line:
                    continue
                    
                line_count += 1
                
                try:
                    data = json.loads(line)
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É
                    if ("messages" in data and 
                        isinstance(data["messages"], list) and 
                        len(data["messages"]) == 3):
                        
                        messages = data["messages"]
                        
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–æ–ª–∏
                        if (messages[0]["role"] == "system" and
                            messages[1]["role"] == "user" and  
                            messages[2]["role"] == "assistant"):
                            
                            valid_count += 1
                            system_msgs += 1
                            user_msgs += 1
                            assistant_msgs += 1
                            
                            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–µ—Ä–≤—ã–µ 3 –ø—Ä–∏–º–µ—Ä–∞ –¥–ª—è –ø–æ–∫–∞–∑–∞
                            if len(sample_examples) < 3:
                                sample_examples.append({
                                    'user': messages[1]["content"][:100] + "..." if len(messages[1]["content"]) > 100 else messages[1]["content"],
                                    'assistant': messages[2]["content"][:150] + "..." if len(messages[2]["content"]) > 150 else messages[2]["content"]
                                })
                        else:
                            print(f"‚ö†Ô∏è  –ù–µ–≤–µ—Ä–Ω—ã–µ —Ä–æ–ª–∏ –≤ —Å—Ç—Ä–æ–∫–µ {line_num}")
                    else:
                        print(f"‚ö†Ô∏è  –ù–µ–≤–µ—Ä–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –≤ —Å—Ç—Ä–æ–∫–µ {line_num}")
                        
                except json.JSONDecodeError:
                    print(f"‚ùå JSON –æ—à–∏–±–∫–∞ –≤ —Å—Ç—Ä–æ–∫–µ {line_num}")
            
            print(f"üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –í–ê–õ–ò–î–ê–¶–ò–ò:")
            print(f"   ‚Ä¢ –í—Å–µ–≥–æ —Å—Ç—Ä–æ–∫: {line_count}")
            print(f"   ‚Ä¢ –í–∞–ª–∏–¥–Ω—ã—Ö –ø—Ä–∏–º–µ—Ä–æ–≤: {valid_count}")
            print(f"   ‚Ä¢ System —Å–æ–æ–±—â–µ–Ω–∏–π: {system_msgs}")
            print(f"   ‚Ä¢ User —Å–æ–æ–±—â–µ–Ω–∏–π: {user_msgs}")
            print(f"   ‚Ä¢ Assistant —Å–æ–æ–±—â–µ–Ω–∏–π: {assistant_msgs}")
            print(f"   ‚Ä¢ –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: {(valid_count/line_count)*100:.1f}%")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–º–µ—Ä—ã
            if sample_examples:
                print(f"\nüìù –ü–†–ò–ú–ï–†–´ –î–ê–ù–ù–´–•:")
                for i, example in enumerate(sample_examples, 1):
                    print(f"   {i}. User: '{example['user']}'")
                    print(f"      Assistant: '{example['assistant']}'")
                    print()
            
            if valid_count >= 100:  # –ú–∏–Ω–∏–º—É–º –¥–ª—è —Ñ–∞–π–Ω-—Ç—é–Ω–∏–Ω–≥–∞
                print("üéâ –î–ê–ù–ù–´–ï –ì–û–¢–û–í–´ –î–õ–Ø –§–ê–ô–ù-–¢–Æ–ù–ò–ù–ì–ê!")
                print(f"‚úÖ –î–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∏–º–µ—Ä–æ–≤ ({valid_count} >= 100)")
                return True
            else:
                print("‚ùå –ù–ï–î–û–°–¢–ê–¢–û–ß–ù–û –î–ê–ù–ù–´–• –î–õ–Ø –§–ê–ô–ù-–¢–Æ–ù–ò–ù–ì–ê!")
                print(f"üîß –ù—É–∂–Ω–æ –º–∏–Ω–∏–º—É–º 100 –ø—Ä–∏–º–µ—Ä–æ–≤, —É –≤–∞—Å: {valid_count}")
                return False
                
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏: {e}")
        return False

def show_file_info():
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö —Ñ–∞–π–ª–∞—Ö"""
    print(f"\nüìã –ù–ï–û–ë–•–û–î–ò–ú–´–ï –§–ê–ô–õ–´ –î–õ–Ø –û–ë–£–ß–ï–ù–ò–Ø:")
    print("-" * 50)
    
    required_files = [
        "#1_calendar_training_data.txt",
        "#2_recurring_calendar_training_data.txt", 
        "#3_reminder_training_data.txt",
        "#4_multi_event_training_data.txt",
        "#5_edge_case_training_data.txt",
        "#6_people_places_training_data.txt",
        "#7_event_updates_training_data.txt",
        "#8_noisy_input_training_data.txt",
        "#9_student_freelancer_related_training_data.txt",
        "#10_duration_multiday_range_training_data.txt"
    ]
    
    found_files = 0
    
    for i, file_name in enumerate(required_files, 1):
        if os.path.exists(file_name):
            print(f"‚úÖ {i:2d}. {file_name}")
            found_files += 1
        else:
            print(f"‚ùå {i:2d}. {file_name} - –ù–ï –ù–ê–ô–î–ï–ù")
    
    print(f"\nüìä –ù–∞–π–¥–µ–Ω–æ —Ñ–∞–π–ª–æ–≤: {found_files}/{len(required_files)}")
    
    if found_files == 0:
        print(f"\nüö® –ù–ò –û–î–ù–û–ì–û –§–ê–ô–õ–ê –ù–ï –ù–ê–ô–î–ï–ù–û!")
        print(f"üîß –†–ï–®–ï–ù–ò–ï:")
        print(f"   1. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Ñ–∞–π–ª—ã –Ω–∞—Ö–æ–¥—è—Ç—Å—è –≤ —Ç–æ–π –∂–µ –ø–∞–ø–∫–µ —á—Ç–æ –∏ —ç—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç")
        print(f"   2. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–π —Ñ–∞–π–ª–æ–≤")
        print(f"   3. –ï—Å–ª–∏ —Ñ–∞–π–ª—ã –Ω–µ –≥–æ—Ç–æ–≤—ã, —Å–æ–∑–¥–∞–π—Ç–µ –∏—Ö –∏–ª–∏ –ø–æ–ø—Ä–æ—Å–∏—Ç–µ –ø–æ–º–æ—â–∏")
    elif found_files < len(required_files):
        print(f"\n‚ö†Ô∏è  –ù–ï –í–°–ï –§–ê–ô–õ–´ –ù–ê–ô–î–ï–ù–´!")
        print(f"üîß –û–±—É—á–µ–Ω–∏–µ –≤–æ–∑–º–æ–∂–Ω–æ, –Ω–æ –∫–∞—á–µ—Å—Ç–≤–æ –º–æ–¥–µ–ª–∏ –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–∏–∂–µ")
    else:
        print(f"\nüéâ –í–°–ï –§–ê–ô–õ–´ –ù–ê–ô–î–ï–ù–´! –ì–û–¢–û–í–û –ö –û–ë–£–ß–ï–ù–ò–Æ!")

if __name__ == "__main__":
    print("üöÄ VETRA AI - –ü–û–î–ì–û–¢–û–í–ö–ê –î–ê–ù–ù–´–• –î–õ–Ø –§–ê–ô–ù-–¢–Æ–ù–ò–ù–ì–ê")
    print("=" * 60)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ñ–∞–π–ª–æ–≤
    show_file_info()
    
    # –°–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
    print(f"\n‚ùì –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –ø–æ–¥–≥–æ—Ç–æ–≤–∫—É –¥–∞–Ω–Ω—ã—Ö? (y/n): ", end="")
    try:
        choice = input().lower().strip()
        if choice not in ['y', 'yes', '–¥–∞', '']:
            print("‚ùå –û—Ç–º–µ–Ω–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
            exit(0)
    except KeyboardInterrupt:
        print("\n‚ùå –û—Ç–º–µ–Ω–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        exit(0)
    
    # –®–∞–≥ 1: –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ
    output_file = prepare_training_data()
    
    if output_file:
        # –®–∞–≥ 2: –í–∞–ª–∏–¥–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ
        if validate_training_data(output_file):
            print(f"\nüéâ –í–°–Å –ì–û–¢–û–í–û –î–õ–Ø –§–ê–ô–ù-–¢–Æ–ù–ò–ù–ì–ê!")
            print(f"üìÅ –§–∞–π–ª –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏: {output_file}")
            print(f"üéØ –°–ª–µ–¥—É—é—â–∏–π —à–∞–≥: python step2_start_training.py")
            print(f"=" * 60)
        else:
            print(f"\n‚ùå –ü–†–û–ë–õ–ï–ú–´ –° –î–ê–ù–ù–´–ú–ò")
            print(f"üîß –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –æ—à–∏–±–∫–∏ –≤—ã—à–µ –∏ –∏—Å–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª—ã")
    else:
        print(f"\n‚ùå –ù–ï –£–î–ê–õ–û–°–¨ –ü–û–î–ì–û–¢–û–í–ò–¢–¨ –î–ê–ù–ù–´–ï")
        print(f"üîß –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞–ª–∏—á–∏–µ —Ñ–∞–π–ª–æ–≤ –∏ –∏—Ö —Ñ–æ—Ä–º–∞—Ç")