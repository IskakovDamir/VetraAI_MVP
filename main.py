"""
üî• –ü–û–õ–ù–û–°–¢–¨–Æ –û–ë–ù–û–í–õ–ï–ù–ù–´–ô main.py –¥–ª—è Vetra AI
‚úÖ –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –°–ü–ï–¶–ò–ê–õ–¨–ù–û–ì–û –ø–∞—Ä—Å–µ—Ä–∞ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π
‚úÖ –†–µ—à–µ–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º—ã –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏—è —Å–æ–±—ã—Ç–∏–π –≤ –æ–¥–Ω–æ
‚úÖ –ü–æ–¥–¥–µ—Ä–∂–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ —Ç–∏–ø–∞ "3 –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è –ü—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—è –ø—Ä–æ–µ–∫—Ç–∞ ‚Äì 3 –∏—é–Ω—è –≤ 12:00"
‚úÖ –í—Å–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏ —É–ª—É—á—à–µ–Ω–∏—è –≤–∫–ª—é—á–µ–Ω—ã
"""

from datetime import datetime, timedelta
import pytz
import logging
import asyncio
import re
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, ContextTypes, filters, CallbackQueryHandler
from datetime_utils import validate_datetime, format_datetime_for_display
from simplified_auth import fixed_auth_manager, get_user_calendar_service
from config import TELEGRAM_TOKEN

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
DEFAULT_TIMEZONE = 'Asia/Almaty'

# –ë–ï–¢–ê-–ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ò
BETA_USERS = {
    785966064,  # @Iskakov_Damir
    # –î–æ–±–∞–≤—å—Ç–µ ID –¥—Ä—É–≥–∏—Ö —Ç–µ—Å—Ç–µ—Ä–æ–≤:
    # 123456789,  # @leryaq
    # 987654321,  # @onai1688  
    # 555666777,  # @Aman_Is
}

# –ê–¥–º–∏–Ω—ã
ADMIN_USERS = {
    785966064,  # @Iskakov_Damir (–∞–¥–º–∏–Ω)
}

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
pending_authorizations = {}

# üéØ –°–ü–ï–¶–ò–ê–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò –î–õ–Ø –ü–ê–†–°–ò–ù–ì–ê –ú–ù–û–ñ–ï–°–¢–í–ï–ù–ù–´–• –°–û–ë–´–¢–ò–ô
# (–ò–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω—ã –ø—Ä—è–º–æ –≤ main.py –¥–ª—è —É–ø—Ä–æ—â–µ–Ω–∏—è)

def parse_structured_events_integrated(text, user_timezone='Asia/Almaty'):
    """
    üî• –ò–ù–¢–ï–ì–†–ò–†–û–í–ê–ù–ù–ê–Ø —Ñ—É–Ω–∫—Ü–∏—è –ø–∞—Ä—Å–∏–Ω–≥–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π
    –°–ø–µ—Ü–∏–∞–ª—å–Ω–æ –¥–ª—è —Å–ª—É—á–∞–µ–≤ —Ç–∏–ø–∞: "3 –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è –ü—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—è –ø—Ä–æ–µ–∫—Ç–∞ ‚Äì 3 –∏—é–Ω—è –≤ 12:00"
    """
    logger.info(f"üéØ –ò–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π: '{text}'")
    
    # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º enhanced_datetime_parser
    from datetime_utils import enhanced_datetime_parser
    
    # –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã –∏ –ø–µ—Ä–µ–Ω–æ—Å—ã
    text = re.sub(r'\s+', ' ', text.strip())
    
    events = []
    
    # –ú–ï–¢–û–î 1: –ü–æ–∏—Å–∫ –ø–æ –ø–∞—Ç—Ç–µ—Ä–Ω—É "–Ω–∞–∑–≤–∞–Ω–∏–µ - –¥–∞—Ç–∞ –≤ –≤—Ä–µ–º—è"
    event_patterns = [
        r'([^‚Äì\-]+)\s*[‚Äì\-]\s*(\d{1,2}\s+(?:—è–Ω–≤–∞—Ä—è|—Ñ–µ–≤—Ä–∞–ª—è|–º–∞—Ä—Ç–∞|–∞–ø—Ä–µ–ª—è|–º–∞—è|–∏—é–Ω—è|–∏—é–ª—è|–∞–≤–≥—É—Å—Ç–∞|—Å–µ–Ω—Ç—è–±—Ä—è|–æ–∫—Ç—è–±—Ä—è|–Ω–æ—è–±—Ä—è|–¥–µ–∫–∞–±—Ä—è)\s+–≤\s+\d{1,2}:\d{2})',
        r'([^‚Äì\-]+)\s*[‚Äì\-]\s*(\d{1,2}\.\d{1,2}\s+–≤\s+\d{1,2}:\d{2})',
        r'([^‚Äì\-]+)\s*[‚Äì\-]\s*(\d{1,2}/\d{1,2}\s+–≤\s+\d{1,2}:\d{2})',
    ]
    
    for pattern in event_patterns:
        matches = re.findall(pattern, text, re.IGNORECASE)
        if matches:
            logger.info(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π –ø–æ –ø–∞—Ç—Ç–µ—Ä–Ω—É: {len(matches)}")
            
            for match in matches:
                title_part = match[0].strip()
                time_part = match[1].strip()
                
                # –û—á–∏—â–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –æ—Ç –º—É—Å–æ—Ä–∞
                clean_title = clean_event_title_integrated(title_part)
                if not clean_title or len(clean_title) < 3:
                    continue
                
                # –ü–∞—Ä—Å–∏–º –¥–∞—Ç—É/–≤—Ä–µ–º—è
                full_text = f"{clean_title} {time_part}"
                parsed_datetime = enhanced_datetime_parser(full_text, user_timezone)
                
                if parsed_datetime:
                    events.append((parsed_datetime, clean_title, 'event'))
                    logger.info(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ —Å–æ–±—ã—Ç–∏–µ: '{clean_title}' –≤ {parsed_datetime}")
    
    # –ú–ï–¢–û–î 2: –†–∞–∑–±–∏–≤–∫–∞ –ø–æ —Å—Ç—Ä–æ–∫–∞–º (–µ—Å–ª–∏ –µ—Å—Ç—å –ø–µ—Ä–µ–Ω–æ—Å—ã)
    if not events and ('\n' in text or '  ' in text):
        lines = re.split(r'\n|  +', text)
        for line in lines:
            line = line.strip()
            if len(line) < 5:  # –°–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∞—è —Å—Ç—Ä–æ–∫–∞
                continue
            
            # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ —Ç–∏–ø–∞ "3 –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è"
            if re.match(r'^\d+\s*–º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π?', line, re.IGNORECASE):
                continue
                
            # –ü—ã—Ç–∞–µ–º—Å—è —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å –∫–∞–∫ –æ—Ç–¥–µ–ª—å–Ω–æ–µ —Å–æ–±—ã—Ç–∏–µ
            parsed_datetime = enhanced_datetime_parser(line, user_timezone)
            if parsed_datetime:
                clean_title = extract_title_from_line_integrated(line)
                if clean_title:
                    events.append((parsed_datetime, clean_title, 'event'))
                    logger.info(f"‚úÖ –ò–∑ —Å—Ç—Ä–æ–∫–∏ –¥–æ–±–∞–≤–ª–µ–Ω–æ: '{clean_title}' –≤ {parsed_datetime}")
    
    # –ú–ï–¢–û–î 3: –ü–æ–∏—Å–∫ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –º–µ—Ç–æ–∫ –∏ —Ä–∞–∑–±–∏–≤–∫–∞ –ø–æ –Ω–∏–º
    if not events:
        # –ò—â–µ–º –≤—Å–µ –¥–∞—Ç—ã –≤ —Ç–µ–∫—Å—Ç–µ
        date_patterns = [
            r'\d{1,2}\s+(?:—è–Ω–≤–∞—Ä—è|—Ñ–µ–≤—Ä–∞–ª—è|–º–∞—Ä—Ç–∞|–∞–ø—Ä–µ–ª—è|–º–∞—è|–∏—é–Ω—è|–∏—é–ª—è|–∞–≤–≥—É—Å—Ç–∞|—Å–µ–Ω—Ç—è–±—Ä—è|–æ–∫—Ç—è–±—Ä—è|–Ω–æ—è–±—Ä—è|–¥–µ–∫–∞–±—Ä—è)\s+–≤\s+\d{1,2}:\d{2}',
            r'\d{1,2}\.\d{1,2}\s+–≤\s+\d{1,2}:\d{2}',
            r'\d{1,2}/\d{1,2}\s+–≤\s+\d{1,2}:\d{2}'
        ]
        
        all_dates = []
        for pattern in date_patterns:
            for match in re.finditer(pattern, text, re.IGNORECASE):
                all_dates.append((match.start(), match.end(), match.group()))
        
        if len(all_dates) >= 2:
            logger.info(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(all_dates)} –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –º–µ—Ç–æ–∫")
            
            # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –ø–æ–∑–∏—Ü–∏–∏ –≤ —Ç–µ–∫—Å—Ç–µ
            all_dates.sort(key=lambda x: x[0])
            
            for i, (start_pos, end_pos, date_text) in enumerate(all_dates):
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≥—Ä–∞–Ω–∏—Ü—ã —Å–æ–±—ã—Ç–∏—è
                prev_end = all_dates[i-1][1] if i > 0 else 0
                
                # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–∫—Å—Ç —Å–æ–±—ã—Ç–∏—è (–æ—Ç –ø—Ä–µ–¥—ã–¥—É—â–µ–π –¥–∞—Ç—ã –¥–æ —Ç–µ–∫—É—â–µ–π)
                event_start = prev_end
                event_end = end_pos
                event_text = text[event_start:event_end].strip()
                
                # –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–π —Ç–µ–∫—Å—Ç –≤ –Ω–∞—á–∞–ª–µ
                if i == 0:
                    # –î–ª—è –ø–µ—Ä–≤–æ–≥–æ —Å–æ–±—ã—Ç–∏—è —É–±–∏—Ä–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏
                    event_text = re.sub(r'^.*?(?=\w+\s*[‚Äì\-])', '', event_text)
                
                parsed_datetime = enhanced_datetime_parser(event_text, user_timezone)
                if parsed_datetime:
                    clean_title = extract_title_from_text_chunk_integrated(event_text)
                    if clean_title:
                        events.append((parsed_datetime, clean_title, 'event'))
                        logger.info(f"‚úÖ –ü–æ –≤—Ä–µ–º–µ–Ω–Ω–æ–π –º–µ—Ç–∫–µ: '{clean_title}' –≤ {parsed_datetime}")
    
    logger.info(f"üìä –ò—Ç–æ–≥–æ –Ω–∞–π–¥–µ–Ω–æ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π: {len(events)}")
    return events if events else None

def clean_event_title_integrated(title):
    """–û—á–∏—Å—Ç–∫–∞ –Ω–∞–∑–≤–∞–Ω–∏—è —Å–æ–±—ã—Ç–∏—è –æ—Ç –º—É—Å–æ—Ä–∞"""
    # –£–±–∏—Ä–∞–µ–º –Ω–æ–º–µ—Ä–∞ –∏ —Å—á–µ—Ç—á–∏–∫–∏ –≤ –Ω–∞—á–∞–ª–µ
    title = re.sub(r'^\d+\s*–º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π?\s*', '', title, flags=re.IGNORECASE)
    title = re.sub(r'^\d+\s*—Å–æ–±—ã—Ç–∏–π?\s*', '', title, flags=re.IGNORECASE)
    title = re.sub(r'^\d+\s*–≤—Å—Ç—Ä–µ—á?\s*', '', title, flags=re.IGNORECASE)
    
    # –£–±–∏—Ä–∞–µ–º —É–ø—Ä–∞–≤–ª—è—é—â–∏–µ —Å–ª–æ–≤–∞
    title = re.sub(r'^(?:–∑–∞–ø–ª–∞–Ω–∏—Ä—É–π|—Å–æ–∑–¥–∞–π|–¥–æ–±–∞–≤—å)\s+(?:–º–Ω–µ\s+)?', '', title, flags=re.IGNORECASE)
    
    # –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ —Å–∏–º–≤–æ–ª—ã
    title = re.sub(r'^[‚Äì\-\s]+|[‚Äì\-\s]+$', '', title)
    title = title.strip()
    
    return title if len(title) >= 3 else None

def extract_title_from_line_integrated(line):
    """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è –∏–∑ —Å—Ç—Ä–æ–∫–∏"""
    # –£–±–∏—Ä–∞–µ–º –¥–∞—Ç—É/–≤—Ä–µ–º—è
    line = re.sub(r'\d{1,2}\s+(?:—è–Ω–≤–∞—Ä—è|—Ñ–µ–≤—Ä–∞–ª—è|–º–∞—Ä—Ç–∞|–∞–ø—Ä–µ–ª—è|–º–∞—è|–∏—é–Ω—è|–∏—é–ª—è|–∞–≤–≥—É—Å—Ç–∞|—Å–µ–Ω—Ç—è–±—Ä—è|–æ–∫—Ç—è–±—Ä—è|–Ω–æ—è–±—Ä—è|–¥–µ–∫–∞–±—Ä—è)\s+–≤\s+\d{1,2}:\d{2}', '', line, flags=re.IGNORECASE)
    line = re.sub(r'\d{1,2}\.\d{1,2}\s+–≤\s+\d{1,2}:\d{2}', '', line)
    line = re.sub(r'–≤\s+\d{1,2}:\d{2}', '', line)
    
    # –£–±–∏—Ä–∞–µ–º —Ç–∏—Ä–µ –∏ –ª–∏—à–Ω–∏–µ —Å–∏–º–≤–æ–ª—ã
    line = re.sub(r'^[‚Äì\-\s]+|[‚Äì\-\s]+$', '', line)
    line = line.strip()
    
    return clean_event_title_integrated(line)

def extract_title_from_text_chunk_integrated(text):
    """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è –∏–∑ –∫—É—Å–∫–∞ —Ç–µ–∫—Å—Ç–∞"""
    # –£–±–∏—Ä–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —á–∞—Å—Ç–∏
    text = re.sub(r'\d{1,2}\s+(?:—è–Ω–≤–∞—Ä—è|—Ñ–µ–≤—Ä–∞–ª—è|–º–∞—Ä—Ç–∞|–∞–ø—Ä–µ–ª—è|–º–∞—è|–∏—é–Ω—è|–∏—é–ª—è|–∞–≤–≥—É—Å—Ç–∞|—Å–µ–Ω—Ç—è–±—Ä—è|–æ–∫—Ç—è–±—Ä—è|–Ω–æ—è–±—Ä—è|–¥–µ–∫–∞–±—Ä—è)\s+–≤\s+\d{1,2}:\d{2}', '', text, flags=re.IGNORECASE)
    
    # –ò—â–µ–º —Å–æ–±—ã—Ç–∏–π–Ω—ã–µ —Å–ª–æ–≤–∞
    event_words = ['–ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—è', '–≤—Å—Ç—Ä–µ—á–∞', '–æ–±–µ–¥', '–∑–≤–æ–Ω–æ–∫', '—Å–æ–∑–≤–æ–Ω', '—Å–æ–≤–µ—â–∞–Ω–∏–µ', '–º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ']
    
    for word in event_words:
        if word in text.lower():
            # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ñ—Ä–∞–∑—É —Å —ç—Ç–∏–º —Å–ª–æ–≤–æ–º
            pattern = rf'([^‚Äì\-]*{word}[^‚Äì\-]*)'
            match = re.search(pattern, text, re.IGNORECASE)
            if match:
                return clean_event_title_integrated(match.group(1))
    
    # Fallback - –ø–µ—Ä–≤—ã–µ —Å–ª–æ–≤–∞
    words = text.split()[:3]
    return clean_event_title_integrated(' '.join(words)) if words else None

def enhanced_extract_multiple_events_integrated(text, user_timezone='Asia/Almaty'):
    """
    üî• –ò–ù–¢–ï–ì–†–ò–†–û–í–ê–ù–ù–ê–Ø —É–ª—É—á—à–µ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Å–æ–±—ã—Ç–∏–π
    –°–Ω–∞—á–∞–ª–∞ –ø—ã—Ç–∞–µ—Ç—Å—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥, –ø–æ—Ç–æ–º –æ–±—ã—á–Ω—ã–π
    """
    logger.info(f"üîç –ò–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —É–ª—É—á—à–µ–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Ç–µ–∫—Å—Ç–∞: '{text}'")
    
    # –ü–†–ò–û–†–ò–¢–ï–¢ 1: –°—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è
    structured_events = parse_structured_events_integrated(text, user_timezone)
    if structured_events and len(structured_events) >= 2:
        logger.info(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(structured_events)} —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π")
        return structured_events
    
    # –ü–†–ò–û–†–ò–¢–ï–¢ 2: –û–±—ã—á–Ω–∞—è –ª–æ–≥–∏–∫–∞ (–∏–∑ text_parser.py)
    try:
        from text_parser import extract_multiple_events
        regular_events = extract_multiple_events(text, user_timezone)
        if regular_events:
            logger.info(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(regular_events)} –æ–±—ã—á–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π")
            return regular_events
    except Exception as e:
        logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±—ã—á–Ω–æ–≥–æ –ø–∞—Ä—Å–µ—Ä–∞: {e}")
    
    # –ü–†–ò–û–†–ò–¢–ï–¢ 3: –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞—à–ª–∏, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ (–¥–∞–∂–µ –µ—Å–ª–∏ 1)
    if structured_events:
        logger.info(f"‚úÖ –í–æ–∑–≤—Ä–∞—â–∞–µ–º {len(structured_events)} –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π")
        return structured_events
    
    logger.warning("‚ùå –°–æ–±—ã—Ç–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
    return []

async def check_user_access(update: Update) -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –¥–æ—Å—Ç—É–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫ –±–æ—Ç—É"""
    user_id = update.effective_user.id
    
    if user_id in ADMIN_USERS or user_id in BETA_USERS:
        return True
    
    await update.message.reply_text(
        "üîí **–î–æ—Å—Ç—É–ø –æ–≥—Ä–∞–Ω–∏—á–µ–Ω**\n\n"
        "–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–æ Vetra AI –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –∑–∞–∫—Ä—ã—Ç–æ–º –±–µ—Ç–∞-—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏.\n"
        "–ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫—É.\n\n"
        "üîó **–ö–æ–Ω—Ç–∞–∫—Ç:** @Iskakov_Damir",
        parse_mode='Markdown'
    )
    return False

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """üî• –û–ë–ù–û–í–õ–ï–ù–ù–ê–Ø –∫–æ–º–∞–Ω–¥–∞ /start —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –°–ü–ï–¶–ò–ê–õ–¨–ù–û–ú –ø–∞—Ä—Å–µ—Ä–µ"""
    user = update.effective_user
    user_id = user.id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø –∫ –±–æ—Ç—É
    if not await check_user_access(update):
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é Google Calendar
    if not fixed_auth_manager.is_user_authorized(user_id):
        await send_authorization_request(update, context)
        return
    
    # –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_info = fixed_auth_manager.get_user_info(user_id)
    calendar_info = ""
    if user_info and user_info.get('primary_calendar'):
        cal = user_info['primary_calendar']
        calendar_info = f"\nüìÖ **–ü–æ–¥–∫–ª—é—á–µ–Ω –∫–∞–ª–µ–Ω–¥–∞—Ä—å:** {cal['summary']}"
    
    welcome_text = f"""
üëã –ü—Ä–∏–≤–µ—Ç, **{user.first_name}**! –Ø ‚Äî **Vetra AI**.

‚úÖ **–í—ã –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã –∏ –≥–æ—Ç–æ–≤—ã –∫ —Ä–∞–±–æ—Ç–µ!**{calendar_info}

üéØ **–°–ü–ï–¶–ò–ê–õ–¨–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø: –ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è**
–¢–µ–ø–µ—Ä—å –±–æ—Ç —É–º–µ–µ—Ç —Å–æ–∑–¥–∞–≤–∞—Ç—å **–Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–æ–±—ã—Ç–∏–π** –∏–∑ –æ–¥–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è!

üìù **–ù–û–í–´–ï –§–û–†–ú–ê–¢–´ –ú–ù–û–ñ–ï–°–¢–í–ï–ù–ù–´–• –°–û–ë–´–¢–ò–ô:**

üéØ **–°—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –≤–≤–æ–¥ (–ö–ê–ö –í –í–ê–®–ò–• –°–ö–†–ò–ù–®–û–¢–ê–•):**
‚Ä¢ "–∑–∞–ø–ª–∞–Ω–∏—Ä—É–π –º–Ω–µ –¥–≤–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è –ü—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—è –ø—Ä–æ–µ–∫—Ç–∞ ‚Äì 3 –∏—é–Ω—è –≤ 12:00 –í—Å—Ç—Ä–µ—á–∞ —Å –∫–æ–º–∞–Ω–¥–æ–π ‚Äì 5 –∏—é–Ω—è –≤ 9:00"
‚Ä¢ "3 –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è –ü—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—è –ø—Ä–æ–µ–∫—Ç–∞ ‚Äì 3 –∏—é–Ω—è –≤ 12:00 –û–±–µ–¥ —Å –∫–ª–∏–µ–Ω—Ç–∞–º–∏ ‚Äì 31 –º–∞—è –≤ 14:30 –í—Å—Ç—Ä–µ—á–∞ —Å –∫–æ–º–∞–Ω–¥–æ–π ‚Äì 5 –∏—é–Ω—è –≤ 9:00"
‚Ä¢ "—Å–æ–∑–¥–∞–π –≤—Å—Ç—Ä–µ—á—É —Å –∫–ª–∏–µ–Ω—Ç–æ–º ‚Äì 15 –º–∞—è –≤ 10:00 –∏ –æ–±–µ–¥ —Å –ø–∞—Ä—Ç–Ω–µ—Ä–∞–º–∏ ‚Äì 16 –º–∞—è –≤ 13:00"

üîÑ **–ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–µ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è:**
‚Ä¢ "–≤—Å—Ç—Ä–µ—á–∞ —Å –∫–ª–∏–µ–Ω—Ç–æ–º –≤ 10:00, –æ–±–µ–¥ —Å –∫–æ–ª–ª–µ–≥–∞–º–∏ –≤ 13:00"
‚Ä¢ "–∑–≤–æ–Ω–æ–∫ –º–∞–º–µ –≤ 9:00, –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—è –≤ 14:00"
‚Ä¢ "—Ä–∞–±–æ—Ç–∞ —Å 9:00 –¥–æ 17:00 –∏ –ø–æ—Ç–æ–º —É–∂–∏–Ω –≤ 19:00"

‚è∞ **–í—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∏–∞–ø–∞–∑–æ–Ω—ã:**
‚Ä¢ "–≤—Å—Ç—Ä–µ—á–∞ —Å 12:00 –¥–æ 14:00"
‚Ä¢ "—Ä–∞–±–æ—Ç–∞ –≤ 17:00 –Ω–∞ 2 —á–∞—Å–∞"
‚Ä¢ "–æ–±–µ–¥ –≤ 13:00 –Ω–∞ –ø–æ–ª—á–∞—Å–∞"

üìÖ **–ö–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –¥–∞—Ç—ã:**
‚Ä¢ "–≤—Å—Ç—Ä–µ—á–∞ 3 –∏—é–Ω—è –≤ 12:00"
‚Ä¢ "–æ–±–µ–¥ 31 –º–∞—è –≤ 14:30"
‚Ä¢ "–ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—è 15 –º–∞—è –≤ 16:00"

üî• **–ì–õ–ê–í–ù–û–ï: –ö–ê–ñ–î–û–ï –°–û–ë–´–¢–ò–ï –°–û–ó–î–ê–ï–¢–°–Ø –û–¢–î–ï–õ–¨–ù–û!**
‚úÖ –ë–æ–ª—å—à–µ –Ω–∏–∫–∞–∫–∏—Ö –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—ã—Ö –Ω–∞–∑–≤–∞–Ω–∏–π!
‚úÖ –ö–∞–∂–¥–æ–µ —Å–æ–±—ã—Ç–∏–µ —Å–æ —Å–≤–æ–µ–π –¥–∞—Ç–æ–π –∏ –≤—Ä–µ–º–µ–Ω–µ–º!
‚úÖ –ü—Ä–æ–±–ª–µ–º–∞ –∏–∑ –≤–∞—à–∏—Ö —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤ –†–ï–®–ï–ù–ê!

‚ùì /help - –ü–æ–¥—Ä–æ–±–Ω–∞—è —Å–ø—Ä–∞–≤–∫–∞
üîß /auth - –ü–µ—Ä–µ–∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è
"""
    await update.message.reply_text(welcome_text, parse_mode='Markdown')

async def send_authorization_request(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–ø—Ä–æ—Å –Ω–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é (—É–ø—Ä–æ—â–µ–Ω–Ω—ã–π)"""
    user = update.effective_user
    user_id = user.id
    
    # –°–æ–∑–¥–∞–µ–º —Å—Å—ã–ª–∫—É –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
    auth_url = fixed_auth_manager.create_authorization_url(user_id)
    
    if not auth_url:
        await update.message.reply_text(
            "‚ùå **–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å—Å—ã–ª–∫–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏**\n\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫—É.",
            parse_mode='Markdown'
        )
        return
    
    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
    keyboard = [
        [InlineKeyboardButton("üîê –ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è –≤ Google", url=auth_url)],
        [InlineKeyboardButton("‚ùì –ü–æ–º–æ—â—å", callback_data="auth_help")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    # –î–æ–±–∞–≤–ª—è–µ–º –≤ –æ–∂–∏–¥–∞—é—â–∏–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
    pending_authorizations[user_id] = {
        'timestamp': datetime.now(),
        'auth_url': auth_url
    }
    
    auth_text = f"""
üîê **–¢—Ä–µ–±—É–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è Google Calendar**

–ü—Ä–∏–≤–µ—Ç, **{user.first_name}**! 

–î–ª—è —Ä–∞–±–æ—Ç—ã —Å –≤–∞—à–∏–º –∫–∞–ª–µ–Ω–¥–∞—Ä–µ–º –º–Ω–µ –Ω—É–∂–µ–Ω –¥–æ—Å—Ç—É–ø –∫ Google Calendar.

**üìã –ü—Ä–æ—Å—Ç–∞—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è:**
1. –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "–ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è –≤ Google" –Ω–∏–∂–µ
2. –í–æ–π–¥–∏—Ç–µ –≤ —Å–≤–æ–π Google –∞–∫–∫–∞—É–Ω—Ç
3. –†–∞–∑—Ä–µ—à–∏—Ç–µ –¥–æ—Å—Ç—É–ø –∫ –∫–∞–ª–µ–Ω–¥–∞—Ä—é
4. **–ì–æ—Ç–æ–≤–æ!** –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ø—Ä–æ–π–¥–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏

‚è±Ô∏è **–ù–µ –ø–æ–ª—É—á–∞–µ—Ç—Å—è?** –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ —á–µ—Ä–µ–∑ 30 —Å–µ–∫—É–Ω–¥ –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ /auth

üîí **–ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å:** –Ø –ø–æ–ª—É—á—É –¥–æ—Å—Ç—É–ø —Ç–æ–ª—å–∫–æ –∫ –≤–∞—à–µ–º—É –∫–∞–ª–µ–Ω–¥–∞—Ä—é –∏ –±—É–¥—É –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –µ–≥–æ –∏—Å–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å–æ–±—ã—Ç–∏–π –ø–æ –≤–∞—à–∏–º –∑–∞–ø—Ä–æ—Å–∞–º.
"""
    
    await update.message.reply_text(auth_text, parse_mode='Markdown', reply_markup=reply_markup)
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
    asyncio.create_task(check_authorization_completion(user_id, context))

async def check_authorization_completion(user_id, context):
    """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏"""
    max_wait_time = 300  # 5 –º–∏–Ω—É—Ç
    check_interval = 5   # –∫–∞–∂–¥—ã–µ 5 —Å–µ–∫—É–Ω–¥
    
    for _ in range(max_wait_time // check_interval):
        await asyncio.sleep(check_interval)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–ª—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        if fixed_auth_manager.is_user_authorized(user_id):
            # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–ª—Å—è!
            if user_id in pending_authorizations:
                del pending_authorizations[user_id]
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—Ö–µ
            try:
                user_info = fixed_auth_manager.get_user_info(user_id)
                
                success_text = "‚úÖ **–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞!**\n\n"
                
                if user_info and user_info.get('primary_calendar'):
                    cal = user_info['primary_calendar']
                    success_text += f"üìÖ **–ü–æ–¥–∫–ª—é—á–µ–Ω –∫–∞–ª–µ–Ω–¥–∞—Ä—å:** {cal['summary']}\n"
                    success_text += f"üåç **–ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å:** {cal.get('timezone', 'UTC')}\n"
                    success_text += f"üìä **–í—Å–µ–≥–æ –∫–∞–ª–µ–Ω–¥–∞—Ä–µ–π:** {user_info.get('calendar_count', 1)}\n\n"
                
                success_text += "üî• **–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –í–°–ï –Ω–æ–≤—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏!**\n\n"
                success_text += "üß™ **–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø—Ä–æ–±–ª–µ–º–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã –∏–∑ –≤–∞—à–∏—Ö —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤:**\n"
                success_text += "‚Ä¢ \"–∑–∞–ø–ª–∞–Ω–∏—Ä—É–π –º–Ω–µ –¥–≤–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è –ü—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—è –ø—Ä–æ–µ–∫—Ç–∞ ‚Äì 3 –∏—é–Ω—è –≤ 12:00 –í—Å—Ç—Ä–µ—á–∞ —Å –∫–æ–º–∞–Ω–¥–æ–π ‚Äì 5 –∏—é–Ω—è –≤ 9:00\"\n"
                success_text += "‚Ä¢ \"3 –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è –ü—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—è –ø—Ä–æ–µ–∫—Ç–∞ ‚Äì 3 –∏—é–Ω—è –≤ 12:00 –û–±–µ–¥ —Å –∫–ª–∏–µ–Ω—Ç–∞–º–∏ ‚Äì 31 –º–∞—è –≤ 14:30 –í—Å—Ç—Ä–µ—á–∞ —Å –∫–æ–º–∞–Ω–¥–æ–π ‚Äì 5 –∏—é–Ω—è –≤ 9:00\""
                
                await context.bot.send_message(
                    chat_id=user_id,
                    text=success_text,
                    parse_mode='Markdown'
                )
                
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± —É—Å–ø–µ—Ö–µ: {e}")
            
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –æ—Ç–º–µ–Ω–∏–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        if user_id not in pending_authorizations:
            return
    
    # –í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –∏—Å—Ç–µ–∫–ª–æ
    if user_id in pending_authorizations:
        del pending_authorizations[user_id]
        
        try:
            await context.bot.send_message(
                chat_id=user_id,
                text="‚è∞ **–í—Ä–µ–º—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –∏—Å—Ç–µ–∫–ª–æ**\n\n"
                     "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑: /auth",
                parse_mode='Markdown'
            )
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ timeout —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

async def auth_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ /auth –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –∏–ª–∏ –ø–µ—Ä–µ–∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏"""
    user_id = update.effective_user.id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø
    if not await check_user_access(update):
        return
    
    # –û—Ç–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ä—É—é –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é –µ—Å–ª–∏ –µ—Å—Ç—å
    if fixed_auth_manager.is_user_authorized(user_id):
        fixed_auth_manager.revoke_user_authorization(user_id)
        await update.message.reply_text("üîÑ **–°—Ç–∞—Ä–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ—Ç–æ–∑–≤–∞–Ω–∞. –°–æ–∑–¥–∞—é –Ω–æ–≤—É—é...**")
    
    await send_authorization_request(update, context)

async def callback_query_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback –∫–Ω–æ–ø–æ–∫"""
    query = update.callback_query
    await query.answer()
    
    if query.data == "auth_help":
        help_text = """
‚ùì **–ü–æ–º–æ—â—å –ø–æ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏**

**–ü—Ä–æ—Å—Ç–∞—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è:**

1Ô∏è‚É£ **–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "–ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è –≤ Google"**
   ‚Ä¢ –û—Ç–∫—Ä–æ–µ—Ç—Å—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ Google

2Ô∏è‚É£ **–í–æ–π–¥–∏—Ç–µ –≤ —Å–≤–æ–π Google –∞–∫–∫–∞—É–Ω—Ç**
   ‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∞–∫–∫–∞—É–Ω—Ç —Å –Ω—É–∂–Ω—ã–º –∫–∞–ª–µ–Ω–¥–∞—Ä–µ–º

3Ô∏è‚É£ **–†–∞–∑—Ä–µ—à–∏—Ç–µ –¥–æ—Å—Ç—É–ø**
   ‚Ä¢ –ù–∞–∂–º–∏—Ç–µ "–†–∞–∑—Ä–µ—à–∏—Ç—å" –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ –ø—Ä–∞–≤

4Ô∏è‚É£ **–ì–æ—Ç–æ–≤–æ!**
   ‚Ä¢ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ø—Ä–æ–π–¥–µ—Ç **–∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏**
   ‚Ä¢ –ù–∏–∫–∞–∫–∏—Ö –∫–æ–¥–æ–≤ –∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å –Ω–µ –Ω—É–∂–Ω–æ!

üîß **–ü—Ä–æ–±–ª–µ–º—ã?**
‚Ä¢ –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ —á–µ—Ä–µ–∑ 30 —Å–µ–∫—É–Ω–¥
‚Ä¢ –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç–µ —Ç–æ—Ç –∂–µ –±—Ä–∞—É–∑–µ—Ä
‚Ä¢ –ï—Å–ª–∏ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç, –Ω–∞–ø–∏—à–∏—Ç–µ /auth –¥–ª—è –Ω–æ–≤–æ–π –ø–æ–ø—ã—Ç–∫–∏

üîí **–ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å:**
–ë–æ—Ç –ø–æ–ª—É—á–∞–µ—Ç –¥–æ—Å—Ç—É–ø —Ç–æ–ª—å–∫–æ –∫ –∫–∞–ª–µ–Ω–¥–∞—Ä—é –∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –µ–≥–æ –∏—Å–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å–æ–±—ã—Ç–∏–π –ø–æ –≤–∞—à–∏–º –∑–∞–ø—Ä–æ—Å–∞–º.
"""
        await query.edit_message_text(help_text, parse_mode='Markdown')

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """üî• –ü–û–õ–ù–û–°–¢–¨–Æ –û–ë–ù–û–í–õ–ï–ù–ù–ê–Ø –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π —Å –ò–ù–¢–ï–ì–†–ò–†–û–í–ê–ù–ù–´–ú –°–ü–ï–¶–ò–ê–õ–¨–ù–´–ú –ø–∞—Ä—Å–µ—Ä–æ–º"""
    user_text = update.message.text
    user_id = update.effective_user.id
    user = update.effective_user
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø –∫ –±–æ—Ç—É
    if not await check_user_access(update):
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if not fixed_auth_manager.is_user_authorized(user_id):
        await update.message.reply_text(
            "üîê **–¢—Ä–µ–±—É–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è**\n\n"
            "–î–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å–æ–±—ã—Ç–∏–π –≤ –∫–∞–ª–µ–Ω–¥–∞—Ä–µ –Ω—É–∂–Ω–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è.\n\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É: /auth",
            parse_mode='Markdown'
        )
        return
    
    logger.info(f"üì® –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: '{user_text}'")
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Ç–æ–º, —á—Ç–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∑–∞–ø—Ä–æ—Å
    processing_msg = await update.message.reply_text("üéØ –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –≤–∞—à –∑–∞–ø—Ä–æ—Å —Å –ø–æ–º–æ—â—å—é –°–ü–ï–¶–ò–ê–õ–¨–ù–û–ì–û –ø–∞—Ä—Å–µ—Ä–∞ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π...")
    
    try:
        # üî• –ì–õ–ê–í–ù–ê–Ø –ù–û–í–ê–Ø –õ–û–ì–ò–ö–ê: –ò—Å–ø–æ–ª—å–∑—É–µ–º –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π –ø–∞—Ä—Å–µ—Ä
        events = enhanced_extract_multiple_events_integrated(user_text, DEFAULT_TIMEZONE)
        
        if not events:
            await processing_msg.edit_text(
                "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è.\n\n"
                "üí° **–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç—ã –∏–∑ –≤–∞—à–∏—Ö —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤:**\n\n"
                "üéØ **–°—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –≤–≤–æ–¥:**\n"
                "‚Ä¢ '–∑–∞–ø–ª–∞–Ω–∏—Ä—É–π –º–Ω–µ –¥–≤–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è –ü—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—è –ø—Ä–æ–µ–∫—Ç–∞ ‚Äì 3 –∏—é–Ω—è –≤ 12:00 –í—Å—Ç—Ä–µ—á–∞ —Å –∫–æ–º–∞–Ω–¥–æ–π ‚Äì 5 –∏—é–Ω—è –≤ 9:00'\n"
                "‚Ä¢ '3 –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è –ü—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—è –ø—Ä–æ–µ–∫—Ç–∞ ‚Äì 3 –∏—é–Ω—è –≤ 12:00 –û–±–µ–¥ —Å –∫–ª–∏–µ–Ω—Ç–∞–º–∏ ‚Äì 31 –º–∞—è –≤ 14:30 –í—Å—Ç—Ä–µ—á–∞ —Å –∫–æ–º–∞–Ω–¥–æ–π ‚Äì 5 –∏—é–Ω—è –≤ 9:00'\n"
                "‚Ä¢ '—Å–æ–∑–¥–∞–π –≤—Å—Ç—Ä–µ—á—É —Å –∫–ª–∏–µ–Ω—Ç–æ–º ‚Äì 15 –º–∞—è –≤ 10:00 –∏ –æ–±–µ–¥ —Å –ø–∞—Ä—Ç–Ω–µ—Ä–∞–º–∏ ‚Äì 16 –º–∞—è –≤ 13:00'\n\n"
                "üîÑ **–ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—ã–µ:**\n"
                "‚Ä¢ '–≤—Å—Ç—Ä–µ—á–∞ —Å –∫–ª–∏–µ–Ω—Ç–æ–º –≤ 10:00, –æ–±–µ–¥ —Å –∫–æ–ª–ª–µ–≥–∞–º–∏ –≤ 13:00'\n"
                "‚Ä¢ '–∑–≤–æ–Ω–æ–∫ –º–∞–º–µ –≤ 9:00, –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—è –≤ 14:00'\n\n"
                "‚è∞ **–í—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∏–∞–ø–∞–∑–æ–Ω—ã:**\n"
                "‚Ä¢ '–≤—Å—Ç—Ä–µ—á–∞ —Å 12:00 –¥–æ 14:00'\n"
                "‚Ä¢ '—Ä–∞–±–æ—Ç–∞ –≤ 17:00 –Ω–∞ 2 —á–∞—Å–∞'\n\n"
                "üìÖ **–ö–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –¥–∞—Ç—ã:**\n"
                "‚Ä¢ '–≤—Å—Ç—Ä–µ—á–∞ 3 –∏—é–Ω—è –≤ 12:00'\n"
                "‚Ä¢ '–æ–±–µ–¥ 31 –º–∞—è –≤ 14:30'"
            )
            return
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π
        event_count = len(events)
        if event_count == 1:
            await processing_msg.edit_text("üìÖ –°–æ–∑–¥–∞—é —Å–æ–±—ã—Ç–∏–µ –≤ –≤–∞—à–µ–º –∫–∞–ª–µ–Ω–¥–∞—Ä–µ...")
        else:
            await processing_msg.edit_text(f"üéØ –°–æ–∑–¥–∞—é {event_count} –û–¢–î–ï–õ–¨–ù–´–• —Å–æ–±—ã—Ç–∏–π –≤ –≤–∞—à–µ–º –∫–∞–ª–µ–Ω–¥–∞—Ä–µ (–°–ü–ï–¶–ò–ê–õ–¨–ù–´–ô –ø–∞—Ä—Å–µ—Ä)...")
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–µ—Ä–≤–∏—Å –∫–∞–ª–µ–Ω–¥–∞—Ä—è –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        calendar_service = get_user_calendar_service(user_id)
        if not calendar_service:
            await processing_msg.edit_text(
                "‚ùå **–û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –∫–∞–ª–µ–Ω–¥–∞—Ä—é**\n\n"
                "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ –≤–∞—à–µ–º—É –∫–∞–ª–µ–Ω–¥–∞—Ä—é.\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è: /auth"
            )
            return
        
        # –°–æ–∑–¥–∞–µ–º —Å–æ–±—ã—Ç–∏—è
        created_events = []
        failed_events = []

        for i, event_data in enumerate(events, 1):
            # –ö–†–ò–¢–ò–ß–ù–û: –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ end_time (–¥–ª—è –¥–∏–∞–ø–∞–∑–æ–Ω–æ–≤)
            if len(event_data) == 4:
                start_datetime, summary, event_type, end_datetime = event_data
                logger.info(f"üìä –°–æ–±—ã—Ç–∏–µ {i} —Å –¥–∏–∞–ø–∞–∑–æ–Ω–æ–º: {start_datetime.strftime('%H:%M')}-{end_datetime.strftime('%H:%M')}")
            else:
                start_datetime, summary, event_type = event_data
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º —É–º–Ω—É—é –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –¥–ª—è –æ–±—ã—á–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π
                end_datetime = get_smart_end_time(start_datetime, summary)
                logger.info(f"üìä –°–æ–±—ã—Ç–∏–µ {i} –±–µ–∑ –¥–∏–∞–ø–∞–∑–æ–Ω–∞: {start_datetime.strftime('%H:%M')}-{end_datetime.strftime('%H:%M')}")

            try:
                # –í–∞–ª–∏–¥–∏—Ä—É–µ–º –¥–∞—Ç—É/–≤—Ä–µ–º—è
                start_datetime = validate_datetime(start_datetime, DEFAULT_TIMEZONE)
                if not start_datetime:
                    failed_events.append(summary + " (–Ω–µ–≤–µ—Ä–Ω–∞—è –¥–∞—Ç–∞)")
                    continue
                
                # –°–æ–∑–¥–∞–µ–º —Å–æ–±—ã—Ç–∏–µ —á–µ—Ä–µ–∑ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–π —Å–µ—Ä–≤–∏—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                logger.info(f"üìù –°–æ–∑–¥–∞–µ–º —Å–æ–±—ã—Ç–∏–µ {i}/{event_count}: '{summary}' –≤ {start_datetime}")
                
                event_result = add_event_to_user_calendar(
                    calendar_service,
                    summary,
                    start_datetime,
                    end_datetime,
                    DEFAULT_TIMEZONE
                )
                
                if event_result:
                    created_events.append({
                        'summary': summary,
                        'start': start_datetime,
                        'end': end_datetime,
                        'type': event_type,
                        'id': event_result.get('id', ''),
                        'html_link': event_result.get('htmlLink', ''),
                        'is_range': len(event_data) == 4  # –ü–æ–º–µ—á–∞–µ–º —Å–æ–±—ã—Ç–∏—è —Å –¥–∏–∞–ø–∞–∑–æ–Ω–æ–º
                    })
                    logger.info(f"‚úÖ –°–æ–±—ã—Ç–∏–µ {i} '{summary}' —Å–æ–∑–¥–∞–Ω–æ —É—Å–ø–µ—à–Ω–æ")
                else:
                    failed_events.append(summary)
                    logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Å–æ–±—ã—Ç–∏–µ {i}")
                    
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–æ–±—ã—Ç–∏—è '{summary}': {e}")
                failed_events.append(summary)
        
        # üéØ –°–ü–ï–¶–ò–ê–õ–¨–ù–´–ô –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –¥–ª—è –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π
        if created_events and not failed_events:
            # –í—Å–µ —Å–æ–±—ã—Ç–∏—è —Å–æ–∑–¥–∞–Ω—ã —É—Å–ø–µ—à–Ω–æ
            if len(created_events) == 1:
                event = created_events[0]
                
                success_text = f"""
‚úÖ **–°–æ–±—ã—Ç–∏–µ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ –≤–∞—à –∫–∞–ª–µ–Ω–¥–∞—Ä—å!**

üìã **–î–µ—Ç–∞–ª–∏:**
‚Ä¢ **–ù–∞–∑–≤–∞–Ω–∏–µ:** {event['summary']}
‚Ä¢ **–î–∞—Ç–∞:** {format_datetime_for_display(event['start'])}
‚Ä¢ **–í—Ä–µ–º—è:** {event['start'].strftime('%H:%M')} - {event['end'].strftime('%H:%M')}
‚Ä¢ **–¢–∏–ø:** {'üìÖ –°–æ–±—ã—Ç–∏–µ' if event['type'] == 'event' else 'üìã –ó–∞–¥–∞—á–∞'}

üîó [–û—Ç–∫—Ä—ã—Ç—å –≤ Google Calendar]({event['html_link']})


"""
            else:
                success_text = f"üéØ **–í–°–ï {len(created_events)} —Å–æ–±—ã—Ç–∏–π —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ –≤–∞—à –∫–∞–ª–µ–Ω–¥–∞—Ä—å!**\n\n"
                
                for i, event in enumerate(created_events, 1):
                    duration_minutes = int((event['end'] - event['start']).total_seconds() / 60)
                    if duration_minutes >= 60:
                        hours = duration_minutes // 60
                        minutes = duration_minutes % 60
                        if minutes > 0:
                            duration_display = f" ({hours}—á {minutes}–º–∏–Ω)"
                        else:
                            duration_display = f" ({hours}—á)"
                    else:
                        duration_display = f" ({duration_minutes}–º–∏–Ω)"
                    
                    success_text += f"""**{i}. {event['summary']}**
üìÖ {format_datetime_for_display(event['start'])} ({event['start'].strftime('%H:%M')}-{event['end'].strftime('%H:%M')}{duration_display})
{'üìÖ –°–æ–±—ã—Ç–∏–µ' if event['type'] == 'event' else 'üìã –ó–∞–¥–∞—á–∞'}

"""
                
                # –î–æ–±–∞–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω—É—é —Å—Å—ã–ª–∫—É –Ω–∞ Google Calendar
                primary_event = created_events[0]  # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—Å—ã–ª–∫—É –ø–µ—Ä–≤–æ–≥–æ —Å–æ–±—ã—Ç–∏—è
                success_text += f"üîó [–û—Ç–∫—Ä—ã—Ç—å –≤ Google Calendar]({primary_event['html_link']})"
            
            await processing_msg.edit_text(success_text, parse_mode='Markdown')
            
        elif created_events and failed_events:
            # –ß–∞—Å—Ç–∏—á–Ω–æ —É—Å–ø–µ—à–Ω–æ
            partial_text = f"""
‚ö†Ô∏è **–ß–∞—Å—Ç–∏—á–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ (–°–ü–ï–¶–ò–ê–õ–¨–ù–´–ô –ø–∞—Ä—Å–µ—Ä)**

‚úÖ **–°–æ–∑–¥–∞–Ω—ã ({len(created_events)}):**
"""
            for event in created_events:
                duration_minutes = int((event['end'] - event['start']).total_seconds() / 60)
                if duration_minutes >= 60:
                    hours = duration_minutes // 60
                    duration_display = f" ({hours}—á)"
                else:
                    duration_display = f" ({duration_minutes}–º–∏–Ω)"
                
                partial_text += f"‚Ä¢ **{event['summary']}** - {format_datetime_for_display(event['start'])}{duration_display}\n"
            
            partial_text += f"\n‚ùå **–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å ({len(failed_events)}):**\n"
            for failed in failed_events:
                partial_text += f"‚Ä¢ {failed}\n"
            
            partial_text += f"\nüéØ **–°–ü–ï–¶–ò–ê–õ–¨–ù–´–ô –ø–∞—Ä—Å–µ—Ä —á–∞—Å—Ç–∏—á–Ω–æ —Å—Ä–∞–±–æ—Ç–∞–ª!**"
            
            await processing_msg.edit_text(partial_text, parse_mode='Markdown')
            
        else:
            # –ù–∏—á–µ–≥–æ –Ω–µ —Å–æ–∑–¥–∞–Ω–æ
            await processing_msg.edit_text(
                "‚ùå **–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Å–æ–±—ã—Ç–∏—è –≤ –∫–∞–ª–µ–Ω–¥–∞—Ä–µ.**\n\n"
                "üîß –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:\n"
                "‚Ä¢ –ü—Ä–æ–±–ª–µ–º—ã —Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–µ–π Google\n"
                "‚Ä¢ –ü—Ä–µ–≤—ã—à–µ–Ω—ã –ª–∏–º–∏—Ç—ã API\n"
                "‚Ä¢ –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É\n\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è: /auth"
            )
            
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        await processing_msg.edit_text(
            f"‚ö†Ô∏è **–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞.**\n\n"
            f"üîß –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è: {str(e)}\n\n"
            f"–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫—É."
        )

def add_event_to_user_calendar(service, summary, start_datetime, end_datetime, timezone='Asia/Almaty'):
    """–î–æ–±–∞–≤–∏—Ç—å —Å–æ–±—ã—Ç–∏–µ –≤ –∫–∞–ª–µ–Ω–¥–∞—Ä—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–±—ã—Ç–∏–µ –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ –¥–ª—è Google Calendar API
        event = {
            'summary': summary,
            'start': {
                'dateTime': start_datetime.isoformat(),
                'timeZone': timezone,
            },
            'end': {
                'dateTime': end_datetime.isoformat(),
                'timeZone': timezone,
            },
            'description': f'‚ú® –°–æ–∑–¥–∞–Ω–æ —á–µ—Ä–µ–∑ Vetra AI (–°–ü–ï–¶–ò–ê–õ–¨–ù–´–ô –ø–∞—Ä—Å–µ—Ä –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π)'
        }
        
        logger.info(f"üìÖ –°–æ–∑–¥–∞–µ–º —Å–æ–±—ã—Ç–∏–µ: {summary}")
        logger.info(f"‚è∞ –í—Ä–µ–º—è: {start_datetime.isoformat()} - {end_datetime.isoformat()}")
        
        # –°–æ–∑–¥–∞–µ–º —Å–æ–±—ã—Ç–∏–µ
        event_result = service.events().insert(calendarId='primary', body=event).execute()
        
        logger.info(f"‚úÖ –°–æ–±—ã—Ç–∏–µ —Å–æ–∑–¥–∞–Ω–æ! ID: {event_result.get('id')}")
        return event_result
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–æ–±—ã—Ç–∏—è: {e}")
        return None

def get_smart_end_time(start_time, summary, default_duration_hours=1):
    """–£–º–Ω–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –æ–∫–æ–Ω—á–∞–Ω–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–∏–ø–∞ —Å–æ–±—ã—Ç–∏—è"""
    summary_lower = summary.lower()
    
    # –ö–æ—Ä–æ—Ç–∫–∏–µ —Å–æ–±—ã—Ç–∏—è (30 –º–∏–Ω—É—Ç)
    short_events = ['–∑–≤–æ–Ω–æ–∫', '—Å–æ–∑–≤–æ–Ω', '–æ–±–µ–¥', '–∫–æ—Ñ–µ', '–ø–µ—Ä–µ—Ä—ã–≤', 'call']
    if any(word in summary_lower for word in short_events):
        return start_time + timedelta(minutes=30)
    
    # –î–ª–∏–Ω–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è (2 —á–∞—Å–∞)
    long_events = ['–ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—è', '—Å–µ–º–∏–Ω–∞—Ä', '–ª–µ–∫—Ü–∏—è', '—Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞', '–∫–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏—è', '–≤–æ—Ä–∫—à–æ–ø']
    if any(word in summary_lower for word in long_events):
        return start_time + timedelta(hours=2)
    
    # –û—á–µ–Ω—å –¥–ª–∏–Ω–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è (3-4 —á–∞—Å–∞)
    very_long_events = ['—ç–∫–∑–∞–º–µ–Ω', '—Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏–µ', '–∏–Ω—Ç–µ—Ä–≤—å—é']
    if any(word in summary_lower for word in very_long_events):
        return start_time + timedelta(hours=3)
    
    # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é (1 —á–∞—Å)
    return start_time + timedelta(hours=default_duration_hours)

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """üî• –û–ë–ù–û–í–õ–ï–ù–ù–ê–Ø –∫–æ–º–∞–Ω–¥–∞ /help —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–º –ø–∞—Ä—Å–µ—Ä–µ"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø
    if not await check_user_access(update):
        return
        
    help_text = """
üÜò **–ü–æ–º–æ—â—å –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é Vetra AI (–°–ü–ï–¶–ò–ê–õ–¨–ù–´–ô –ü–ê–†–°–ï–†)**

üéØ **–°–ü–ï–¶–ò–ê–õ–¨–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø: –ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è**
–¢–µ–ø–µ—Ä—å –±–æ—Ç —É–º–µ–µ—Ç —Å–æ–∑–¥–∞–≤–∞—Ç—å **–Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–æ–±—ã—Ç–∏–π** –∏–∑ –æ–¥–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è!

üìù **–§–û–†–ú–ê–¢–´ –ò–ó –í–ê–®–ò–• –°–ö–†–ò–ù–®–û–¢–û–í (–¢–ï–ü–ï–†–¨ –†–ê–ë–û–¢–ê–Æ–¢!):**

üéØ **–°—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –≤–≤–æ–¥:**
‚Ä¢ "–∑–∞–ø–ª–∞–Ω–∏—Ä—É–π –º–Ω–µ –¥–≤–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è –ü—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—è –ø—Ä–æ–µ–∫—Ç–∞ ‚Äì 3 –∏—é–Ω—è –≤ 12:00 –í—Å—Ç—Ä–µ—á–∞ —Å –∫–æ–º–∞–Ω–¥–æ–π ‚Äì 5 –∏—é–Ω—è –≤ 9:00"
‚Ä¢ "3 –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è –ü—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—è –ø—Ä–æ–µ–∫—Ç–∞ ‚Äì 3 –∏—é–Ω—è –≤ 12:00 –û–±–µ–¥ —Å –∫–ª–∏–µ–Ω—Ç–∞–º–∏ ‚Äì 31 –º–∞—è –≤ 14:30 –í—Å—Ç—Ä–µ—á–∞ —Å –∫–æ–º–∞–Ω–¥–æ–π ‚Äì 5 –∏—é–Ω—è –≤ 9:00"
‚Ä¢ "—Å–æ–∑–¥–∞–π –≤—Å—Ç—Ä–µ—á—É —Å –∫–ª–∏–µ–Ω—Ç–æ–º ‚Äì 15 –º–∞—è –≤ 10:00 –∏ –æ–±–µ–¥ —Å –ø–∞—Ä—Ç–Ω–µ—Ä–∞–º–∏ ‚Äì 16 –º–∞—è –≤ 13:00"

üîÑ **–ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—ã–µ:**
‚Ä¢ "–≤—Å—Ç—Ä–µ—á–∞ —Å –∫–ª–∏–µ–Ω—Ç–æ–º –≤ 10:00, –æ–±–µ–¥ —Å –∫–æ–ª–ª–µ–≥–∞–º–∏ –≤ 13:00"
‚Ä¢ "–∑–≤–æ–Ω–æ–∫ –º–∞–º–µ –≤ 9:00, –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—è –≤ 14:00"
‚Ä¢ "—Ä–∞–±–æ—Ç–∞ —Å 9:00 –¥–æ 17:00 –∏ –ø–æ—Ç–æ–º —É–∂–∏–Ω –≤ 19:00"

‚è∞ **–í—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∏–∞–ø–∞–∑–æ–Ω—ã:**
‚Ä¢ "–≤—Å—Ç—Ä–µ—á–∞ —Å –õ–µ—Ä–æ–π —Å 12:00 –¥–æ 14:00"
‚Ä¢ "–ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—è –ø—Ä–æ–µ–∫—Ç–∞ –≤ 17:00 –Ω–∞ 2 —á–∞—Å–∞"
‚Ä¢ "–æ–±–µ–¥ –≤ 13:00 –Ω–∞ 30 –º–∏–Ω—É—Ç"
‚Ä¢ "—Ä–∞–±–æ—Ç–∞ 09:00-17:00"

üìÖ **–ö–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –¥–∞—Ç—ã:**
‚Ä¢ "–≤—Å—Ç—Ä–µ—á–∞ 3 –∏—é–Ω—è –≤ 12:00"
‚Ä¢ "–æ–±–µ–¥ 31 –º–∞—è –≤ 14:30"  
‚Ä¢ "–ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—è 15 –º–∞—è –≤ 16:00"
‚Ä¢ "–¥–µ–¥–ª–∞–π–Ω 25.12.2024 –≤ 23:59"

üéØ **–ö–ª—é—á–µ–≤—ã–µ —É–ª—É—á—à–µ–Ω–∏—è:**
‚úÖ **–ü–†–û–ë–õ–ï–ú–ê –ò–ó –°–ö–†–ò–ù–®–û–¢–û–í –†–ï–®–ï–ù–ê:** –ö–∞–∂–¥–æ–µ —Å–æ–±—ã—Ç–∏–µ —Å–æ–∑–¥–∞–µ—Ç—Å—è –æ—Ç–¥–µ–ª—å–Ω–æ!
‚úÖ –ë–æ–ª—å—à–µ –Ω–∏–∫–∞–∫–∏—Ö –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—ã—Ö –Ω–∞–∑–≤–∞–Ω–∏–π —Ç–∏–ø–∞ "3 –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è –ü—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—è ‚Äì –û–±–µ–¥ ‚Äì –í—Å—Ç—Ä–µ—á–∞"
‚úÖ –ö–∞–∂–¥–æ–µ —Å–æ–±—ã—Ç–∏–µ —Å–æ —Å–≤–æ–µ–π –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –¥–∞—Ç–æ–π –∏ –≤—Ä–µ–º–µ–Ω–µ–º
‚úÖ –£–º–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –Ω–∞–∑–≤–∞–Ω–∏–π –æ—Ç –º—É—Å–æ—Ä–∞ ("–∑–∞–ø–ª–∞–Ω–∏—Ä—É–π –º–Ω–µ", "3 –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è")
‚úÖ –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –≤—Å–µ—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤ –¥–∞—Ç (3 –∏—é–Ω—è, 31 –º–∞—è, 15.06)

‚ùì **–ö–æ–º–∞–Ω–¥—ã:**
‚Ä¢ /start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É
‚Ä¢ /help - –≠—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞  
‚Ä¢ /auth - –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è Google Calendar (–ë–ï–ó –∫–æ–¥–æ–≤!)

üí° **–†–ï–ó–£–õ–¨–¢–ê–¢:** –í–º–µ—Å—Ç–æ 1 –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω–æ–≥–æ —Å–æ–±—ã—Ç–∏—è ‚Üí –Ω–µ—Å–∫–æ–ª—å–∫–æ –æ—Ç–¥–µ–ª—å–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π!
"""
    await update.message.reply_text(help_text, parse_mode='Markdown')

async def add_beta_user_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –±–µ—Ç–∞-–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)"""
    user_id = update.effective_user.id
    
    if user_id not in ADMIN_USERS:
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return
    
    if not context.args:
        await update.message.reply_text(
            "‚ùå **–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã**\n\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: `/add_beta USER_ID`\n\n"
            "–ù–∞–ø—Ä–∏–º–µ—Ä: `/add_beta 123456789`",
            parse_mode='Markdown'
        )
        return
    
    try:
        new_user_id = int(context.args[0])
        BETA_USERS.add(new_user_id)
        
        await update.message.reply_text(
            f"‚úÖ **–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {new_user_id} –¥–æ–±–∞–≤–ª–µ–Ω –≤ –±–µ—Ç–∞-—Ç–µ—Å—Ç–µ—Ä—ã!**\n\n"
            f"–¢–µ–ø–µ—Ä—å –æ–Ω –º–æ–∂–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –°–ü–ï–¶–ò–ê–õ–¨–ù–´–ô –ø–∞—Ä—Å–µ—Ä –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π.",
            parse_mode='Markdown'
        )
        
        logger.info(f"‚úÖ –ê–¥–º–∏–Ω {user_id} –¥–æ–±–∞–≤–∏–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {new_user_id} –≤ –±–µ—Ç–∞-—Ç–µ—Å—Ç–µ—Ä—ã")
        
    except ValueError:
        await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç User ID. –î–æ–ª–∂–Ω–æ –±—ã—Ç—å —á–∏—Å–ª–æ.")

def main():
    """üî• –ó–∞–ø—É—Å–∫ –ü–û–õ–ù–û–°–¢–¨–Æ –û–ë–ù–û–í–õ–ï–ù–ù–û–ì–û –±–æ—Ç–∞ —Å–æ –°–ü–ï–¶–ò–ê–õ–¨–ù–´–ú –ø–∞—Ä—Å–µ—Ä–æ–º"""
    logger.info("üî• –ó–∞–ø—É—Å–∫ Vetra AI –±–æ—Ç–∞ —Å–æ –°–ü–ï–¶–ò–ê–õ–¨–ù–´–ú –ø–∞—Ä—Å–µ—Ä–æ–º –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π...")
    
    # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    app = ApplicationBuilder().token(TELEGRAM_TOKEN).build()
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("help", help_command))
    app.add_handler(CommandHandler("auth", auth_command))
    app.add_handler(CommandHandler("add_beta", add_beta_user_command))
    app.add_handler(CallbackQueryHandler(callback_query_handler))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    
    logger.info("‚úÖ –ü–û–õ–ù–û–°–¢–¨–Æ –û–ë–ù–û–í–õ–ï–ù–ù–´–ô –±–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")
    logger.info("üéØ –°–ü–ï–¶–ò–ê–õ–¨–ù–´–ï –í–û–ó–ú–û–ñ–ù–û–°–¢–ò:")
    logger.info("   ‚Ä¢ –°–ü–ï–¶–ò–ê–õ–¨–ù–´–ô –ø–∞—Ä—Å–µ—Ä –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π (–ò–ù–¢–ï–ì–†–ò–†–û–í–ê–ù)")
    logger.info("   ‚Ä¢ –†–µ—à–µ–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º—ã –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏—è —Å–æ–±—ã—Ç–∏–π –≤ –æ–¥–Ω–æ")
    logger.info("   ‚Ä¢ –ü–æ–¥–¥–µ—Ä–∂–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –∏–∑ —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤")
    logger.info("   ‚Ä¢ –ö–∞–∂–¥–æ–µ —Å–æ–±—ã—Ç–∏–µ —Å–æ–∑–¥–∞–µ—Ç—Å—è –æ—Ç–¥–µ–ª—å–Ω–æ —Å–æ —Å–≤–æ–µ–π –¥–∞—Ç–æ–π –∏ –≤—Ä–µ–º–µ–Ω–µ–º")
    logger.info("   ‚Ä¢ –£–º–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –Ω–∞–∑–≤–∞–Ω–∏–π –æ—Ç –º—É—Å–æ—Ä–∞")
    logger.info("üî• –ü–†–û–ë–õ–ï–ú–ê –ò–ó –°–ö–†–ò–ù–®–û–¢–û–í –†–ï–®–ï–ù–ê!")
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º polling
    app.run_polling(drop_pending_updates=True)

if __name__ == "__main__":
    main()