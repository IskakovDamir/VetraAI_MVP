#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–®–∞–≥ 1: –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ñ–∞–π–Ω-—Ç—é–Ω–∏–Ω–≥–∞ Vetra AI
–≠—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç –æ–±—ä–µ–¥–∏–Ω—è–µ—Ç –≤—Å–µ JSONL —Ñ–∞–π–ª—ã –∏ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç –∏—Ö –≤ —Ñ–æ—Ä–º–∞—Ç OpenAI
"""

import json
import os
import openai
from openai import OpenAI

# –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º API –∫–ª—é—á
os.environ["OPENAI_API_KEY"] = "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"

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–ª–∏–µ–Ω—Ç OpenAI
client = OpenAI()

def prepare_training_data():
    """–û–±—ä–µ–¥–∏–Ω—è–µ–º –≤—Å–µ JSONL —Ñ–∞–π–ª—ã –∏ –≥–æ—Ç–æ–≤–∏–º –¥–ª—è —Ñ–∞–π–Ω-—Ç—é–Ω–∏–Ω–≥–∞"""
    
    print("üîÑ –ù–∞—á–∏–Ω–∞–µ–º –ø–æ–¥–≥–æ—Ç–æ–≤–∫—É –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ñ–∞–π–Ω-—Ç—é–Ω–∏–Ω–≥–∞...")
    
    # –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Ñ–∞–π–ª–æ–≤ —Å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ—á–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
    training_files = [
        "#1_recurring_calendar_training_data.txt",
        "#2_recurring_calendar_training_data.txt", 
        "#3_reminder_training_data.txt",
        "#4_multi_event_training_data.txt",
        "#5_edge_case_training_data.txt",
        "#6_people_places_training_data.txt",
        "#7_event_updates_training_data.txt",
        "#8_noisy_input_training_data.txt",
        "#9_student_freelancer_remote_training_data.txt",
        "#10_duration_multiday_range_training_data.txt"
    ]
    
    all_data = []
    total_processed = 0
    
    # –°–∏—Å—Ç–µ–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –º–æ–¥–µ–ª–∏
    system_message = """–¢—ã Vetra AI - —É–º–Ω—ã–π –∫–∞–ª–µ–Ω–¥–∞—Ä–Ω—ã–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç. –ê–Ω–∞–ª–∏–∑–∏—Ä—É–π –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω—ã–π —è–∑—ã–∫ (—Ä—É—Å—Å–∫–∏–π/–∞–Ω–≥–ª–∏–π—Å–∫–∏–π) –∏ –≤–æ–∑–≤—Ä–∞—â–∞–π —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∫–∞–ª–µ–Ω–¥–∞—Ä—è –≤ JSON —Ñ–æ—Ä–º–∞—Ç–µ. 

–î–ª—è –∫–∞–ª–µ–Ω–¥–∞—Ä–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π –≤–æ–∑–≤—Ä–∞—â–∞–π –æ–±—ä–µ–∫—Ç —Å –ø–æ–ª—è–º–∏:
- title: –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è
- date: –¥–∞—Ç–∞ (tomorrow, Friday, 15 –º–∞—è, etc.)
- time: –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ HH:MM
- type: "event" –∏–ª–∏ "reminder"
- recurrence: –µ—Å–ª–∏ —Å–æ–±—ã—Ç–∏–µ –ø–æ–≤—Ç–æ—Ä—è—é—â–µ–µ—Å—è
- reminder: –≤—Ä–µ–º—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
- location: –º–µ—Å—Ç–æ (–µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω–æ)
- participants: —É—á–∞—Å—Ç–Ω–∏–∫–∏ (–µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω—ã)

–î–ª—è –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π –≤–æ–∑–≤—Ä–∞—â–∞–π –º–∞—Å—Å–∏–≤ –æ–±—ä–µ–∫—Ç–æ–≤.
–î–ª—è –ù–ï-–∫–∞–ª–µ–Ω–¥–∞—Ä–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –≤–æ–∑–≤—Ä–∞—â–∞–π –ø—É—Å—Ç–æ–π –æ–±—ä–µ–∫—Ç {}."""

    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—ã–π —Ñ–∞–π–ª
    for file_path in training_files:
        if not os.path.exists(file_path):
            print(f"‚ö†Ô∏è  –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {file_path}")
            continue
            
        print(f"üìñ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ñ–∞–π–ª: {file_path}")
        
        try:
            with open(file_path, 'r', encoding='utf-8') as f:
                file_count = 0
                for line_num, line in enumerate(f, 1):
                    line = line.strip()
                    if not line:
                        continue
                        
                    try:
                        # –ü–∞—Ä—Å–∏–º –∏—Å—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
                        data = json.loads(line)
                        
                        if "input" not in data or "output" not in data:
                            print(f"‚ö†Ô∏è  –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å—Ç—Ä–æ–∫—É {line_num} –≤ {file_path}: –Ω–µ—Ç input/output")
                            continue
                        
                        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ —Ñ–æ—Ä–º–∞—Ç OpenAI
                        formatted_data = {
                            "messages": [
                                {"role": "system", "content": system_message},
                                {"role": "user", "content": data["input"]},
                                {"role": "assistant", "content": json.dumps(data["output"], ensure_ascii=False)}
                            ]
                        }
                        
                        all_data.append(formatted_data)
                        file_count += 1
                        total_processed += 1
                        
                    except json.JSONDecodeError as e:
                        print(f"‚ùå JSON –æ—à–∏–±–∫–∞ –≤ {file_path} —Å—Ç—Ä–æ–∫–∞ {line_num}: {e}")
                    except Exception as e:
                        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ {file_path} —Å—Ç—Ä–æ–∫–∞ {line_num}: {e}")
                
                print(f"‚úÖ –ò–∑ {file_path} –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {file_count} –ø—Ä–∏–º–µ—Ä–æ–≤")
                
        except FileNotFoundError:
            print(f"‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {file_path}")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ {file_path}: {e}")
    
    if not all_data:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –Ω–∏ –æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞!")
        return None
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    output_file = 'vetra_training_data.jsonl'
    
    print(f"üíæ –°–æ—Ö—Ä–∞–Ω—è–µ–º {len(all_data)} –ø—Ä–∏–º–µ—Ä–æ–≤ –≤ {output_file}...")
    
    try:
        with open(output_file, 'w', encoding='utf-8') as f:
            for item in all_data:
                f.write(json.dumps(item, ensure_ascii=False) + '\n')
        
        print(f"‚úÖ –î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω—ã!")
        print(f"üìä –ò—Ç–æ–≥–æ –ø—Ä–∏–º–µ—Ä–æ–≤: {len(all_data)}")
        print(f"üìÅ –§–∞–π–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {output_file}")
        
        return output_file
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏: {e}")
        return None

def validate_training_data(file_path):
    """–í–∞–ª–∏–¥–∏—Ä—É–µ–º –ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ"""
    
    print(f"\nüîç –í–∞–ª–∏–¥–∏—Ä—É–µ–º —Ñ–∞–π–ª: {file_path}")
    
    try:
        with open(file_path, 'r', encoding='utf-8') as f:
            line_count = 0
            valid_count = 0
            
            for line_num, line in enumerate(f, 1):
                line = line.strip()
                if not line:
                    continue
                    
                line_count += 1
                
                try:
                    data = json.loads(line)
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É
                    if ("messages" in data and 
                        isinstance(data["messages"], list) and 
                        len(data["messages"]) == 3):
                        valid_count += 1
                    else:
                        print(f"‚ö†Ô∏è  –ù–µ–≤–µ—Ä–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –≤ —Å—Ç—Ä–æ–∫–µ {line_num}")
                        
                except json.JSONDecodeError:
                    print(f"‚ùå JSON –æ—à–∏–±–∫–∞ –≤ —Å—Ç—Ä–æ–∫–µ {line_num}")
            
            print(f"üìä –ü—Ä–æ–≤–µ—Ä–µ–Ω–æ —Å—Ç—Ä–æ–∫: {line_count}")
            print(f"‚úÖ –í–∞–ª–∏–¥–Ω—ã—Ö –ø—Ä–∏–º–µ—Ä–æ–≤: {valid_count}")
            print(f"üìà –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: {(valid_count/line_count)*100:.1f}%")
            
            if valid_count > 100:  # –ú–∏–Ω–∏–º—É–º –¥–ª—è —Ñ–∞–π–Ω-—Ç—é–Ω–∏–Ω–≥–∞
                print("üéâ –î–∞–Ω–Ω—ã–µ –≥–æ—Ç–æ–≤—ã –¥–ª—è —Ñ–∞–π–Ω-—Ç—é–Ω–∏–Ω–≥–∞!")
                return True
            else:
                print("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ñ–∞–π–Ω-—Ç—é–Ω–∏–Ω–≥–∞ (–Ω—É–∂–Ω–æ –º–∏–Ω–∏–º—É–º 100)")
                return False
                
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏: {e}")
        return False

if __name__ == "__main__":
    print("üöÄ Vetra AI - –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ñ–∞–π–Ω-—Ç—é–Ω–∏–Ω–≥–∞")
    print("=" * 50)
    
    # –®–∞–≥ 1: –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ
    output_file = prepare_training_data()
    
    if output_file:
        # –®–∞–≥ 2: –í–∞–ª–∏–¥–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ
        if validate_training_data(output_file):
            print(f"\n‚úÖ –í–°–ï –ì–û–¢–û–í–û!")
            print(f"üìÅ –§–∞–π–ª –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏: {output_file}")
            print(f"üéØ –°–ª–µ–¥—É—é—â–∏–π —à–∞–≥: –∑–∞–ø—É—Å—Ç–∏—Ç–µ start_training.py")
        else:
            print(f"\n‚ùå –ü—Ä–æ–±–ª–µ–º—ã —Å –¥–∞–Ω–Ω—ã–º–∏, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –æ—à–∏–±–∫–∏ –≤—ã—à–µ")
    else:
        print(f"\n‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ")
