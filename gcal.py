from google.oauth2.credentials import Credentials
from google_auth_oauthlib.flow import InstalledAppFlow
from google.auth.transport.requests import Request
from googleapiclient.discovery import build
import datetime
import os.path
import logging

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

SCOPES = ['https://www.googleapis.com/auth/calendar']

def get_credentials():
    """–ü–æ–ª—É—á–∏—Ç—å –≤–∞–ª–∏–¥–Ω—ã–µ —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è Google Calendar API"""
    creds = None
    
    if os.path.exists('token.json'):
        try:
            creds = Credentials.from_authorized_user_file('token.json', SCOPES)
            logger.info("‚úÖ –¢–æ–∫–µ–Ω –∑–∞–≥—Ä—É–∂–µ–Ω –∏–∑ —Ñ–∞–π–ª–∞")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–æ–∫–µ–Ω–∞: {e}")
            creds = None
    
    if not creds or not creds.valid:
        if creds and creds.expired and creds.refresh_token:
            try:
                logger.info("üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏—Å—Ç–µ–∫—à–µ–≥–æ —Ç–æ–∫–µ–Ω–∞...")
                creds.refresh(Request())
                logger.info("‚úÖ –¢–æ–∫–µ–Ω —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω")
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞: {e}")
                creds = None
        
        if not creds:
            logger.info("üîê –ù–∞—á–∏–Ω–∞–µ–º –ø–æ–ª–Ω—É—é –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é...")
            try:
                flow = InstalledAppFlow.from_client_secrets_file('credentials.json', SCOPES)
                creds = flow.run_local_server(port=0)
                logger.info("‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {e}")
                raise
        
        try:
            with open('token.json', 'w') as token:
                token.write(creds.to_json())
            logger.info("‚úÖ –¢–æ–∫–µ–Ω —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ —Ñ–∞–π–ª")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞: {e}")
    
    return creds

def add_event_to_calendar(summary, start_datetime, end_datetime, timezone='Asia/Almaty'):
    """–î–æ–±–∞–≤–∏—Ç—å —Å–æ–±—ã—Ç–∏–µ –≤ Google Calendar"""
    try:
        creds = get_credentials()
        service = build('calendar', 'v3', credentials=creds)
        
        event = {
            'summary': summary,
            'start': {
                'dateTime': start_datetime.isoformat(),
                'timeZone': timezone,
            },
            'end': {
                'dateTime': end_datetime.isoformat(),
                'timeZone': timezone,
            },
            'description': f'‚ú® –°–æ–∑–¥–∞–Ω–æ —á–µ—Ä–µ–∑ Vetra AI'
        }
        
        logger.info(f"üìÖ –°–æ–∑–¥–∞–µ–º —Å–æ–±—ã—Ç–∏–µ: {summary}")
        logger.info(f"‚è∞ –í—Ä–µ–º—è: {start_datetime.isoformat()} - {end_datetime.isoformat()}")
        
        event_result = service.events().insert(calendarId='primary', body=event).execute()
        
        logger.info(f"‚úÖ –°–æ–±—ã—Ç–∏–µ —Å–æ–∑–¥–∞–Ω–æ! ID: {event_result.get('id')}")
        return event_result
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–æ–±—ã—Ç–∏—è: {e}")
        return None

if __name__ == "__main__":
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –∫–∞–ª–µ–Ω–¥–∞—Ä—é...")
    try:
        creds = get_credentials()
        service = build('calendar', 'v3', credentials=creds)
        calendar_list = service.calendarList().list().execute()
        
        print("üìÖ –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–∞–ª–µ–Ω–¥–∞—Ä–∏:")
        for calendar in calendar_list.get('items', []):
            print(f"  - {calendar['summary']} (ID: {calendar['id']})")
        print("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —Ä–∞–±–æ—Ç–∞–µ—Ç!")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")