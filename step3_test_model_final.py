#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–§–ò–ù–ê–õ–¨–ù–´–ô –®–∞–≥ 3: –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–Ω-—Ç—é–Ω–∏–Ω–≥–æ–≤–æ–π –º–æ–¥–µ–ª–∏ Vetra AI
–≠—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç —Ç–µ—Å—Ç–∏—Ä—É–µ—Ç –≥–æ—Ç–æ–≤—É—é –º–æ–¥–µ–ª—å –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∫–∞–∫ –µ—ë –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å
"""

import json
import os
from openai import OpenAI

def get_openai_client():
    """–°–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç OpenAI"""
    api_key = os.getenv("OPENAI_API_KEY")
    
    if not api_key:
        api_key = input("üîë –í–≤–µ–¥–∏—Ç–µ –≤–∞—à OpenAI API –∫–ª—é—á: ").strip()
        if not api_key:
            print("‚ùå API –∫–ª—é—á –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω!")
            return None
    
    try:
        client = OpenAI(api_key=api_key)
        return client
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞: {e}")
        return None

def get_fine_tuned_model():
    """–ü–æ–ª—É—á–∞–µ–º –∏–º—è —Ñ–∞–π–Ω-—Ç—é–Ω–∏–Ω–≥–æ–≤–æ–π –º–æ–¥–µ–ª–∏"""
    
    # –ü—Ä–æ–±—É–µ–º –∏–∑ —Ñ–∞–π–ª–∞
    if os.path.exists("model_name.txt"):
        with open("model_name.txt", "r") as f:
            model_name = f.read().strip()
        if model_name:
            print(f"‚úÖ –ù–∞–π–¥–µ–Ω–∞ –º–æ–¥–µ–ª—å –∏–∑ —Ñ–∞–π–ª–∞: {model_name}")
            return model_name
    
    # –ü—Ä–æ–±—É–µ–º –∏–∑ JSON —Ñ–∞–π–ª–∞
    if os.path.exists("training_job_info.json"):
        try:
            with open("training_job_info.json", "r") as f:
                job_info = json.load(f)
            if "fine_tuned_model" in job_info:
                model_name = job_info["fine_tuned_model"]
                print(f"‚úÖ –ù–∞–π–¥–µ–Ω–∞ –º–æ–¥–µ–ª—å –∏–∑ JSON: {model_name}")
                return model_name
        except:
            pass
    
    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    print("‚ùå –ò–º—è –º–æ–¥–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ —Ñ–∞–π–ª–∞—Ö")
    print("üîç –ù–∞–π–¥–∏—Ç–µ –∏–º—è –≤–∞—à–µ–π –º–æ–¥–µ–ª–∏ –Ω–∞ https://platform.openai.com/finetune")
    print("üìù –§–æ—Ä–º–∞—Ç: ft:gpt-3.5-turbo-1106:your-org:vetra-ai-v1:xxxxxxxx")
    
    model_name = input("\nüéØ –í–≤–µ–¥–∏—Ç–µ –ø–æ–ª–Ω–æ–µ –∏–º—è –≤–∞—à–µ–π —Ñ–∞–π–Ω-—Ç—é–Ω–∏–Ω–≥–æ–≤–æ–π –º–æ–¥–µ–ª–∏: ").strip()
    
    if model_name and model_name.startswith("ft:"):
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–ª—è –±—É–¥—É—â–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
        with open("model_name.txt", "w") as f:
            f.write(model_name)
        return model_name
    
    print("‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –º–æ–¥–µ–ª–∏")
    return None

def test_model_with_examples(client, model_name):
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º –º–æ–¥–µ–ª—å —Å –ø—Ä–∏–º–µ—Ä–∞–º–∏ –∏–∑ –≤–∞—à–µ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞"""
    
    print(f"\nüß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ú–û–î–ï–õ–ò: {model_name}")
    print("=" * 70)
    
    # –¢–µ—Å—Ç–æ–≤—ã–µ –ø—Ä–∏–º–µ—Ä—ã –∏–∑ –≤–∞—à–µ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞ Vetra AI
    test_cases = [
        # –ü—Ä–æ—Å—Ç—ã–µ —Å–æ–±—ã—Ç–∏—è
        "–≤—Å—Ç—Ä–µ—á–∞ —Å –∫–ª–∏–µ–Ω—Ç–æ–º –∑–∞–≤—Ç—Ä–∞ –≤ 14:00",
        "–ø–æ–∑–≤–æ–Ω–∏—Ç—å –º–∞–º–µ —Å–µ–≥–æ–¥–Ω—è –≤ 18:00",
        "–ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—è –ø—Ä–æ–µ–∫—Ç–∞ –≤ –ø—è—Ç–Ω–∏—Ü—É –≤ 10:00",
        
        # –ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è (–≤–∞—à–∞ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å!)
        "–≤—Å—Ç—Ä–µ—á–∞ —Å –∫–ª–∏–µ–Ω—Ç–æ–º –≤ 10:00, –æ–±–µ–¥ —Å –∫–æ–ª–ª–µ–≥–∞–º–∏ –≤ 13:00",
        "–∑–∞–ø–ª–∞–Ω–∏—Ä—É–π –º–Ω–µ –¥–≤–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è –ü—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—è –ø—Ä–æ–µ–∫—Ç–∞ ‚Äì 3 –∏—é–Ω—è –≤ 12:00 –í—Å—Ç—Ä–µ—á–∞ —Å –∫–æ–º–∞–Ω–¥–æ–π ‚Äì 5 –∏—é–Ω—è –≤ 9:00",
        
        # –í—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∏–∞–ø–∞–∑–æ–Ω—ã
        "—Ä–∞–±–æ—Ç–∞ —Å 9:00 –¥–æ 17:00",
        "–≤—Å—Ç—Ä–µ—á–∞ —Å –õ–µ—Ä–æ–π —Å 12:00 –¥–æ 14:00",
        
        # –ö–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –¥–∞—Ç—ã
        "–≤—Å—Ç—Ä–µ—á–∞ 26 –º–∞—è –≤ 14:00",
        "–¥–µ–¥–ª–∞–π–Ω 25.12.2024 –≤ 23:59",
        
        # –°–ª–æ–∂–Ω—ã–µ —Å–ª—É—á–∞–∏
        "—á–µ—Ä–µ–∑ —á–∞—Å –≤—Å—Ç—Ä–µ—á–∞ —Å –î–∞–º–∏—Ä–æ–º",
        "–ø–æ—Å–ª–µ–∑–∞–≤—Ç—Ä–∞ –≤ 16:30 –æ–±–µ–¥ —Å –ø–∞—Ä—Ç–Ω–µ—Ä–∞–º–∏",
        
        # –ù–ï-–∫–∞–ª–µ–Ω–¥–∞—Ä–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è (–¥–æ–ª–∂–Ω—ã –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å –ø—É—Å—Ç–æ–π –æ–±—ä–µ–∫—Ç)
        "–ø—Ä–∏–≤–µ—Ç –∫–∞–∫ –¥–µ–ª–∞?",
        "—á—Ç–æ —Ç–∞–∫–æ–µ –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç?",
    ]
    
    successful_tests = 0
    total_tests = len(test_cases)
    
    for i, test_input in enumerate(test_cases, 1):
        print(f"\n{i:2d}. üß™ –¢–µ—Å—Ç: '{test_input}'")
        
        try:
            # –î–µ–ª–∞–µ–º –∑–∞–ø—Ä–æ—Å –∫ —Ñ–∞–π–Ω-—Ç—é–Ω–∏–Ω–≥–æ–≤–æ–π –º–æ–¥–µ–ª–∏
            response = client.chat.completions.create(
                model=model_name,
                messages=[
                    {
                        "role": "system", 
                        "content": """–¢—ã Vetra AI - —É–º–Ω—ã–π –∫–∞–ª–µ–Ω–¥–∞—Ä–Ω—ã–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç. –ê–Ω–∞–ª–∏–∑–∏—Ä—É–π –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω—ã–π —è–∑—ã–∫ (—Ä—É—Å—Å–∫–∏–π/–∞–Ω–≥–ª–∏–π—Å–∫–∏–π) –∏ –≤–æ–∑–≤—Ä–∞—â–∞–π —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∫–∞–ª–µ–Ω–¥–∞—Ä—è –≤ JSON —Ñ–æ—Ä–º–∞—Ç–µ.

–î–ª—è –∫–∞–ª–µ–Ω–¥–∞—Ä–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π –≤–æ–∑–≤—Ä–∞—â–∞–π –æ–±—ä–µ–∫—Ç —Å –ø–æ–ª—è–º–∏:
- title: –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è
- date: –¥–∞—Ç–∞ (tomorrow, Friday, 15 –º–∞—è, etc.)
- time: –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ HH:MM
- type: "event" –∏–ª–∏ "reminder" 
- recurrence: –µ—Å–ª–∏ —Å–æ–±—ã—Ç–∏–µ –ø–æ–≤—Ç–æ—Ä—è—é—â–µ–µ—Å—è
- reminder: –≤—Ä–µ–º—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
- location: –º–µ—Å—Ç–æ (–µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω–æ)
- participants: —É—á–∞—Å—Ç–Ω–∏–∫–∏ (–µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω—ã)
- duration: –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å (–µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω–∞)

–î–ª—è –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π –≤–æ–∑–≤—Ä–∞—â–∞–π –º–∞—Å—Å–∏–≤ –æ–±—ä–µ–∫—Ç–æ–≤.
–î–ª—è –ù–ï-–∫–∞–ª–µ–Ω–¥–∞—Ä–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –≤–æ–∑–≤—Ä–∞—â–∞–π –ø—É—Å—Ç–æ–π –æ–±—ä–µ–∫—Ç {}."""
                    },
                    {
                        "role": "user", 
                        "content": test_input
                    }
                ],
                max_tokens=500,
                temperature=0.1
            )
            
            # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç
            result = response.choices[0].message.content
            
            # –ü—Ä–æ–±—É–µ–º —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å JSON
            try:
                parsed_result = json.loads(result)
                print(f"    ‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç: {json.dumps(parsed_result, ensure_ascii=False)}")
                successful_tests += 1
                
                # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–∞—á–µ—Å—Ç–≤–æ –æ—Ç–≤–µ—Ç–∞
                if isinstance(parsed_result, list):
                    print(f"    üìä –ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è: {len(parsed_result)} —à—Ç.")
                elif isinstance(parsed_result, dict):
                    if parsed_result:
                        title = parsed_result.get('title', 'N/A')
                        time_val = parsed_result.get('time', 'N/A')
                        print(f"    üìä –°–æ–±—ã—Ç–∏–µ: '{title}' –≤ {time_val}")
                    else:
                        print(f"    üìä –ü—É—Å—Ç–æ–π –æ–±—ä–µ–∫—Ç (–ù–ï-–∫–∞–ª–µ–Ω–¥–∞—Ä–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ)")
                        
            except json.JSONDecodeError:
                print(f"    ‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π JSON: {result}")
                
        except Exception as e:
            print(f"    ‚ùå –û—à–∏–±–∫–∞ API: {e}")
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    success_rate = (successful_tests / total_tests) * 100
    print(f"\nüìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø:")
    print(f"   ‚úÖ –£—Å–ø–µ—à–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤: {successful_tests}/{total_tests}")
    print(f"   üìà –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: {success_rate:.1f}%")
    
    if success_rate >= 90:
        print(f"   üéâ –û–¢–õ–ò–ß–ù–û! –ú–æ–¥–µ–ª—å —Ä–∞–±–æ—Ç–∞–µ—Ç –ø—Ä–µ–≤–æ—Å—Ö–æ–¥–Ω–æ!")
    elif success_rate >= 70:
        print(f"   ‚úÖ –•–û–†–û–®–û! –ú–æ–¥–µ–ª—å —Ä–∞–±–æ—Ç–∞–µ—Ç —Å—Ç–∞–±–∏–ª—å–Ω–æ!")
    elif success_rate >= 50:
        print(f"   ‚ö†Ô∏è  –ù–û–†–ú–ê–õ–¨–ù–û! –ï—Å—Ç—å –º–µ—Å—Ç–æ –¥–ª—è —É–ª—É—á—à–µ–Ω–∏–π")
    else:
        print(f"   ‚ùå –ü–õ–û–•–û! –ù—É–∂–Ω–æ –ø–µ—Ä–µ–æ–±—É—á–µ–Ω–∏–µ –∏–ª–∏ –±–æ–ª—å—à–µ –¥–∞–Ω–Ω—ã—Ö")
    
    return success_rate

def interactive_test(client, model_name):
    """–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏"""
    
    print(f"\nüéÆ –ò–ù–¢–ï–†–ê–ö–¢–ò–í–ù–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï")
    print("-" * 40)
    print("–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ–∏ –∑–∞–ø—Ä–æ—Å—ã –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –º–æ–¥–µ–ª–∏")
    print("–í–≤–µ–¥–∏—Ç–µ 'quit' –∏–ª–∏ '–≤—ã—Ö–æ–¥' –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è")
    
    while True:
        try:
            user_input = input("\nüéØ –í–∞—à –∑–∞–ø—Ä–æ—Å: ").strip()
            
            if user_input.lower() in ['quit', 'exit', '–≤—ã—Ö–æ–¥', 'q']:
                break
            
            if not user_input:
                continue
            
            print("ü§ñ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é...")
            
            response = client.chat.completions.create(
                model=model_name,
                messages=[
                    {
                        "role": "system", 
                        "content": """–¢—ã Vetra AI - —É–º–Ω—ã–π –∫–∞–ª–µ–Ω–¥–∞—Ä–Ω—ã–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç. –ê–Ω–∞–ª–∏–∑–∏—Ä—É–π –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω—ã–π —è–∑—ã–∫ (—Ä—É—Å—Å–∫–∏–π/–∞–Ω–≥–ª–∏–π—Å–∫–∏–π) –∏ –≤–æ–∑–≤—Ä–∞—â–∞–π —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∫–∞–ª–µ–Ω–¥–∞—Ä—è –≤ JSON —Ñ–æ—Ä–º–∞—Ç–µ.

–î–ª—è –∫–∞–ª–µ–Ω–¥–∞—Ä–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π –≤–æ–∑–≤—Ä–∞—â–∞–π –æ–±—ä–µ–∫—Ç —Å –ø–æ–ª—è–º–∏:
- title: –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è
- date: –¥–∞—Ç–∞ (tomorrow, Friday, 15 –º–∞—è, etc.)
- time: –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ HH:MM
- type: "event" –∏–ª–∏ "reminder" 
- recurrence: –µ—Å–ª–∏ —Å–æ–±—ã—Ç–∏–µ –ø–æ–≤—Ç–æ—Ä—è—é—â–µ–µ—Å—è
- reminder: –≤—Ä–µ–º—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
- location: –º–µ—Å—Ç–æ (–µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω–æ)
- participants: —É—á–∞—Å—Ç–Ω–∏–∫–∏ (–µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω—ã)
- duration: –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å (–µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω–∞)

–î–ª—è –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π –≤–æ–∑–≤—Ä–∞—â–∞–π –º–∞—Å—Å–∏–≤ –æ–±—ä–µ–∫—Ç–æ–≤.
–î–ª—è –ù–ï-–∫–∞–ª–µ–Ω–¥–∞—Ä–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –≤–æ–∑–≤—Ä–∞—â–∞–π –ø—É—Å—Ç–æ–π –æ–±—ä–µ–∫—Ç {}."""
                    },
                    {
                        "role": "user", 
                        "content": user_input
                    }
                ],
                max_tokens=500,
                temperature=0.1
            )
            
            result = response.choices[0].message.content
            
            try:
                parsed_result = json.loads(result)
                print(f"‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç:")
                print(json.dumps(parsed_result, ensure_ascii=False, indent=2))
            except json.JSONDecodeError:
                print(f"‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π JSON –æ—Ç–≤–µ—Ç:")
                print(result)
                
        except KeyboardInterrupt:
            break
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
    
    print("\nüëã –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")

def generate_integration_code(model_name):
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–æ–¥ –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –≤ –æ—Å–Ω–æ–≤–Ω–æ–π –ø—Ä–æ–µ–∫—Ç"""
    
    integration_code = f'''#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Ñ–∞–π–Ω-—Ç—é–Ω–∏–Ω–≥–æ–≤–æ–π –º–æ–¥–µ–ª–∏ Vetra AI –≤ –æ—Å–Ω–æ–≤–Ω–æ–π –ø—Ä–æ–µ–∫—Ç
–ó–∞–º–µ–Ω–∏—Ç–µ –≤–∞—à parse_with_ai —Ñ—É–Ω–∫—Ü–∏—é —ç—Ç–∏–º –∫–æ–¥–æ–º
"""

import json
from openai import OpenAI

# –í–∞—à–∞ —Ñ–∞–π–Ω-—Ç—é–Ω–∏–Ω–≥–æ–≤–∞—è –º–æ–¥–µ–ª—å
FINE_TUNED_MODEL = "{model_name}"

def parse_with_fine_tuned_ai(text, user_timezone='Asia/Almaty'):
    """
    –ü–∞—Ä—Å–∏–Ω–≥ —Ç–µ–∫—Å—Ç–∞ —Å –ø–æ–º–æ—â—å—é —Ñ–∞–π–Ω-—Ç—é–Ω–∏–Ω–≥–æ–≤–æ–π –º–æ–¥–µ–ª–∏ Vetra AI
    
    Args:
        text: –í—Ö–æ–¥–Ω–æ–π —Ç–µ–∫—Å—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_timezone: –ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        
    Returns:
        dict –∏–ª–∏ list: –°—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∫–∞–ª–µ–Ω–¥–∞—Ä—è
    """
    
    try:
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç OpenAI
        client = OpenAI()  # API –∫–ª—é—á –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
        
        # –î–µ–ª–∞–µ–º –∑–∞–ø—Ä–æ—Å –∫ —Ñ–∞–π–Ω-—Ç—é–Ω–∏–Ω–≥–æ–≤–æ–π –º–æ–¥–µ–ª–∏
        response = client.chat.completions.create(
            model=FINE_TUNED_MODEL,
            messages=[
                {{
                    "role": "system", 
                    "content": """–¢—ã Vetra AI - —É–º–Ω—ã–π –∫–∞–ª–µ–Ω–¥–∞—Ä–Ω—ã–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç. –ê–Ω–∞–ª–∏–∑–∏—Ä—É–π –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω—ã–π —è–∑—ã–∫ (—Ä—É—Å—Å–∫–∏–π/–∞–Ω–≥–ª–∏–π—Å–∫–∏–π) –∏ –≤–æ–∑–≤—Ä–∞—â–∞–π —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∫–∞–ª–µ–Ω–¥–∞—Ä—è –≤ JSON —Ñ–æ—Ä–º–∞—Ç–µ.

–î–ª—è –∫–∞–ª–µ–Ω–¥–∞—Ä–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π –≤–æ–∑–≤—Ä–∞—â–∞–π –æ–±—ä–µ–∫—Ç —Å –ø–æ–ª—è–º–∏:
- title: –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è
- date: –¥–∞—Ç–∞ (tomorrow, Friday, 15 –º–∞—è, etc.)
- time: –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ HH:MM
- type: "event" –∏–ª–∏ "reminder" 
- recurrence: –µ—Å–ª–∏ —Å–æ–±—ã—Ç–∏–µ –ø–æ–≤—Ç–æ—Ä—è—é—â–µ–µ—Å—è
- reminder: –≤—Ä–µ–º—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
- location: –º–µ—Å—Ç–æ (–µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω–æ)
- participants: —É—á–∞—Å—Ç–Ω–∏–∫–∏ (–µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω—ã)
- duration: –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å (–µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω–∞)

–î–ª—è –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π –≤–æ–∑–≤—Ä–∞—â–∞–π –º–∞—Å—Å–∏–≤ –æ–±—ä–µ–∫—Ç–æ–≤.
–î–ª—è –ù–ï-–∫–∞–ª–µ–Ω–¥–∞—Ä–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –≤–æ–∑–≤—Ä–∞—â–∞–π –ø—É—Å—Ç–æ–π –æ–±—ä–µ–∫—Ç {{}}."""
                }},
                {{
                    "role": "user", 
                    "content": text
                }}
            ],
            max_tokens=800,
            temperature=0.1
        )
        
        # –ü–∞—Ä—Å–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        result = response.choices[0].message.content
        parsed_result = json.loads(result)
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–¥ –≤–∞—à —Ñ–æ—Ä–º–∞—Ç
        if isinstance(parsed_result, list):
            # –ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è
            events = []
            for event_data in parsed_result:
                processed_event = process_event_data(event_data, user_timezone)
                if processed_event:
                    events.append(processed_event)
            return events
            
        elif isinstance(parsed_result, dict) and parsed_result:
            # –û–¥–∏–Ω–æ—á–Ω–æ–µ —Å–æ–±—ã—Ç–∏–µ
            processed_event = process_event_data(parsed_result, user_timezone)
            return [processed_event] if processed_event else []
            
        else:
            # –ù–ï-–∫–∞–ª–µ–Ω–¥–∞—Ä–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            return []
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ñ–∞–π–Ω-—Ç—é–Ω–∏–Ω–≥–æ–≤–æ–π –º–æ–¥–µ–ª–∏: {{e}}")
        # Fallback –Ω–∞ —Å—Ç–∞—Ä—É—é –ª–æ–≥–∏–∫—É
        return fallback_parse(text, user_timezone)

def process_event_data(event_data, user_timezone):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç –≤–∞—à–µ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞
    """
    try:
        from datetime_utils import enhanced_datetime_parser, validate_datetime
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –ø–æ–ª—è
        title = event_data.get('title', '–°–æ–±—ã—Ç–∏–µ')
        date_str = event_data.get('date', '')
        time_str = event_data.get('time', '')
        event_type = event_data.get('type', 'event')
        
        # –°–æ–∑–¥–∞–µ–º –ø–æ–ª–Ω—ã–π —Ç–µ–∫—Å—Ç –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ –¥–∞—Ç—ã
        full_text = f"{{title}} {{date_str}} –≤ {{time_str}}"
        
        # –ü–∞—Ä—Å–∏–º –¥–∞—Ç—É/–≤—Ä–µ–º—è
        parsed_datetime = enhanced_datetime_parser(full_text, user_timezone)
        if not parsed_datetime:
            return None
        
        # –í–∞–ª–∏–¥–∏—Ä—É–µ–º
        validated_datetime = validate_datetime(parsed_datetime, user_timezone)
        if not validated_datetime:
            return None
        
        return (validated_datetime, title, event_type)
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–±—ã—Ç–∏—è: {{e}}")
        return None

def fallback_parse(text, user_timezone):
    """
    Fallback –Ω–∞ —Å—Ç–∞—Ä—É—é –ª–æ–≥–∏–∫—É –µ—Å–ª–∏ —Ñ–∞–π–Ω-—Ç—é–Ω–∏–Ω–≥ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç
    """
    try:
        from text_parser import extract_multiple_events
        return extract_multiple_events(text, user_timezone)
    except:
        return []

# –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ main.py:
# 
# –í —Ñ—É–Ω–∫—Ü–∏–∏ handle_message() –∑–∞–º–µ–Ω–∏—Ç–µ —Å—Ç—Ä–æ–∫—É:
# events = enhanced_extract_multiple_events_integrated(user_text, DEFAULT_TIMEZONE)
# 
# –ù–∞:
# events = parse_with_fine_tuned_ai(user_text, DEFAULT_TIMEZONE)
'''
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–¥ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏
    with open("vetra_ai_integration.py", "w", encoding="utf-8") as f:
        f.write(integration_code)
    
    print(f"\nüìù –ö–û–î –ò–ù–¢–ï–ì–†–ê–¶–ò–ò –°–û–•–†–ê–ù–ï–ù: vetra_ai_integration.py")
    print(f"üîß –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —ç—Ç–æ—Ç –∫–æ–¥ –¥–ª—è –∑–∞–º–µ–Ω—ã –ø–∞—Ä—Å–µ—Ä–∞ –≤ main.py")

if __name__ == "__main__":
    print("üß™ VETRA AI - –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –§–ê–ô–ù-–¢–Æ–ù–ò–ù–ì–û–í–û–ô –ú–û–î–ï–õ–ò")
    print("=" * 60)
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç OpenAI
    client = get_openai_client()
    if not client:
        exit(1)
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–º—è –º–æ–¥–µ–ª–∏
    model_name = get_fine_tuned_model()
    if not model_name:
        exit(1)
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –º–æ–¥–µ–ª—å
    success_rate = test_model_with_examples(client, model_name)
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–æ–¥ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏
    generate_integration_code(model_name)
    
    # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
    print(f"\n‚ùì –•–æ—Ç–∏—Ç–µ –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –º–æ–¥–µ–ª—å –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ? (y/n): ", end="")
    try:
        choice = input().lower().strip()
        if choice in ['y', 'yes', '–¥–∞', '']:
            interactive_test(client, model_name)
    except KeyboardInterrupt:
        pass
    
    print(f"\nüéâ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û!")
    print(f"üìä –£—Å–ø–µ—à–Ω–æ—Å—Ç—å –º–æ–¥–µ–ª–∏: {success_rate:.1f}%")
    print(f"üìù –ö–æ–¥ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏: vetra_ai_integration.py")
    print(f"üöÄ –¢–µ–ø–µ—Ä—å –º–æ–∂–µ—Ç–µ –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞—Ç—å –º–æ–¥–µ–ª—å –≤ main.py!")
    print("=" * 60)