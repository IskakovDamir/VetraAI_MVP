#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–®–∞–≥ 2: –ó–∞–ø—É—Å–∫ —Ñ–∞–π–Ω-—Ç—é–Ω–∏–Ω–≥–∞ Vetra AI
–≠—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç –∑–∞–≥—Ä—É–∂–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –≤ OpenAI –∏ –∑–∞–ø—É—Å–∫–∞–µ—Ç –æ–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏
"""

import json
import os
import time
from openai import OpenAI

# –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º API –∫–ª—é—á
os.environ["OPENAI_API_KEY"] = "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"

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–ª–∏–µ–Ω—Ç OpenAI
client = OpenAI()

def upload_training_file():
    """–ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∞–π–ª —Å –¥–∞–Ω–Ω—ã–º–∏ –≤ OpenAI"""
    
    training_file_path = "vetra_training_data.jsonl"
    
    if not os.path.exists(training_file_path):
        print(f"‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {training_file_path}")
        print("üîß –°–Ω–∞—á–∞–ª–∞ –∑–∞–ø—É—Å—Ç–∏—Ç–µ prepare_data.py")
        return None
    
    print(f"üì§ –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: {training_file_path}")
    
    try:
        with open(training_file_path, "rb") as f:
            training_file = client.files.create(
                file=f,
                purpose="fine-tune"
            )
        
        print(f"‚úÖ –§–∞–π–ª —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω!")
        print(f"üìÑ ID —Ñ–∞–π–ª–∞: {training_file.id}")
        print(f"üìä –†–∞–∑–º–µ—Ä: {training_file.bytes} –±–∞–π—Ç")
        print(f"üìÖ –î–∞—Ç–∞: {training_file.created_at}")
        
        return training_file.id
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞: {e}")
        return None

def start_fine_tuning(training_file_id):
    """–ó–∞–ø—É—Å–∫–∞–µ–º —Ñ–∞–π–Ω-—Ç—é–Ω–∏–Ω–≥"""
    
    print(f"\nüöÄ –ó–∞–ø—É—Å–∫–∞–µ–º —Ñ–∞–π–Ω-—Ç—é–Ω–∏–Ω–≥ –º–æ–¥–µ–ª–∏...")
    
    try:
        fine_tuning_job = client.fine_tuning.jobs.create(
            training_file=training_file_id,
            model="gpt-3.5-turbo-1106",  # –ü–æ—Å–ª–µ–¥–Ω—è—è —Å—Ç–∞–±–∏–ª—å–Ω–∞—è –≤–µ—Ä—Å–∏—è
            hyperparameters={
                "n_epochs": 3,  # 3 —ç–ø–æ—Ö–∏ - —Ö–æ—Ä–æ—à–æ –¥–ª—è –≤–∞—à–µ–≥–æ —Ä–∞–∑–º–µ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö
                "batch_size": 1,
                "learning_rate_multiplier": 2
            },
            suffix="vetra-ai"  # –°—É—Ñ—Ñ–∏–∫—Å –¥–ª—è –∏–º–µ–Ω–∏ –º–æ–¥–µ–ª–∏
        )
        
        print(f"‚úÖ –§–∞–π–Ω-—Ç—é–Ω–∏–Ω–≥ –∑–∞–ø—É—â–µ–Ω!")
        print(f"üÜî ID –∑–∞–¥–∞—á–∏: {fine_tuning_job.id}")
        print(f"üìä –°—Ç–∞—Ç—É—Å: {fine_tuning_job.status}")
        print(f"üéØ –ú–æ–¥–µ–ª—å: {fine_tuning_job.model}")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –∑–∞–¥–∞—á–∏ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è
        with open("training_job_id.txt", "w") as f:
            f.write(fine_tuning_job.id)
        
        print(f"üíæ ID –∑–∞–¥–∞—á–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ training_job_id.txt")
        
        return fine_tuning_job.id
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Ñ–∞–π–Ω-—Ç—é–Ω–∏–Ω–≥–∞: {e}")
        return None

def get_training_status(job_id):
    """–ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –æ–±—É—á–µ–Ω–∏—è"""
    
    try:
        job = client.fine_tuning.jobs.retrieve(job_id)
        
        print(f"\nüìä –°–¢–ê–¢–£–° –û–ë–£–ß–ï–ù–ò–Ø:")
        print(f"üÜî ID –∑–∞–¥–∞—á–∏: {job.id}")
        print(f"üìà –°—Ç–∞—Ç—É—Å: {job.status}")
        print(f"üéØ –ë–∞–∑–æ–≤–∞—è –º–æ–¥–µ–ª—å: {job.model}")
        print(f"üìÖ –°–æ–∑–¥–∞–Ω–æ: {job.created_at}")
        
        if job.fine_tuned_model:
            print(f"üéâ –ì–æ—Ç–æ–≤–∞—è –º–æ–¥–µ–ª—å: {job.fine_tuned_model}")
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–º—è –º–æ–¥–µ–ª–∏
            with open("model_name.txt", "w") as f:
                f.write(job.fine_tuned_model)
            print(f"üíæ –ò–º—è –º–æ–¥–µ–ª–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ model_name.txt")
        
        if job.status == "succeeded":
            print(f"üéâ –û–ë–£–ß–ï–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û –£–°–ü–ï–®–ù–û!")
            return "succeeded"
        elif job.status == "failed":
            print(f"‚ùå –û–ë–£–ß–ï–ù–ò–ï –ü–†–û–í–ê–õ–ò–õ–û–°–¨!")
            if hasattr(job, 'error') and job.error:
                print(f"üî• –û—à–∏–±–∫–∞: {job.error}")
            return "failed"
        elif job.status in ["validating_files", "queued", "running"]:
            print(f"‚è≥ –û–±—É—á–µ–Ω–∏–µ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ... –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–∑–∂–µ")
            return "in_progress"
        else:
            print(f"‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Å—Ç–∞—Ç—É—Å: {job.status}")
            return "unknown"
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞: {e}")
        return "error"

def list_fine_tuned_models():
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ —Ñ–∞–π–Ω-—Ç—é–Ω –º–æ–¥–µ–ª–∏"""
    
    print(f"\nüìã –í–∞—à–∏ —Ñ–∞–π–Ω-—Ç—é–Ω –º–æ–¥–µ–ª–∏:")
    
    try:
        jobs = client.fine_tuning.jobs.list(limit=10)
        
        for job in jobs.data:
            status_emoji = {
                "succeeded": "‚úÖ",
                "failed": "‚ùå", 
                "running": "‚è≥",
                "queued": "üïí",
                "cancelled": "üö´"
            }.get(job.status, "‚ùì")
            
            print(f"{status_emoji} {job.id} | {job.status} | {job.fine_tuned_model or 'N/A'}")
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞: {e}")

if __name__ == "__main__":
    print("üöÄ Vetra AI - –ó–∞–ø—É—Å–∫ —Ñ–∞–π–Ω-—Ç—é–Ω–∏–Ω–≥–∞")
    print("=" * 50)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –∑–∞–ø—É—â–µ–Ω–Ω–∞—è –∑–∞–¥–∞—á–∞
    if os.path.exists("training_job_id.txt"):
        with open("training_job_id.txt", "r") as f:
            existing_job_id = f.read().strip()
        
        print(f"üìã –ù–∞–π–¥–µ–Ω–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∞—è –∑–∞–¥–∞—á–∞: {existing_job_id}")
        print(f"üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å...")
        
        status = get_training_status(existing_job_id)
        
        if status == "succeeded":
            print(f"\nüéâ –£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –≥–æ—Ç–æ–≤–∞—è –º–æ–¥–µ–ª—å!")
            print(f"üéØ –°–ª–µ–¥—É—é—â–∏–π —à–∞–≥: –∑–∞–ø—É—Å—Ç–∏—Ç–µ test_model.py")
        elif status == "in_progress":
            print(f"\n‚è≥ –û–±—É—á–µ–Ω–∏–µ –µ—â–µ –∏–¥–µ—Ç, –ø–æ–¥–æ–∂–¥–∏—Ç–µ...")
            print(f"üîÑ –ó–∞–ø—É—Å—Ç–∏—Ç–µ —ç—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç –ø–æ–∑–∂–µ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏")
        elif status in ["failed", "error"]:
            print(f"\nüîÑ –ü—Ä–µ–¥—ã–¥—É—â–µ–µ –æ–±—É—á–µ–Ω–∏–µ –ø—Ä–æ–≤–∞–ª–∏–ª–æ—Å—å, –∑–∞–ø—É—Å–∫–∞–µ–º –Ω–æ–≤–æ–µ...")
            # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Å –Ω–æ–≤—ã–º –æ–±—É—á–µ–Ω–∏–µ–º
        
        if status in ["succeeded", "in_progress"]:
            exit(0)
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –Ω–æ–≤–æ–µ –æ–±—É—á–µ–Ω–∏–µ
    print(f"\nüöÄ –ó–∞–ø—É—Å–∫–∞–µ–º –Ω–æ–≤–æ–µ –æ–±—É—á–µ–Ω–∏–µ...")
    
    # –®–∞–≥ 1: –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∞–π–ª
    training_file_id = upload_training_file()
    
    if not training_file_id:
        print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª")
        exit(1)
    
    # –®–∞–≥ 2: –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±—É—á–µ–Ω–∏–µ
    job_id = start_fine_tuning(training_file_id)
    
    if not job_id:
        print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å –æ–±—É—á–µ–Ω–∏–µ")
        exit(1)
    
    # –®–∞–≥ 3: –ù–∞—á–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞
    print(f"\n‚è≥ –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å...")
    time.sleep(2)  # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞
    
    status = get_training_status(job_id)
    
    # –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    print(f"\n" + "="*50)
    print(f"üìã –ß–¢–û –î–ê–õ–¨–®–ï:")
    print(f"‚è≥ –û–±—É—á–µ–Ω–∏–µ –∑–∞–π–º–µ—Ç 20-60 –º–∏–Ω—É—Ç")
    print(f"üîÑ –ó–∞–ø—É—Å–∫–∞–π—Ç–µ —ç—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç –∫–∞–∂–¥—ã–µ 10-15 –º–∏–Ω—É—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞")
    print(f"üì± –ò–ª–∏ –ø—Ä–æ–≤–µ—Ä—è–π—Ç–µ –Ω–∞ —Å–∞–π—Ç–µ: https://platform.openai.com/finetune")
    print(f"üéØ –ö–æ–≥–¥–∞ —Å—Ç–∞—Ç—É—Å —Å—Ç–∞–Ω–µ—Ç 'succeeded', –∑–∞–ø—É—Å—Ç–∏—Ç–µ test_model.py")
    print(f"="*50)
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ –º–æ–¥–µ–ª–∏
    list_fine_tuned_models()
