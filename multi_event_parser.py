"""
üéØ –°–ü–ï–¶–ò–ê–õ–¨–ù–´–ô –ü–ê–†–°–ï–† –¥–ª—è –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π Vetra AI
–†–µ—à–∞–µ—Ç –ø—Ä–æ–±–ª–µ–º—É –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏—è —Å–æ–±—ã—Ç–∏–π –≤ –æ–¥–Ω–æ
"""

import re
from datetime import datetime, timedelta
from datetime_utils import enhanced_datetime_parser, validate_datetime
import logging

logger = logging.getLogger(__name__)

def parse_structured_events(text, user_timezone='Asia/Almaty'):
    """
    üî• –ù–û–í–ê–Ø –§–£–ù–ö–¶–ò–Ø: –ü–∞—Ä—Å–∏–Ω–≥ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π
    –°–ø–µ—Ü–∏–∞–ª—å–Ω–æ –¥–ª—è —Å–ª—É—á–∞–µ–≤ —Ç–∏–ø–∞:
    "3 –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è
     –ü—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—è –ø—Ä–æ–µ–∫—Ç–∞ ‚Äì 3 –∏—é–Ω—è –≤ 12:00
     –û–±–µ–¥ —Å –∫–ª–∏–µ–Ω—Ç–∞–º–∏ ‚Äì 31 –º–∞—è –≤ 14:30
     –í—Å—Ç—Ä–µ—á–∞ —Å –∫–æ–º–∞–Ω–¥–æ–π ‚Äì 5 –∏—é–Ω—è –≤ 9:00"
    """
    logger.info(f"üéØ –ü–∞—Ä—Å–∏–Ω–≥ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π: '{text}'")
    
    # –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã –∏ –ø–µ—Ä–µ–Ω–æ—Å—ã
    text = re.sub(r'\s+', ' ', text.strip())
    
    # –ò—â–µ–º –ø–∞—Ç—Ç–µ—Ä–Ω—ã –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π
    events = []
    
    # –ú–ï–¢–û–î 1: –ü–æ–∏—Å–∫ –ø–æ –ø–∞—Ç—Ç–µ—Ä–Ω—É "–Ω–∞–∑–≤–∞–Ω–∏–µ - –¥–∞—Ç–∞ –≤ –≤—Ä–µ–º—è"
    event_patterns = [
        r'([^‚Äì\-]+)\s*[‚Äì\-]\s*(\d{1,2}\s+(?:—è–Ω–≤–∞—Ä—è|—Ñ–µ–≤—Ä–∞–ª—è|–º–∞—Ä—Ç–∞|–∞–ø—Ä–µ–ª—è|–º–∞—è|–∏—é–Ω—è|–∏—é–ª—è|–∞–≤–≥—É—Å—Ç–∞|—Å–µ–Ω—Ç—è–±—Ä—è|–æ–∫—Ç—è–±—Ä—è|–Ω–æ—è–±—Ä—è|–¥–µ–∫–∞–±—Ä—è)\s+–≤\s+\d{1,2}:\d{2})',
        r'([^‚Äì\-]+)\s*[‚Äì\-]\s*(\d{1,2}\.\d{1,2}\s+–≤\s+\d{1,2}:\d{2})',
        r'([^‚Äì\-]+)\s*[‚Äì\-]\s*(\d{1,2}/\d{1,2}\s+–≤\s+\d{1,2}:\d{2})',
    ]
    
    for pattern in event_patterns:
        matches = re.findall(pattern, text, re.IGNORECASE)
        if matches:
            logger.info(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π –ø–æ –ø–∞—Ç—Ç–µ—Ä–Ω—É: {len(matches)}")
            
            for match in matches:
                title_part = match[0].strip()
                time_part = match[1].strip()
                
                # –û—á–∏—â–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –æ—Ç –º—É—Å–æ—Ä–∞
                clean_title = clean_event_title(title_part)
                if not clean_title or len(clean_title) < 3:
                    continue
                
                # –ü–∞—Ä—Å–∏–º –¥–∞—Ç—É/–≤—Ä–µ–º—è
                full_text = f"{clean_title} {time_part}"
                parsed_datetime = enhanced_datetime_parser(full_text, user_timezone)
                
                if parsed_datetime:
                    events.append((parsed_datetime, clean_title, 'event'))
                    logger.info(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ —Å–æ–±—ã—Ç–∏–µ: '{clean_title}' –≤ {parsed_datetime}")
    
    # –ú–ï–¢–û–î 2: –†–∞–∑–±–∏–≤–∫–∞ –ø–æ —Å—Ç—Ä–æ–∫–∞–º (–µ—Å–ª–∏ –µ—Å—Ç—å –ø–µ—Ä–µ–Ω–æ—Å—ã)
    if not events and ('\n' in text or '  ' in text):
        lines = re.split(r'\n|  +', text)
        for line in lines:
            line = line.strip()
            if len(line) < 5:  # –°–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∞—è —Å—Ç—Ä–æ–∫–∞
                continue
            
            # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ —Ç–∏–ø–∞ "3 –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è"
            if re.match(r'^\d+\s*–º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π?', line, re.IGNORECASE):
                continue
                
            # –ü—ã—Ç–∞–µ–º—Å—è —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å –∫–∞–∫ –æ—Ç–¥–µ–ª—å–Ω–æ–µ —Å–æ–±—ã—Ç–∏–µ
            parsed_datetime = enhanced_datetime_parser(line, user_timezone)
            if parsed_datetime:
                clean_title = extract_title_from_line(line)
                if clean_title:
                    events.append((parsed_datetime, clean_title, 'event'))
                    logger.info(f"‚úÖ –ò–∑ —Å—Ç—Ä–æ–∫–∏ –¥–æ–±–∞–≤–ª–µ–Ω–æ: '{clean_title}' –≤ {parsed_datetime}")
    
    # –ú–ï–¢–û–î 3: –ü–æ–∏—Å–∫ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –º–µ—Ç–æ–∫ –∏ —Ä–∞–∑–±–∏–≤–∫–∞ –ø–æ –Ω–∏–º
    if not events:
        time_markers = list(re.finditer(r'\d{1,2}\s+(?:—è–Ω–≤–∞—Ä—è|—Ñ–µ–≤—Ä–∞–ª—è|–º–∞—Ä—Ç–∞|–∞–ø—Ä–µ–ª—è|–º–∞—è|–∏—é–Ω—è|–∏—é–ª—è|–∞–≤–≥—É—Å—Ç–∞|—Å–µ–Ω—Ç—è–±—Ä—è|–æ–∫—Ç—è–±—Ä—è|–Ω–æ—è–±—Ä—è|–¥–µ–∫–∞–±—Ä—è)\s+–≤\s+\d{1,2}:\d{2}', text, re.IGNORECASE))
        
        if len(time_markers) >= 2:
            logger.info(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(time_markers)} –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –º–µ—Ç–æ–∫")
            
            for i, marker in enumerate(time_markers):
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≥—Ä–∞–Ω–∏—Ü—ã —Å–æ–±—ã—Ç–∏—è
                start_pos = time_markers[i-1].end() if i > 0 else 0
                end_pos = marker.end()
                
                event_text = text[start_pos:end_pos].strip()
                
                # –û—á–∏—â–∞–µ–º —Ç–µ–∫—Å—Ç
                if event_text.startswith('–º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è') or event_text.startswith('–º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π'):
                    continue
                    
                parsed_datetime = enhanced_datetime_parser(event_text, user_timezone)
                if parsed_datetime:
                    clean_title = extract_title_from_text_chunk(event_text)
                    if clean_title:
                        events.append((parsed_datetime, clean_title, 'event'))
                        logger.info(f"‚úÖ –ü–æ –≤—Ä–µ–º–µ–Ω–Ω–æ–π –º–µ—Ç–∫–µ: '{clean_title}' –≤ {parsed_datetime}")
    
    logger.info(f"üìä –ò—Ç–æ–≥–æ –Ω–∞–π–¥–µ–Ω–æ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π: {len(events)}")
    return events if events else None

def clean_event_title(title):
    """–û—á–∏—Å—Ç–∫–∞ –Ω–∞–∑–≤–∞–Ω–∏—è —Å–æ–±—ã—Ç–∏—è –æ—Ç –º—É—Å–æ—Ä–∞"""
    # –£–±–∏—Ä–∞–µ–º –Ω–æ–º–µ—Ä–∞ –∏ —Å—á–µ—Ç—á–∏–∫–∏ –≤ –Ω–∞—á–∞–ª–µ
    title = re.sub(r'^\d+\s*–º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π?\s*', '', title, flags=re.IGNORECASE)
    title = re.sub(r'^\d+\s*—Å–æ–±—ã—Ç–∏–π?\s*', '', title, flags=re.IGNORECASE)
    title = re.sub(r'^\d+\s*–≤—Å—Ç—Ä–µ—á?\s*', '', title, flags=re.IGNORECASE)
    
    # –£–±–∏—Ä–∞–µ–º —É–ø—Ä–∞–≤–ª—è—é—â–∏–µ —Å–ª–æ–≤–∞
    title = re.sub(r'^(?:–∑–∞–ø–ª–∞–Ω–∏—Ä—É–π|—Å–æ–∑–¥–∞–π|–¥–æ–±–∞–≤—å)\s+(?:–º–Ω–µ\s+)?', '', title, flags=re.IGNORECASE)
    
    # –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ —Å–∏–º–≤–æ–ª—ã
    title = re.sub(r'^[‚Äì\-\s]+|[‚Äì\-\s]+$', '', title)
    title = title.strip()
    
    return title if len(title) >= 3 else None

def extract_title_from_line(line):
    """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è –∏–∑ —Å—Ç—Ä–æ–∫–∏"""
    # –£–±–∏—Ä–∞–µ–º –¥–∞—Ç—É/–≤—Ä–µ–º—è
    line = re.sub(r'\d{1,2}\s+(?:—è–Ω–≤–∞—Ä—è|—Ñ–µ–≤—Ä–∞–ª—è|–º–∞—Ä—Ç–∞|–∞–ø—Ä–µ–ª—è|–º–∞—è|–∏—é–Ω—è|–∏—é–ª—è|–∞–≤–≥—É—Å—Ç–∞|—Å–µ–Ω—Ç—è–±—Ä—è|–æ–∫—Ç—è–±—Ä—è|–Ω–æ—è–±—Ä—è|–¥–µ–∫–∞–±—Ä—è)\s+–≤\s+\d{1,2}:\d{2}', '', line, flags=re.IGNORECASE)
    line = re.sub(r'\d{1,2}\.\d{1,2}\s+–≤\s+\d{1,2}:\d{2}', '', line)
    line = re.sub(r'–≤\s+\d{1,2}:\d{2}', '', line)
    
    # –£–±–∏—Ä–∞–µ–º —Ç–∏—Ä–µ –∏ –ª–∏—à–Ω–∏–µ —Å–∏–º–≤–æ–ª—ã
    line = re.sub(r'^[‚Äì\-\s]+|[‚Äì\-\s]+$', '', line)
    line = line.strip()
    
    return clean_event_title(line)

def extract_title_from_text_chunk(text):
    """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è –∏–∑ –∫—É—Å–∫–∞ —Ç–µ–∫—Å—Ç–∞"""
    # –£–±–∏—Ä–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —á–∞—Å—Ç–∏
    text = re.sub(r'\d{1,2}\s+(?:—è–Ω–≤–∞—Ä—è|—Ñ–µ–≤—Ä–∞–ª—è|–º–∞—Ä—Ç–∞|–∞–ø—Ä–µ–ª—è|–º–∞—è|–∏—é–Ω—è|–∏—é–ª—è|–∞–≤–≥—É—Å—Ç–∞|—Å–µ–Ω—Ç—è–±—Ä—è|–æ–∫—Ç—è–±—Ä—è|–Ω–æ—è–±—Ä—è|–¥–µ–∫–∞–±—Ä—è)\s+–≤\s+\d{1,2}:\d{2}', '', text, flags=re.IGNORECASE)
    
    # –ò—â–µ–º —Å–æ–±—ã—Ç–∏–π–Ω—ã–µ —Å–ª–æ–≤–∞
    event_words = ['–ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—è', '–≤—Å—Ç—Ä–µ—á–∞', '–æ–±–µ–¥', '–∑–≤–æ–Ω–æ–∫', '—Å–æ–∑–≤–æ–Ω', '—Å–æ–≤–µ—â–∞–Ω–∏–µ', '–º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ']
    
    for word in event_words:
        if word in text.lower():
            # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ñ—Ä–∞–∑—É —Å —ç—Ç–∏–º —Å–ª–æ–≤–æ–º
            pattern = rf'([^‚Äì\-]*{word}[^‚Äì\-]*)'
            match = re.search(pattern, text, re.IGNORECASE)
            if match:
                return clean_event_title(match.group(1))
    
    # Fallback - –ø–µ—Ä–≤—ã–µ —Å–ª–æ–≤–∞
    words = text.split()[:3]
    return clean_event_title(' '.join(words)) if words else None

def enhanced_extract_multiple_events(text, user_timezone='Asia/Almaty'):
    """
    üî• –£–õ–£–ß–®–ï–ù–ù–ê–Ø –≥–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Å–æ–±—ã—Ç–∏–π
    –°–Ω–∞—á–∞–ª–∞ –ø—ã—Ç–∞–µ—Ç—Å—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥, –ø–æ—Ç–æ–º –æ–±—ã—á–Ω—ã–π
    """
    logger.info(f"üîç –£–ª—É—á—à–µ–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Ç–µ–∫—Å—Ç–∞: '{text}'")
    
    # –ü–†–ò–û–†–ò–¢–ï–¢ 1: –°—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è
    structured_events = parse_structured_events(text, user_timezone)
    if structured_events and len(structured_events) >= 2:
        logger.info(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(structured_events)} —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π")
        return structured_events
    
    # –ü–†–ò–û–†–ò–¢–ï–¢ 2: –û–±—ã—á–Ω–∞—è –ª–æ–≥–∏–∫–∞ (—É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∞—è)
    try:
        from text_parser import extract_multiple_events
        regular_events = extract_multiple_events(text, user_timezone)
        if regular_events:
            logger.info(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(regular_events)} –æ–±—ã—á–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π")
            return regular_events
    except:
        pass
    
    # –ü–†–ò–û–†–ò–¢–ï–¢ 3: –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞—à–ª–∏, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ (–¥–∞–∂–µ –µ—Å–ª–∏ 1)
    if structured_events:
        logger.info(f"‚úÖ –í–æ–∑–≤—Ä–∞—â–∞–µ–º {len(structured_events)} –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π")
        return structured_events
    
    logger.warning("‚ùå –°–æ–±—ã—Ç–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
    return []

def test_structured_parsing():
    """–¢–µ—Å—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–∞—Ä—Å–∏–Ω–≥–∞"""
    test_cases = [
        "–∑–∞–ø–ª–∞–Ω–∏—Ä—É–π –º–Ω–µ –¥–≤–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è –ü—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—è –ø—Ä–æ–µ–∫—Ç–∞ - 3 –∏—é–Ω—è –≤ 12:00 –í—Å—Ç—Ä–µ—á–∞ —Å –∫–æ–º–∞–Ω–¥–æ–π - 5 –∏—é–Ω—è –≤ 9:00",
        "3 –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è –ü—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—è –ø—Ä–æ–µ–∫—Ç–∞ ‚Äì 3 –∏—é–Ω—è –≤ 12:00 –û–±–µ–¥ —Å –∫–ª–∏–µ–Ω—Ç–∞–º–∏ ‚Äì 31 –º–∞—è –≤ 14:30 –í—Å—Ç—Ä–µ—á–∞ —Å –∫–æ–º–∞–Ω–¥–æ–π ‚Äì 5 –∏—é–Ω—è –≤ 9:00",
        "–ü—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—è –ø—Ä–æ–µ–∫—Ç–∞ - 3 –∏—é–Ω—è –≤ 12:00\n–í—Å—Ç—Ä–µ—á–∞ —Å –∫–æ–º–∞–Ω–¥–æ–π - 5 –∏—é–Ω—è –≤ 9:00",
        "—Å–æ–∑–¥–∞–π –≤—Å—Ç—Ä–µ—á—É —Å –∫–ª–∏–µ–Ω—Ç–æ–º ‚Äì 15 –º–∞—è –≤ 10:00 –∏ –æ–±–µ–¥ —Å –ø–∞—Ä—Ç–Ω–µ—Ä–∞–º–∏ ‚Äì 16 –º–∞—è –≤ 13:00"
    ]
    
    print("üéØ –¢–ï–°–¢ –°–¢–†–£–ö–¢–£–†–ò–†–û–í–ê–ù–ù–û–ì–û –ü–ê–†–°–ò–ù–ì–ê")
    print("=" * 50)
    
    for i, text in enumerate(test_cases, 1):
        print(f"\n{i}. –¢–µ—Å—Ç: '{text}'")
        events = parse_structured_events(text)
        
        if events:
            print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(events)} —Å–æ–±—ã—Ç–∏–π:")
            for j, (dt, title, event_type) in enumerate(events, 1):
                print(f"   {j}. '{title}' - {dt.strftime('%d.%m –≤ %H:%M')}")
        else:
            print("‚ùå –°–æ–±—ã—Ç–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")

if __name__ == "__main__":
    test_structured_parsing()
